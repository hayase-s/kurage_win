
kurage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a62c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  0800a7bc  0800a7bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adc8  0800adc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800adc8  0800adc8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adc8  0800adc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adc8  0800adc8  0001adc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adcc  0800adcc  0001adcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800add0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000070  0800ae40  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800ae40  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000283b6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005040  00000000  00000000  00048456  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f0  00000000  00000000  0004d498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a0  00000000  00000000  0004e988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ee57  00000000  00000000  0004fc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019558  00000000  00000000  0006ea7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000934c0  00000000  00000000  00087fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e44  00000000  00000000  0011b514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7a4 	.word	0x0800a7a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a7a4 	.word	0x0800a7a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x28>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x28>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f001 f871 	bl	8001cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f007 fda4 	bl	8008764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40022000 	.word	0x40022000

08000c28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 f889 	bl	8001d5e <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c64:	f001 f851 	bl	8001d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004
 8000c84:	20000000 	.word	0x20000000

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000004 	.word	0x20000004
 8000cac:	20000098 	.word	0x20000098

08000cb0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000098 	.word	0x20000098

08000cc8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_Delay+0x40>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000004 	.word	0x20000004

08000d0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b09c      	sub	sp, #112	; 0x70
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e170      	b.n	8001036 <HAL_ADC_Init+0x302>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d176      	bne.n	8000e54 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d152      	bne.n	8000e14 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f005 fb3f 	bl	800640c <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d13b      	bne.n	8000e14 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 fe7d 	bl	8001a9c <ADC_Disable>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d12f      	bne.n	8000e14 <HAL_ADC_Init+0xe0>
 8000db4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d12b      	bne.n	8000e14 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dc4:	f023 0302 	bic.w	r3, r3, #2
 8000dc8:	f043 0202 	orr.w	r2, r3, #2
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dde:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000df0:	4b93      	ldr	r3, [pc, #588]	; (8001040 <HAL_ADC_Init+0x30c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a93      	ldr	r2, [pc, #588]	; (8001044 <HAL_ADC_Init+0x310>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9a      	lsrs	r2, r3, #18
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e06:	e002      	b.n	8000e0e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f9      	bne.n	8000e08 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e30:	d110      	bne.n	8000e54 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f023 0312 	bic.w	r3, r3, #18
 8000e3a:	f043 0210 	orr.w	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e46:	f043 0201 	orr.w	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f040 80dd 	bne.w	800101c <HAL_ADC_Init+0x2e8>
 8000e62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 80d8 	bne.w	800101c <HAL_ADC_Init+0x2e8>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f040 80d0 	bne.w	800101c <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e84:	f043 0202 	orr.w	r2, r3, #2
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e8c:	4b6e      	ldr	r3, [pc, #440]	; (8001048 <HAL_ADC_Init+0x314>)
 8000e8e:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e98:	d102      	bne.n	8000ea0 <HAL_ADC_Init+0x16c>
 8000e9a:	4b6c      	ldr	r3, [pc, #432]	; (800104c <HAL_ADC_Init+0x318>)
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	e002      	b.n	8000ea6 <HAL_ADC_Init+0x172>
 8000ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ea4:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d108      	bne.n	8000ec6 <HAL_ADC_Init+0x192>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_Init+0x192>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_ADC_Init+0x194>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d11c      	bne.n	8000f06 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ecc:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d010      	beq.n	8000ef4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d107      	bne.n	8000eee <HAL_ADC_Init+0x1ba>
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d101      	bne.n	8000eee <HAL_ADC_Init+0x1ba>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_ADC_Init+0x1bc>
 8000eee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d108      	bne.n	8000f06 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f04:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	035b      	lsls	r3, r3, #13
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f10:	2a01      	cmp	r2, #1
 8000f12:	d002      	beq.n	8000f1a <HAL_ADC_Init+0x1e6>
 8000f14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f18:	e000      	b.n	8000f1c <HAL_ADC_Init+0x1e8>
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d11b      	bne.n	8000f70 <HAL_ADC_Init+0x23c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d109      	bne.n	8000f54 <HAL_ADC_Init+0x220>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f44:	3b01      	subs	r3, #1
 8000f46:	045a      	lsls	r2, r3, #17
 8000f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f52:	e00d      	b.n	8000f70 <HAL_ADC_Init+0x23c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000f5c:	f043 0220 	orr.w	r2, r3, #32
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d007      	beq.n	8000f88 <HAL_ADC_Init+0x254>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4313      	orrs	r3, r2
 8000f82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f84:	4313      	orrs	r3, r2
 8000f86:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d113      	bne.n	8000fbe <HAL_ADC_Init+0x28a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fa4:	f023 0302 	bic.w	r3, r3, #2
 8000fa8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	039a      	lsls	r2, r3, #14
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <HAL_ADC_Init+0x31c>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000fce:	430b      	orrs	r3, r1
 8000fd0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_ADC_Init+0x2c0>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f023 010f 	bic.w	r1, r3, #15
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ff2:	e007      	b.n	8001004 <HAL_ADC_Init+0x2d0>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 020f 	bic.w	r2, r2, #15
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f023 0303 	bic.w	r3, r3, #3
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	645a      	str	r2, [r3, #68]	; 0x44
 800101a:	e00a      	b.n	8001032 <HAL_ADC_Init+0x2fe>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001020:	f023 0312 	bic.w	r3, r3, #18
 8001024:	f043 0210 	orr.w	r2, r3, #16
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800102c:	2301      	movs	r3, #1
 800102e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001032:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001036:	4618      	mov	r0, r3
 8001038:	3770      	adds	r7, #112	; 0x70
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	431bde83 	.word	0x431bde83
 8001048:	50000300 	.word	0x50000300
 800104c:	50000100 	.word	0x50000100
 8001050:	fff0c007 	.word	0xfff0c007

08001054 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 80b9 	bne.w	80011e6 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Start_DMA+0x2e>
 800107e:	2302      	movs	r3, #2
 8001080:	e0b4      	b.n	80011ec <HAL_ADC_Start_DMA+0x198>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800108a:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <HAL_ADC_Start_DMA+0x1a0>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	2b00      	cmp	r3, #0
 8001094:	f040 80a0 	bne.w	80011d8 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 fca1 	bl	80019e0 <ADC_Enable>
 800109e:	4603      	mov	r3, r0
 80010a0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f040 8092 	bne.w	80011ce <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010be:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <HAL_ADC_Start_DMA+0x1a0>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d004      	beq.n	80010d4 <HAL_ADC_Start_DMA+0x80>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010d2:	d115      	bne.n	8001100 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d027      	beq.n	800113e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	645a      	str	r2, [r3, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010fe:	e01e      	b.n	800113e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001114:	d004      	beq.n	8001120 <HAL_ADC_Start_DMA+0xcc>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <HAL_ADC_Start_DMA+0x1a4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d10e      	bne.n	800113e <HAL_ADC_Start_DMA+0xea>
 8001120:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001136:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800114a:	d106      	bne.n	800115a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001150:	f023 0206 	bic.w	r2, r3, #6
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	649a      	str	r2, [r3, #72]	; 0x48
 8001158:	e002      	b.n	8001160 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	649a      	str	r2, [r3, #72]	; 0x48
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <HAL_ADC_Start_DMA+0x1a8>)
 800116e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <HAL_ADC_Start_DMA+0x1ac>)
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <HAL_ADC_Start_DMA+0x1b0>)
 800117e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	221c      	movs	r2, #28
 8001186:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0210 	orr.w	r2, r2, #16
 8001196:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0201 	orr.w	r2, r2, #1
 80011a6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3340      	adds	r3, #64	; 0x40
 80011b2:	4619      	mov	r1, r3
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f000 fe24 	bl	8001e04 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0204 	orr.w	r2, r2, #4
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e00d      	b.n	80011ea <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80011d6:	e008      	b.n	80011ea <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80011e4:	e001      	b.n	80011ea <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011e6:	2302      	movs	r3, #2
 80011e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	50000300 	.word	0x50000300
 80011f8:	50000100 	.word	0x50000100
 80011fc:	08001915 	.word	0x08001915
 8001200:	0800198f 	.word	0x0800198f
 8001204:	080019ab 	.word	0x080019ab

08001208 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001208:	b480      	push	{r7}
 800120a:	b09d      	sub	sp, #116	; 0x74
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HAL_ADC_ConfigChannel+0x22>
 8001226:	2302      	movs	r3, #2
 8001228:	e2a5      	b.n	8001776 <HAL_ADC_ConfigChannel+0x56e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8289 	bne.w	8001754 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d81c      	bhi.n	8001284 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	461a      	mov	r2, r3
 800125e:	231f      	movs	r3, #31
 8001260:	4093      	lsls	r3, r2
 8001262:	43db      	mvns	r3, r3
 8001264:	4019      	ands	r1, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa00 f203 	lsl.w	r2, r0, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	631a      	str	r2, [r3, #48]	; 0x30
 8001282:	e063      	b.n	800134c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b09      	cmp	r3, #9
 800128a:	d81e      	bhi.n	80012ca <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	3b1e      	subs	r3, #30
 80012a0:	221f      	movs	r2, #31
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	4019      	ands	r1, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	3b1e      	subs	r3, #30
 80012bc:	fa00 f203 	lsl.w	r2, r0, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
 80012c8:	e040      	b.n	800134c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	d81e      	bhi.n	8001310 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	3b3c      	subs	r3, #60	; 0x3c
 80012e6:	221f      	movs	r2, #31
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4019      	ands	r1, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	3b3c      	subs	r3, #60	; 0x3c
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
 800130e:	e01d      	b.n	800134c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	3b5a      	subs	r3, #90	; 0x5a
 8001324:	221f      	movs	r2, #31
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	4019      	ands	r1, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	3b5a      	subs	r3, #90	; 0x5a
 8001340:	fa00 f203 	lsl.w	r2, r0, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 80e5 	bne.w	8001526 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b09      	cmp	r3, #9
 8001362:	d91c      	bls.n	800139e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6999      	ldr	r1, [r3, #24]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	3b1e      	subs	r3, #30
 8001376:	2207      	movs	r2, #7
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	4019      	ands	r1, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6898      	ldr	r0, [r3, #8]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	3b1e      	subs	r3, #30
 8001390:	fa00 f203 	lsl.w	r2, r0, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	619a      	str	r2, [r3, #24]
 800139c:	e019      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6959      	ldr	r1, [r3, #20]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	2207      	movs	r2, #7
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4019      	ands	r1, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6898      	ldr	r0, [r3, #8]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d84f      	bhi.n	8001494 <HAL_ADC_ConfigChannel+0x28c>
 80013f4:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <HAL_ADC_ConfigChannel+0x1f4>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	0800140d 	.word	0x0800140d
 8001400:	0800142f 	.word	0x0800142f
 8001404:	08001451 	.word	0x08001451
 8001408:	08001473 	.word	0x08001473
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001412:	4b9e      	ldr	r3, [pc, #632]	; (800168c <HAL_ADC_ConfigChannel+0x484>)
 8001414:	4013      	ands	r3, r2
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	0691      	lsls	r1, r2, #26
 800141c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800141e:	430a      	orrs	r2, r1
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800142a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800142c:	e07e      	b.n	800152c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001434:	4b95      	ldr	r3, [pc, #596]	; (800168c <HAL_ADC_ConfigChannel+0x484>)
 8001436:	4013      	ands	r3, r2
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	0691      	lsls	r1, r2, #26
 800143e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001440:	430a      	orrs	r2, r1
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800144c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800144e:	e06d      	b.n	800152c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001456:	4b8d      	ldr	r3, [pc, #564]	; (800168c <HAL_ADC_ConfigChannel+0x484>)
 8001458:	4013      	ands	r3, r2
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	0691      	lsls	r1, r2, #26
 8001460:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001462:	430a      	orrs	r2, r1
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800146e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001470:	e05c      	b.n	800152c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001478:	4b84      	ldr	r3, [pc, #528]	; (800168c <HAL_ADC_ConfigChannel+0x484>)
 800147a:	4013      	ands	r3, r2
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	0691      	lsls	r1, r2, #26
 8001482:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001484:	430a      	orrs	r2, r1
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001490:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001492:	e04b      	b.n	800152c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	069b      	lsls	r3, r3, #26
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d107      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014b6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	069b      	lsls	r3, r3, #26
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d107      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014da:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	069b      	lsls	r3, r3, #26
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d107      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014fe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	069b      	lsls	r3, r3, #26
 8001510:	429a      	cmp	r2, r3
 8001512:	d10a      	bne.n	800152a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001522:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001524:	e001      	b.n	800152a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001526:	bf00      	nop
 8001528:	e000      	b.n	800152c <HAL_ADC_ConfigChannel+0x324>
      break;
 800152a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d108      	bne.n	800154c <HAL_ADC_ConfigChannel+0x344>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_ADC_ConfigChannel+0x344>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_ADC_ConfigChannel+0x346>
 800154c:	2300      	movs	r3, #0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 810b 	bne.w	800176a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d00f      	beq.n	800157c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	400a      	ands	r2, r1
 8001576:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800157a:	e049      	b.n	8001610 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b09      	cmp	r3, #9
 800159c:	d91c      	bls.n	80015d8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6999      	ldr	r1, [r3, #24]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	3b1b      	subs	r3, #27
 80015b0:	2207      	movs	r2, #7
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4019      	ands	r1, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6898      	ldr	r0, [r3, #8]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	3b1b      	subs	r3, #27
 80015ca:	fa00 f203 	lsl.w	r2, r0, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	619a      	str	r2, [r3, #24]
 80015d6:	e01b      	b.n	8001610 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6959      	ldr	r1, [r3, #20]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	2207      	movs	r2, #7
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4019      	ands	r1, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6898      	ldr	r0, [r3, #8]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	fa00 f203 	lsl.w	r2, r0, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_ADC_ConfigChannel+0x488>)
 8001612:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b10      	cmp	r3, #16
 800161a:	d105      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800161c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001624:	2b00      	cmp	r3, #0
 8001626:	d015      	beq.n	8001654 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800162c:	2b11      	cmp	r3, #17
 800162e:	d105      	bne.n	800163c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001640:	2b12      	cmp	r3, #18
 8001642:	f040 8092 	bne.w	800176a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800164e:	2b00      	cmp	r3, #0
 8001650:	f040 808b 	bne.w	800176a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800165c:	d102      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x45c>
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_ADC_ConfigChannel+0x48c>)
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	e002      	b.n	800166a <HAL_ADC_ConfigChannel+0x462>
 8001664:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001668:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10f      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x490>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d108      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x490>
 8001686:	2301      	movs	r3, #1
 8001688:	e007      	b.n	800169a <HAL_ADC_ConfigChannel+0x492>
 800168a:	bf00      	nop
 800168c:	83fff000 	.word	0x83fff000
 8001690:	50000300 	.word	0x50000300
 8001694:	50000100 	.word	0x50000100
 8001698:	2300      	movs	r3, #0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d150      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800169e:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d010      	beq.n	80016c6 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x4b8>
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x4b8>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x4ba>
 80016c0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d13c      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d11d      	bne.n	800170a <HAL_ADC_ConfigChannel+0x502>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d6:	d118      	bne.n	800170a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016e2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_ADC_ConfigChannel+0x57c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a27      	ldr	r2, [pc, #156]	; (8001788 <HAL_ADC_ConfigChannel+0x580>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0c9a      	lsrs	r2, r3, #18
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80016fa:	e002      	b.n	8001702 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3b01      	subs	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f9      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001708:	e02e      	b.n	8001768 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b11      	cmp	r3, #17
 8001710:	d10b      	bne.n	800172a <HAL_ADC_ConfigChannel+0x522>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800171a:	d106      	bne.n	800172a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800171c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001726:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001728:	e01e      	b.n	8001768 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b12      	cmp	r3, #18
 8001730:	d11a      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800173a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800173c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800173e:	e013      	b.n	8001768 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	f043 0220 	orr.w	r2, r3, #32
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001752:	e00a      	b.n	800176a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001758:	f043 0220 	orr.w	r2, r3, #32
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001766:	e000      	b.n	800176a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001768:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001772:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001776:	4618      	mov	r0, r3
 8001778:	3774      	adds	r7, #116	; 0x74
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	431bde83 	.word	0x431bde83

0800178c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800178c:	b480      	push	{r7}
 800178e:	b09b      	sub	sp, #108	; 0x6c
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017a4:	d102      	bne.n	80017ac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80017a6:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e002      	b.n	80017b2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80017ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017b0:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0a1      	b.n	8001900 <HAL_ADCEx_MultiModeConfigChannel+0x174>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e09a      	b.n	8001900 <HAL_ADCEx_MultiModeConfigChannel+0x174>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d17e      	bne.n	80018de <HAL_ADCEx_MultiModeConfigChannel+0x152>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d178      	bne.n	80018de <HAL_ADCEx_MultiModeConfigChannel+0x152>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ec:	4b48      	ldr	r3, [pc, #288]	; (8001910 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80017ee:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d03f      	beq.n	8001878 <HAL_ADCEx_MultiModeConfigChannel+0xec>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80017f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	035b      	lsls	r3, r3, #13
 800180a:	430b      	orrs	r3, r1
 800180c:	431a      	orrs	r2, r3
 800180e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001810:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d108      	bne.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001832:	2300      	movs	r3, #0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d15c      	bne.n	80018f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d107      	bne.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001854:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d14b      	bne.n	80018f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800185a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001862:	f023 030f 	bic.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	6811      	ldr	r1, [r2, #0]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	6892      	ldr	r2, [r2, #8]
 800186e:	430a      	orrs	r2, r1
 8001870:	431a      	orrs	r2, r3
 8001872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001874:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001876:	e03c      	b.n	80018f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001882:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d108      	bne.n	80018a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d123      	bne.n	80018f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d107      	bne.n	80018c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80018c6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d112      	bne.n	80018f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80018cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018d4:	f023 030f 	bic.w	r3, r3, #15
 80018d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018da:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018dc:	e009      	b.n	80018f2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f043 0220 	orr.w	r2, r3, #32
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80018f0:	e000      	b.n	80018f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018f2:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 80018fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001900:	4618      	mov	r0, r3
 8001902:	376c      	adds	r7, #108	; 0x6c
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	50000100 	.word	0x50000100
 8001910:	50000300 	.word	0x50000300

08001914 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800192a:	2b00      	cmp	r3, #0
 800192c:	d126      	bne.n	800197c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001944:	2b00      	cmp	r3, #0
 8001946:	d115      	bne.n	8001974 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	69db      	ldr	r3, [r3, #28]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800194c:	2b00      	cmp	r3, #0
 800194e:	d111      	bne.n	8001974 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f004 fa02 	bl	8005d7e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800197a:	e004      	b.n	8001986 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff f9b5 	bl	8000d0c <HAL_ADC_ConvHalfCpltCallback>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7ff f9a5 	bl	8000d20 <HAL_ADC_ErrorCallback>
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <ADC_Enable+0x2c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <ADC_Enable+0x2c>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <ADC_Enable+0x2e>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d13c      	bne.n	8001a8c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <ADC_Enable+0xb8>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00d      	beq.n	8001a3c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	f043 0210 	orr.w	r2, r3, #16
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e028      	b.n	8001a8e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a4c:	f7ff f930 	bl	8000cb0 <HAL_GetTick>
 8001a50:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a52:	e014      	b.n	8001a7e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a54:	f7ff f92c 	bl	8000cb0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d90d      	bls.n	8001a7e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e007      	b.n	8001a8e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d1e3      	bne.n	8001a54 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	8000003f 	.word	0x8000003f

08001a9c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <ADC_Disable+0x2c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <ADC_Disable+0x2c>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <ADC_Disable+0x2e>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d040      	beq.n	8001b50 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030d 	and.w	r3, r3, #13
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d10f      	bne.n	8001afc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0202 	orr.w	r2, r2, #2
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2203      	movs	r2, #3
 8001af2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001af4:	f7ff f8dc 	bl	8000cb0 <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001afa:	e022      	b.n	8001b42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f043 0210 	orr.w	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	f043 0201 	orr.w	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e01c      	b.n	8001b52 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b18:	f7ff f8ca 	bl	8000cb0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d90d      	bls.n	8001b42 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e007      	b.n	8001b52 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d0e3      	beq.n	8001b18 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <NVIC_EnableIRQ+0x30>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da0b      	bge.n	8001c20 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	; (8001c40 <NVIC_SetPriority+0x4c>)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	3b04      	subs	r3, #4
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1e:	e009      	b.n	8001c34 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <NVIC_SetPriority+0x50>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc0:	d301      	bcc.n	8001cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00f      	b.n	8001ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <SysTick_Config+0x40>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd4:	f7ff ff8e 	bl	8001bf4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <SysTick_Config+0x40>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <SysTick_Config+0x40>)
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff2d 	bl	8001b5c <NVIC_SetPriorityGrouping>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1c:	f7ff ff42 	bl	8001ba4 <NVIC_GetPriorityGrouping>
 8001d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f7ff ff8e 	bl	8001c48 <NVIC_EncodePriority>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff5d 	bl	8001bf4 <NVIC_SetPriority>
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff35 	bl	8001bc0 <NVIC_EnableIRQ>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffa2 	bl	8001cb0 <SysTick_Config>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e037      	b.n	8001dfc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001da2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001da6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f940 	bl	8002064 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}  
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_DMA_Start_IT+0x20>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e04a      	b.n	8001eba <HAL_DMA_Start_IT+0xb6>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d13a      	bne.n	8001eac <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f8d4 	bl	8002008 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 020e 	orr.w	r2, r2, #14
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e00f      	b.n	8001e9a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 020a 	orr.w	r2, r2, #10
 8001e88:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0204 	bic.w	r2, r2, #4
 8001e98:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e005      	b.n	8001eb8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2204      	movs	r2, #4
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d024      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x72>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01f      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0204 	bic.w	r2, r2, #4
 8001f10:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f20:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d06a      	beq.n	8002000 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f32:	e065      	b.n	8002000 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2202      	movs	r2, #2
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02c      	beq.n	8001f9e <HAL_DMA_IRQHandler+0xdc>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d027      	beq.n	8001f9e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10b      	bne.n	8001f74 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 020a 	bic.w	r2, r2, #10
 8001f6a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f82:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d035      	beq.n	8002000 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001f9c:	e030      	b.n	8002000 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d028      	beq.n	8002000 <HAL_DMA_IRQHandler+0x13e>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d023      	beq.n	8002000 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 020e 	bic.w	r2, r2, #14
 8001fc6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
    }
  }
}  
 8001ffe:	e7ff      	b.n	8002000 <HAL_DMA_IRQHandler+0x13e>
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b10      	cmp	r3, #16
 8002034:	d108      	bne.n	8002048 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002046:	e007      	b.n	8002058 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <DMA_CalcBaseAndBitshift+0x34>)
 8002074:	4413      	add	r3, r2
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <DMA_CalcBaseAndBitshift+0x38>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	009a      	lsls	r2, r3, #2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <DMA_CalcBaseAndBitshift+0x3c>)
 8002088:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	bffdfff8 	.word	0xbffdfff8
 800209c:	cccccccd 	.word	0xcccccccd
 80020a0:	40020000 	.word	0x40020000

080020a4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80020be:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_FLASH_Program+0xd8>)
 80020c0:	7e1b      	ldrb	r3, [r3, #24]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_FLASH_Program+0x26>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e054      	b.n	8002174 <HAL_FLASH_Program+0xd0>
 80020ca:	4b2c      	ldr	r3, [pc, #176]	; (800217c <HAL_FLASH_Program+0xd8>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020d4:	f000 f8a8 	bl	8002228 <FLASH_WaitForLastOperation>
 80020d8:	4603      	mov	r3, r0
 80020da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d144      	bne.n	800216c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d102      	bne.n	80020ee <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80020e8:	2301      	movs	r3, #1
 80020ea:	757b      	strb	r3, [r7, #21]
 80020ec:	e007      	b.n	80020fe <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d102      	bne.n	80020fa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80020f4:	2302      	movs	r3, #2
 80020f6:	757b      	strb	r3, [r7, #21]
 80020f8:	e001      	b.n	80020fe <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80020fa:	2304      	movs	r3, #4
 80020fc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80020fe:	2300      	movs	r3, #0
 8002100:	75bb      	strb	r3, [r7, #22]
 8002102:	e02d      	b.n	8002160 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002104:	7dbb      	ldrb	r3, [r7, #22]
 8002106:	005a      	lsls	r2, r3, #1
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	eb02 0c03 	add.w	ip, r2, r3
 800210e:	7dbb      	ldrb	r3, [r7, #22]
 8002110:	0119      	lsls	r1, r3, #4
 8002112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002116:	f1c1 0620 	rsb	r6, r1, #32
 800211a:	f1a1 0020 	sub.w	r0, r1, #32
 800211e:	fa22 f401 	lsr.w	r4, r2, r1
 8002122:	fa03 f606 	lsl.w	r6, r3, r6
 8002126:	4334      	orrs	r4, r6
 8002128:	fa23 f000 	lsr.w	r0, r3, r0
 800212c:	4304      	orrs	r4, r0
 800212e:	fa23 f501 	lsr.w	r5, r3, r1
 8002132:	b2a3      	uxth	r3, r4
 8002134:	4619      	mov	r1, r3
 8002136:	4660      	mov	r0, ip
 8002138:	f000 f85a 	bl	80021f0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800213c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002140:	f000 f872 	bl	8002228 <FLASH_WaitForLastOperation>
 8002144:	4603      	mov	r3, r0
 8002146:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_FLASH_Program+0xdc>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <HAL_FLASH_Program+0xdc>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800215a:	7dbb      	ldrb	r3, [r7, #22]
 800215c:	3301      	adds	r3, #1
 800215e:	75bb      	strb	r3, [r7, #22]
 8002160:	7dba      	ldrb	r2, [r7, #22]
 8002162:	7d7b      	ldrb	r3, [r7, #21]
 8002164:	429a      	cmp	r2, r3
 8002166:	d3cd      	bcc.n	8002104 <HAL_FLASH_Program+0x60>
 8002168:	e000      	b.n	800216c <HAL_FLASH_Program+0xc8>
      {
        break;
 800216a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_FLASH_Program+0xd8>)
 800216e:	2200      	movs	r2, #0
 8002170:	761a      	strb	r2, [r3, #24]

  return status;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
}
 8002174:	4618      	mov	r0, r3
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800217c:	200000a0 	.word	0x200000a0
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_FLASH_Unlock+0x40>)
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00d      	beq.n	80021b6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_FLASH_Unlock+0x40>)
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_FLASH_Unlock+0x44>)
 800219e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_FLASH_Unlock+0x40>)
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <HAL_FLASH_Unlock+0x48>)
 80021a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <HAL_FLASH_Unlock+0x40>)
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80021b6:	79fb      	ldrb	r3, [r7, #7]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40022000 	.word	0x40022000
 80021c8:	45670123 	.word	0x45670123
 80021cc:	cdef89ab 	.word	0xcdef89ab

080021d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_FLASH_Lock+0x1c>)
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_FLASH_Lock+0x1c>)
 80021da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40022000 	.word	0x40022000

080021f0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <FLASH_Program_HalfWord+0x30>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <FLASH_Program_HalfWord+0x34>)
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <FLASH_Program_HalfWord+0x34>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	801a      	strh	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	200000a0 	.word	0x200000a0
 8002224:	40022000 	.word	0x40022000

08002228 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7fe fd3e 	bl	8000cb0 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002236:	e010      	b.n	800225a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800223e:	d00c      	beq.n	800225a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <FLASH_WaitForLastOperation+0x2e>
 8002246:	f7fe fd33 	bl	8000cb0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	d201      	bcs.n	800225a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e01f      	b.n	800229a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <FLASH_WaitForLastOperation+0x7c>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d0e8      	beq.n	8002238 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <FLASH_WaitForLastOperation+0x7c>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d102      	bne.n	8002278 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <FLASH_WaitForLastOperation+0x7c>)
 8002274:	2220      	movs	r2, #32
 8002276:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <FLASH_WaitForLastOperation+0x7c>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b10      	cmp	r3, #16
 8002282:	d005      	beq.n	8002290 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <FLASH_WaitForLastOperation+0x7c>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800228c:	2b04      	cmp	r3, #4
 800228e:	d103      	bne.n	8002298 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002290:	f000 f80a 	bl	80022a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000

080022a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <FLASH_SetErrorCode+0x5c>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b10      	cmp	r3, #16
 80022bc:	d109      	bne.n	80022d2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <FLASH_SetErrorCode+0x60>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <FLASH_SetErrorCode+0x60>)
 80022c8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <FLASH_SetErrorCode+0x5c>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d109      	bne.n	80022f2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <FLASH_SetErrorCode+0x60>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <FLASH_SetErrorCode+0x60>)
 80022e8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <FLASH_SetErrorCode+0x5c>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60d3      	str	r3, [r2, #12]
}  
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40022000 	.word	0x40022000
 8002308:	200000a0 	.word	0x200000a0

0800230c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_FLASHEx_Erase+0xcc>)
 8002320:	7e1b      	ldrb	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_FLASHEx_Erase+0x1e>
 8002326:	2302      	movs	r3, #2
 8002328:	e052      	b.n	80023d0 <HAL_FLASHEx_Erase+0xc4>
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_FLASHEx_Erase+0xcc>)
 800232c:	2201      	movs	r2, #1
 800232e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d115      	bne.n	8002364 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002338:	f24c 3050 	movw	r0, #50000	; 0xc350
 800233c:	f7ff ff74 	bl	8002228 <FLASH_WaitForLastOperation>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d140      	bne.n	80023c8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002346:	f000 f84b 	bl	80023e0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800234a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800234e:	f7ff ff6b 	bl	8002228 <FLASH_WaitForLastOperation>
 8002352:	4603      	mov	r3, r0
 8002354:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002356:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_FLASHEx_Erase+0xd0>)
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	4a20      	ldr	r2, [pc, #128]	; (80023dc <HAL_FLASHEx_Erase+0xd0>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6113      	str	r3, [r2, #16]
 8002362:	e031      	b.n	80023c8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002368:	f7ff ff5e 	bl	8002228 <FLASH_WaitForLastOperation>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12a      	bne.n	80023c8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002378:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	e019      	b.n	80023b6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002382:	68b8      	ldr	r0, [r7, #8]
 8002384:	f000 f846 	bl	8002414 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002388:	f24c 3050 	movw	r0, #50000	; 0xc350
 800238c:	f7ff ff4c 	bl	8002228 <FLASH_WaitForLastOperation>
 8002390:	4603      	mov	r3, r0
 8002392:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_FLASHEx_Erase+0xd0>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_FLASHEx_Erase+0xd0>)
 800239a:	f023 0302 	bic.w	r3, r3, #2
 800239e:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	601a      	str	r2, [r3, #0]
            break;
 80023ac:	e00c      	b.n	80023c8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	02da      	lsls	r2, r3, #11
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3dc      	bcc.n	8002382 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_FLASHEx_Erase+0xcc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	761a      	strb	r2, [r3, #24]

  return status;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200000a0 	.word	0x200000a0
 80023dc:	40022000 	.word	0x40022000

080023e0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <FLASH_MassErase+0x2c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <FLASH_MassErase+0x30>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	4a08      	ldr	r2, [pc, #32]	; (8002410 <FLASH_MassErase+0x30>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <FLASH_MassErase+0x30>)
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <FLASH_MassErase+0x30>)
 80023fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002400:	6113      	str	r3, [r2, #16]
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	200000a0 	.word	0x200000a0
 8002410:	40022000 	.word	0x40022000

08002414 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <FLASH_PageErase+0x38>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <FLASH_PageErase+0x3c>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <FLASH_PageErase+0x3c>)
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800242e:	4a08      	ldr	r2, [pc, #32]	; (8002450 <FLASH_PageErase+0x3c>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <FLASH_PageErase+0x3c>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	4a05      	ldr	r2, [pc, #20]	; (8002450 <FLASH_PageErase+0x3c>)
 800243a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800243e:	6113      	str	r3, [r2, #16]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	200000a0 	.word	0x200000a0
 8002450:	40022000 	.word	0x40022000

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800246a:	e14e      	b.n	800270a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8140 	beq.w	8002704 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x40>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b12      	cmp	r3, #18
 8002492:	d123      	bne.n	80024dc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	08da      	lsrs	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3208      	adds	r2, #8
 800249c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	6939      	ldr	r1, [r7, #16]
 80024d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0203 	and.w	r2, r3, #3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d00b      	beq.n	8002530 <HAL_GPIO_Init+0xdc>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d007      	beq.n	8002530 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002524:	2b11      	cmp	r3, #17
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b12      	cmp	r3, #18
 800252e:	d130      	bne.n	8002592 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002566:	2201      	movs	r2, #1
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	f003 0201 	and.w	r2, r3, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 809a 	beq.w	8002704 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d0:	4b55      	ldr	r3, [pc, #340]	; (8002728 <HAL_GPIO_Init+0x2d4>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a54      	ldr	r2, [pc, #336]	; (8002728 <HAL_GPIO_Init+0x2d4>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6193      	str	r3, [r2, #24]
 80025dc:	4b52      	ldr	r3, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x2d4>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80025e8:	4a50      	ldr	r2, [pc, #320]	; (800272c <HAL_GPIO_Init+0x2d8>)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002612:	d013      	beq.n	800263c <HAL_GPIO_Init+0x1e8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a46      	ldr	r2, [pc, #280]	; (8002730 <HAL_GPIO_Init+0x2dc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00d      	beq.n	8002638 <HAL_GPIO_Init+0x1e4>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a45      	ldr	r2, [pc, #276]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <HAL_GPIO_Init+0x1e0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a44      	ldr	r2, [pc, #272]	; (8002738 <HAL_GPIO_Init+0x2e4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_GPIO_Init+0x1dc>
 800262c:	2303      	movs	r3, #3
 800262e:	e006      	b.n	800263e <HAL_GPIO_Init+0x1ea>
 8002630:	2305      	movs	r3, #5
 8002632:	e004      	b.n	800263e <HAL_GPIO_Init+0x1ea>
 8002634:	2302      	movs	r3, #2
 8002636:	e002      	b.n	800263e <HAL_GPIO_Init+0x1ea>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_GPIO_Init+0x1ea>
 800263c:	2300      	movs	r3, #0
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	f002 0203 	and.w	r2, r2, #3
 8002644:	0092      	lsls	r2, r2, #2
 8002646:	4093      	lsls	r3, r2
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800264e:	4937      	ldr	r1, [pc, #220]	; (800272c <HAL_GPIO_Init+0x2d8>)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265c:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_GPIO_Init+0x2e8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002680:	4a2e      	ldr	r2, [pc, #184]	; (800273c <HAL_GPIO_Init+0x2e8>)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_GPIO_Init+0x2e8>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026aa:	4a24      	ldr	r2, [pc, #144]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026d4:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026fe:	4a0f      	ldr	r2, [pc, #60]	; (800273c <HAL_GPIO_Init+0x2e8>)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	f47f aea9 	bne.w	800246c <HAL_GPIO_Init+0x18>
  }
}
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	40010000 	.word	0x40010000
 8002730:	48000400 	.word	0x48000400
 8002734:	48000800 	.word	0x48000800
 8002738:	48000c00 	.word	0x48000c00
 800273c:	40010400 	.word	0x40010400

08002740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	e001      	b.n	8002762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002762:	7bfb      	ldrb	r3, [r7, #15]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800278c:	e002      	b.n	8002794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f000 beda 	b.w	800356e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 816e 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027ca:	4bb5      	ldr	r3, [pc, #724]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d00c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027d6:	4bb2      	ldr	r3, [pc, #712]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d15a      	bne.n	8002898 <HAL_RCC_OscConfig+0xf8>
 80027e2:	4baf      	ldr	r3, [pc, #700]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ee:	d153      	bne.n	8002898 <HAL_RCC_OscConfig+0xf8>
 80027f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002804:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d102      	bne.n	8002822 <HAL_RCC_OscConfig+0x82>
 800281c:	4ba0      	ldr	r3, [pc, #640]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0xae>
 8002822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002826:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800283e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800284a:	4b95      	ldr	r3, [pc, #596]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002852:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002856:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800285a:	fa92 f2a2 	rbit	r2, r2
 800285e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8002862:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002866:	fab2 f282 	clz	r2, r2
 800286a:	b252      	sxtb	r2, r2
 800286c:	f042 0220 	orr.w	r2, r2, #32
 8002870:	b252      	sxtb	r2, r2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f002 021f 	and.w	r2, r2, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f202 	lsl.w	r2, r1, r2
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 810f 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x304>
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f040 8109 	bne.w	8002aa4 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	f000 be6b 	b.w	800356e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x112>
 80028a4:	4b7e      	ldr	r3, [pc, #504]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a7d      	ldr	r2, [pc, #500]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e030      	b.n	8002914 <HAL_RCC_OscConfig+0x174>
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x136>
 80028bc:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a77      	ldr	r2, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a74      	ldr	r2, [pc, #464]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	e01e      	b.n	8002914 <HAL_RCC_OscConfig+0x174>
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x15c>
 80028e2:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b6c      	ldr	r3, [pc, #432]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a6b      	ldr	r2, [pc, #428]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x174>
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a67      	ldr	r2, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 8002902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a64      	ldr	r2, [pc, #400]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 800290e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002912:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002914:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	f023 020f 	bic.w	r2, r3, #15
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	495f      	ldr	r1, [pc, #380]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 8002924:	4313      	orrs	r3, r2
 8002926:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d05a      	beq.n	80029e8 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe f9bd 	bl	8000cb0 <HAL_GetTick>
 8002936:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe f9b8 	bl	8000cb0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	; 0x64
 800294a:	d902      	bls.n	8002952 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	f000 be0e 	b.w	800356e <HAL_RCC_OscConfig+0xdce>
 8002952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002956:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8002966:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d102      	bne.n	8002984 <HAL_RCC_OscConfig+0x1e4>
 800297e:	4b48      	ldr	r3, [pc, #288]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e015      	b.n	80029b0 <HAL_RCC_OscConfig+0x210>
 8002984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002988:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029a0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029ac:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80029b8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80029bc:	fa92 f2a2 	rbit	r2, r2
 80029c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80029c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b252      	sxtb	r2, r2
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	b252      	sxtb	r2, r2
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	f002 021f 	and.w	r2, r2, #31
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0aa      	beq.n	800293c <HAL_RCC_OscConfig+0x19c>
 80029e6:	e05e      	b.n	8002aa6 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe f962 	bl	8000cb0 <HAL_GetTick>
 80029ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f2:	f7fe f95d 	bl	8000cb0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d902      	bls.n	8002a08 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	f000 bdb3 	b.w	800356e <HAL_RCC_OscConfig+0xdce>
 8002a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8002a1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <HAL_RCC_OscConfig+0x29a>
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x2c6>
 8002a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_RCC_OscConfig+0x300>)
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a6a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002a6e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8002a7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b252      	sxtb	r2, r2
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	b252      	sxtb	r2, r2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1aa      	bne.n	80029f2 <HAL_RCC_OscConfig+0x252>
 8002a9c:	e003      	b.n	8002aa6 <HAL_RCC_OscConfig+0x306>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8170 	beq.w	8002d96 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ab6:	4bd0      	ldr	r3, [pc, #832]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ac2:	4bcd      	ldr	r3, [pc, #820]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d16d      	bne.n	8002baa <HAL_RCC_OscConfig+0x40a>
 8002ace:	4bca      	ldr	r3, [pc, #808]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d167      	bne.n	8002baa <HAL_RCC_OscConfig+0x40a>
 8002ada:	2302      	movs	r3, #2
 8002adc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8002aec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_OscConfig+0x36a>
 8002b04:	4bbc      	ldr	r3, [pc, #752]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	e013      	b.n	8002b32 <HAL_RCC_OscConfig+0x392>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b22:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b2e:	4bb2      	ldr	r3, [pc, #712]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2202      	movs	r2, #2
 8002b34:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002b38:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002b3c:	fa92 f2a2 	rbit	r2, r2
 8002b40:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8002b44:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b48:	fab2 f282 	clz	r2, r2
 8002b4c:	b252      	sxtb	r2, r2
 8002b4e:	f042 0220 	orr.w	r2, r2, #32
 8002b52:	b252      	sxtb	r2, r2
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f002 021f 	and.w	r2, r2, #31
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <HAL_RCC_OscConfig+0x3d6>
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d002      	beq.n	8002b76 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f000 bcfc 	b.w	800356e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b76:	4ba0      	ldr	r3, [pc, #640]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6959      	ldr	r1, [r3, #20]
 8002b84:	23f8      	movs	r3, #248	; 0xf8
 8002b86:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8002b96:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	4995      	ldr	r1, [pc, #596]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba8:	e0f5      	b.n	8002d96 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8085 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x520>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8002bc8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2301      	movs	r3, #1
 8002bde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe f866 	bl	8000cb0 <HAL_GetTick>
 8002be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe f861 	bl	8000cb0 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	f000 bcb7 	b.w	800356e <HAL_RCC_OscConfig+0xdce>
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8002c12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_OscConfig+0x490>
 8002c2a:	4b73      	ldr	r3, [pc, #460]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	e013      	b.n	8002c58 <HAL_RCC_OscConfig+0x4b8>
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c42:	2302      	movs	r3, #2
 8002c44:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c48:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c5e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c62:	fa92 f2a2 	rbit	r2, r2
 8002c66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8002c6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c6e:	fab2 f282 	clz	r2, r2
 8002c72:	b252      	sxtb	r2, r2
 8002c74:	f042 0220 	orr.w	r2, r2, #32
 8002c78:	b252      	sxtb	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f002 021f 	and.w	r2, r2, #31
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ae      	beq.n	8002bea <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	4b5a      	ldr	r3, [pc, #360]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6959      	ldr	r1, [r3, #20]
 8002c9a:	23f8      	movs	r3, #248	; 0xf8
 8002c9c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002cac:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	494f      	ldr	r1, [pc, #316]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
 8002cbe:	e06a      	b.n	8002d96 <HAL_RCC_OscConfig+0x5f6>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8002cd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fd ffe1 	bl	8000cb0 <HAL_GetTick>
 8002cee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fd ffdc 	bl	8000cb0 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d902      	bls.n	8002d0a <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	f000 bc32 	b.w	800356e <HAL_RCC_OscConfig+0xdce>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8002d1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_OscConfig+0x59a>
 8002d34:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	e013      	b.n	8002d62 <HAL_RCC_OscConfig+0x5c2>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x658>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2202      	movs	r2, #2
 8002d64:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d68:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002d6c:	fa92 f2a2 	rbit	r2, r2
 8002d70:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8002d74:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d78:	fab2 f282 	clz	r2, r2
 8002d7c:	b252      	sxtb	r2, r2
 8002d7e:	f042 0220 	orr.w	r2, r2, #32
 8002d82:	b252      	sxtb	r2, r2
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f002 021f 	and.w	r2, r2, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ae      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80d8 	beq.w	8002f56 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d067      	beq.n	8002e80 <HAL_RCC_OscConfig+0x6e0>
 8002db0:	2301      	movs	r3, #1
 8002db2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8002dc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_OscConfig+0x65c>)
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd8:	f7fd ff6a 	bl	8000cb0 <HAL_GetTick>
 8002ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de0:	e00e      	b.n	8002e00 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fd ff65 	bl	8000cb0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d906      	bls.n	8002e00 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e3bb      	b.n	800356e <HAL_RCC_OscConfig+0xdce>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	10908120 	.word	0x10908120
 8002e00:	2302      	movs	r3, #2
 8002e02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e12:	2302      	movs	r3, #2
 8002e14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e1c:	fa93 f2a3 	rbit	r2, r3
 8002e20:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	4ba5      	ldr	r3, [pc, #660]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8002e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e42:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e46:	2102      	movs	r1, #2
 8002e48:	6019      	str	r1, [r3, #0]
 8002e4a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f1a3 	rbit	r1, r3
 8002e54:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e58:	6019      	str	r1, [r3, #0]
  return(result);
 8002e5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0b1      	beq.n	8002de2 <HAL_RCC_OscConfig+0x642>
 8002e7e:	e06a      	b.n	8002f56 <HAL_RCC_OscConfig+0x7b6>
 8002e80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e96:	601a      	str	r2, [r3, #0]
  return(result);
 8002e98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b8c      	ldr	r3, [pc, #560]	; (80030d8 <HAL_RCC_OscConfig+0x938>)
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2300      	movs	r3, #0
 8002eae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7fd fefe 	bl	8000cb0 <HAL_GetTick>
 8002eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e009      	b.n	8002ece <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fd fef9 	bl	8000cb0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e34f      	b.n	800356e <HAL_RCC_OscConfig+0xdce>
 8002ece:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002eea:	2202      	movs	r2, #2
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f02:	2202      	movs	r2, #2
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	fa93 f2a3 	rbit	r2, r3
 8002f10:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f16:	4b6f      	ldr	r3, [pc, #444]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8002f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f1e:	2102      	movs	r1, #2
 8002f20:	6019      	str	r1, [r3, #0]
 8002f22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f1a3 	rbit	r1, r3
 8002f2c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f30:	6019      	str	r1, [r3, #0]
  return(result);
 8002f32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1b1      	bne.n	8002eba <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8159 	beq.w	8003218 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d112      	bne.n	8002f9e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f78:	4b56      	ldr	r3, [pc, #344]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4a55      	ldr	r2, [pc, #340]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f82:	61d3      	str	r3, [r2, #28]
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCC_OscConfig+0x93c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11a      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x93c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a4b      	ldr	r2, [pc, #300]	; (80030dc <HAL_RCC_OscConfig+0x93c>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fd fe7b 	bl	8000cb0 <HAL_GetTick>
 8002fba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	e009      	b.n	8002fd4 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc0:	f7fd fe76 	bl	8000cb0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b64      	cmp	r3, #100	; 0x64
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e2cc      	b.n	800356e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x93c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ef      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x858>
 8002fea:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	4a39      	ldr	r2, [pc, #228]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6213      	str	r3, [r2, #32]
 8002ff6:	e02f      	b.n	8003058 <HAL_RCC_OscConfig+0x8b8>
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x87c>
 8003002:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a33      	ldr	r2, [pc, #204]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6213      	str	r3, [r2, #32]
 800300e:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4a30      	ldr	r2, [pc, #192]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6213      	str	r3, [r2, #32]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0x8b8>
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b05      	cmp	r3, #5
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x8a0>
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6213      	str	r3, [r2, #32]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0x8b8>
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	6213      	str	r3, [r2, #32]
 800304c:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 8003052:	f023 0304 	bic.w	r3, r3, #4
 8003056:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003058:	1d3b      	adds	r3, r7, #4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d06b      	beq.n	800313a <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fd fe25 	bl	8000cb0 <HAL_GetTick>
 8003066:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fd fe20 	bl	8000cb0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e274      	b.n	800356e <HAL_RCC_OscConfig+0xdce>
 8003084:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003088:	2202      	movs	r2, #2
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80030a0:	2202      	movs	r2, #2
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030b2:	601a      	str	r2, [r3, #0]
  return(result);
 80030b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d108      	bne.n	80030e0 <HAL_RCC_OscConfig+0x940>
 80030ce:	4b01      	ldr	r3, [pc, #4]	; (80030d4 <HAL_RCC_OscConfig+0x934>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	e013      	b.n	80030fc <HAL_RCC_OscConfig+0x95c>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	10908120 	.word	0x10908120
 80030dc:	40007000 	.word	0x40007000
 80030e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030e4:	2202      	movs	r2, #2
 80030e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f2a3 	rbit	r2, r3
 80030f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	4bbb      	ldr	r3, [pc, #748]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003100:	2102      	movs	r1, #2
 8003102:	6011      	str	r1, [r2, #0]
 8003104:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	fa92 f1a2 	rbit	r1, r2
 800310e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003112:	6011      	str	r1, [r2, #0]
  return(result);
 8003114:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	fab2 f282 	clz	r2, r2
 800311e:	b252      	sxtb	r2, r2
 8003120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003124:	b252      	sxtb	r2, r2
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	f002 021f 	and.w	r2, r2, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d099      	beq.n	800306c <HAL_RCC_OscConfig+0x8cc>
 8003138:	e064      	b.n	8003204 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7fd fdb9 	bl	8000cb0 <HAL_GetTick>
 800313e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003142:	e00b      	b.n	800315c <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7fd fdb4 	bl	8000cb0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e208      	b.n	800356e <HAL_RCC_OscConfig+0xdce>
 800315c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003160:	2202      	movs	r2, #2
 8003162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f2a3 	rbit	r2, r3
 800316e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003178:	2202      	movs	r2, #2
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800318a:	601a      	str	r2, [r3, #0]
  return(result);
 800318c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003190:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d102      	bne.n	80031ac <HAL_RCC_OscConfig+0xa0c>
 80031a6:	4b90      	ldr	r3, [pc, #576]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	e00d      	b.n	80031c8 <HAL_RCC_OscConfig+0xa28>
 80031ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031b0:	2202      	movs	r2, #2
 80031b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	fa93 f2a3 	rbit	r2, r3
 80031be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80031cc:	2102      	movs	r1, #2
 80031ce:	6011      	str	r1, [r2, #0]
 80031d0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	fa92 f1a2 	rbit	r1, r2
 80031da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031de:	6011      	str	r1, [r2, #0]
  return(result);
 80031e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	fab2 f282 	clz	r2, r2
 80031ea:	b252      	sxtb	r2, r2
 80031ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f0:	b252      	sxtb	r2, r2
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	f002 021f 	and.w	r2, r2, #31
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d19f      	bne.n	8003144 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003204:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b76      	ldr	r3, [pc, #472]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	4a75      	ldr	r2, [pc, #468]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003218:	1d3b      	adds	r3, r7, #4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 81a4 	beq.w	800356c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003224:	4b70      	ldr	r3, [pc, #448]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	f000 819b 	beq.w	8003568 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	2b02      	cmp	r3, #2
 800323a:	f040 8113 	bne.w	8003464 <HAL_RCC_OscConfig+0xcc4>
 800323e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003242:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	fa93 f2a3 	rbit	r2, r3
 8003252:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003256:	601a      	str	r2, [r3, #0]
  return(result);
 8003258:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800325c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003266:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	461a      	mov	r2, r3
 800326e:	2300      	movs	r3, #0
 8003270:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fd fd1d 	bl	8000cb0 <HAL_GetTick>
 8003276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327a:	e009      	b.n	8003290 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327c:	f7fd fd18 	bl	8000cb0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e16e      	b.n	800356e <HAL_RCC_OscConfig+0xdce>
 8003290:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	fa93 f2a3 	rbit	r2, r3
 80032a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032a8:	601a      	str	r2, [r3, #0]
  return(result);
 80032aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d102      	bne.n	80032ca <HAL_RCC_OscConfig+0xb2a>
 80032c4:	4b48      	ldr	r3, [pc, #288]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	e01b      	b.n	8003302 <HAL_RCC_OscConfig+0xb62>
 80032ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003306:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800330a:	6011      	str	r1, [r2, #0]
 800330c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	fa92 f1a2 	rbit	r1, r2
 8003316:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800331a:	6011      	str	r1, [r2, #0]
  return(result);
 800331c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b252      	sxtb	r2, r2
 8003328:	f042 0220 	orr.w	r2, r2, #32
 800332c:	b252      	sxtb	r2, r2
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	f002 021f 	and.w	r2, r2, #31
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f202 	lsl.w	r2, r1, r2
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d19d      	bne.n	800327c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003340:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	430b      	orrs	r3, r1
 8003356:	4924      	ldr	r1, [pc, #144]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
 800335c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003374:	601a      	str	r2, [r3, #0]
  return(result);
 8003376:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800337a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003384:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	461a      	mov	r2, r3
 800338c:	2301      	movs	r3, #1
 800338e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fd fc8e 	bl	8000cb0 <HAL_GetTick>
 8003394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003398:	e009      	b.n	80033ae <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339a:	f7fd fc89 	bl	8000cb0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e0df      	b.n	800356e <HAL_RCC_OscConfig+0xdce>
 80033ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033c6:	601a      	str	r2, [r3, #0]
  return(result);
 80033c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d104      	bne.n	80033ec <HAL_RCC_OscConfig+0xc4c>
 80033e2:	4b01      	ldr	r3, [pc, #4]	; (80033e8 <HAL_RCC_OscConfig+0xc48>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xc84>
 80033e8:	40021000 	.word	0x40021000
 80033ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800340a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	4b55      	ldr	r3, [pc, #340]	; (8003578 <HAL_RCC_OscConfig+0xdd8>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003428:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800342c:	6011      	str	r1, [r2, #0]
 800342e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	fa92 f1a2 	rbit	r1, r2
 8003438:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800343c:	6011      	str	r1, [r2, #0]
  return(result);
 800343e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	fab2 f282 	clz	r2, r2
 8003448:	b252      	sxtb	r2, r2
 800344a:	f042 0220 	orr.w	r2, r2, #32
 800344e:	b252      	sxtb	r2, r2
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	f002 021f 	and.w	r2, r2, #31
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f202 	lsl.w	r2, r1, r2
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d09b      	beq.n	800339a <HAL_RCC_OscConfig+0xbfa>
 8003462:	e083      	b.n	800356c <HAL_RCC_OscConfig+0xdcc>
 8003464:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800346c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	fa93 f2a3 	rbit	r2, r3
 8003478:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800347c:	601a      	str	r2, [r3, #0]
  return(result);
 800347e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003482:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800348c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	461a      	mov	r2, r3
 8003494:	2300      	movs	r3, #0
 8003496:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fd fc0a 	bl	8000cb0 <HAL_GetTick>
 800349c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a0:	e009      	b.n	80034b6 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fd fc05 	bl	8000cb0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e05b      	b.n	800356e <HAL_RCC_OscConfig+0xdce>
 80034b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ce:	601a      	str	r2, [r3, #0]
  return(result);
 80034d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d102      	bne.n	80034f0 <HAL_RCC_OscConfig+0xd50>
 80034ea:	4b23      	ldr	r3, [pc, #140]	; (8003578 <HAL_RCC_OscConfig+0xdd8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	e01b      	b.n	8003528 <HAL_RCC_OscConfig+0xd88>
 80034f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	fa93 f2a3 	rbit	r2, r3
 8003504:	f107 0320 	add.w	r3, r7, #32
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f107 031c 	add.w	r3, r7, #28
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f107 0318 	add.w	r3, r7, #24
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	4b14      	ldr	r3, [pc, #80]	; (8003578 <HAL_RCC_OscConfig+0xdd8>)
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f107 0214 	add.w	r2, r7, #20
 800352c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003530:	6011      	str	r1, [r2, #0]
 8003532:	f107 0214 	add.w	r2, r7, #20
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	fa92 f1a2 	rbit	r1, r2
 800353c:	f107 0210 	add.w	r2, r7, #16
 8003540:	6011      	str	r1, [r2, #0]
  return(result);
 8003542:	f107 0210 	add.w	r2, r7, #16
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b252      	sxtb	r2, r2
 800354e:	f042 0220 	orr.w	r2, r2, #32
 8003552:	b252      	sxtb	r2, r2
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f002 021f 	and.w	r2, r2, #31
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f202 	lsl.w	r2, r1, r2
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d19d      	bne.n	80034a2 <HAL_RCC_OscConfig+0xd02>
 8003566:	e001      	b.n	800356c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b09e      	sub	sp, #120	; 0x78
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e164      	b.n	800385e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003594:	4b92      	ldr	r3, [pc, #584]	; (80037e0 <HAL_RCC_ClockConfig+0x264>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d910      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b8f      	ldr	r3, [pc, #572]	; (80037e0 <HAL_RCC_ClockConfig+0x264>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 0207 	bic.w	r2, r3, #7
 80035aa:	498d      	ldr	r1, [pc, #564]	; (80037e0 <HAL_RCC_ClockConfig+0x264>)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b8b      	ldr	r3, [pc, #556]	; (80037e0 <HAL_RCC_ClockConfig+0x264>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e14c      	b.n	800385e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b84      	ldr	r3, [pc, #528]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4981      	ldr	r1, [pc, #516]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80df 	beq.w	80037ae <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d13d      	bne.n	8003674 <HAL_RCC_ClockConfig+0xf8>
 80035f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d102      	bne.n	8003622 <HAL_RCC_ClockConfig+0xa6>
 800361c:	4b71      	ldr	r3, [pc, #452]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	e00f      	b.n	8003642 <HAL_RCC_ClockConfig+0xc6>
 8003622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003626:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	667b      	str	r3, [r7, #100]	; 0x64
 8003630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003634:	663b      	str	r3, [r7, #96]	; 0x60
 8003636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800363e:	4b69      	ldr	r3, [pc, #420]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003646:	65ba      	str	r2, [r7, #88]	; 0x58
 8003648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800364a:	fa92 f2a2 	rbit	r2, r2
 800364e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8003650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003652:	fab2 f282 	clz	r2, r2
 8003656:	b252      	sxtb	r2, r2
 8003658:	f042 0220 	orr.w	r2, r2, #32
 800365c:	b252      	sxtb	r2, r2
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	f002 021f 	and.w	r2, r2, #31
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f202 	lsl.w	r2, r1, r2
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d17d      	bne.n	800376c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0f4      	b.n	800385e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d13d      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x17c>
 800367c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003680:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800368a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d102      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x12a>
 80036a0:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	e00f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x14a>
 80036a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	647b      	str	r3, [r7, #68]	; 0x44
 80036b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c2:	4b48      	ldr	r3, [pc, #288]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80036cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ce:	fa92 f2a2 	rbit	r2, r2
 80036d2:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80036d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d6:	fab2 f282 	clz	r2, r2
 80036da:	b252      	sxtb	r2, r2
 80036dc:	f042 0220 	orr.w	r2, r2, #32
 80036e0:	b252      	sxtb	r2, r2
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f002 021f 	and.w	r2, r2, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f202 	lsl.w	r2, r1, r2
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d13b      	bne.n	800376c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0b2      	b.n	800385e <HAL_RCC_ClockConfig+0x2e2>
 80036f8:	2302      	movs	r3, #2
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d102      	bne.n	8003720 <HAL_RCC_ClockConfig+0x1a4>
 800371a:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	e00d      	b.n	800373c <HAL_RCC_ClockConfig+0x1c0>
 8003720:	2302      	movs	r3, #2
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
 800372c:	2302      	movs	r3, #2
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2202      	movs	r2, #2
 800373e:	61ba      	str	r2, [r7, #24]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	fa92 f2a2 	rbit	r2, r2
 8003746:	617a      	str	r2, [r7, #20]
  return(result);
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	fab2 f282 	clz	r2, r2
 800374e:	b252      	sxtb	r2, r2
 8003750:	f042 0220 	orr.w	r2, r2, #32
 8003754:	b252      	sxtb	r2, r2
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f002 021f 	and.w	r2, r2, #31
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f202 	lsl.w	r2, r1, r2
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e078      	b.n	800385e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 0203 	bic.w	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	491a      	ldr	r1, [pc, #104]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377e:	f7fd fa97 	bl	8000cb0 <HAL_GetTick>
 8003782:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003784:	e00a      	b.n	800379c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003786:	f7fd fa93 	bl	8000cb0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e060      	b.n	800385e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_RCC_ClockConfig+0x268>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 020c 	and.w	r2, r3, #12
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d1eb      	bne.n	8003786 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_RCC_ClockConfig+0x264>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d215      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_RCC_ClockConfig+0x264>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 0207 	bic.w	r2, r3, #7
 80037c4:	4906      	ldr	r1, [pc, #24]	; (80037e0 <HAL_RCC_ClockConfig+0x264>)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <HAL_RCC_ClockConfig+0x264>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d006      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e03f      	b.n	800385e <HAL_RCC_ClockConfig+0x2e2>
 80037de:	bf00      	nop
 80037e0:	40022000 	.word	0x40022000
 80037e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <HAL_RCC_ClockConfig+0x2ec>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4919      	ldr	r1, [pc, #100]	; (8003868 <HAL_RCC_ClockConfig+0x2ec>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_RCC_ClockConfig+0x2ec>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4911      	ldr	r1, [pc, #68]	; (8003868 <HAL_RCC_ClockConfig+0x2ec>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003826:	f000 f825 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 800382a:	4601      	mov	r1, r0
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <HAL_RCC_ClockConfig+0x2ec>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003834:	23f0      	movs	r3, #240	; 0xf0
 8003836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4a08      	ldr	r2, [pc, #32]	; (800386c <HAL_RCC_ClockConfig+0x2f0>)
 800384c:	5cd3      	ldrb	r3, [r2, r3]
 800384e:	fa21 f303 	lsr.w	r3, r1, r3
 8003852:	4a07      	ldr	r2, [pc, #28]	; (8003870 <HAL_RCC_ClockConfig+0x2f4>)
 8003854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003856:	2000      	movs	r0, #0
 8003858:	f7fd f9e6 	bl	8000c28 <HAL_InitTick>
  
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3778      	adds	r7, #120	; 0x78
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	0800ad18 	.word	0x0800ad18
 8003870:	20000008 	.word	0x20000008

08003874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b08b      	sub	sp, #44	; 0x2c
 8003878:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x30>
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x36>
 80038a2:	e03c      	b.n	800391e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038a6:	623b      	str	r3, [r7, #32]
      break;
 80038a8:	e03c      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038b0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80038b4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	607b      	str	r3, [r7, #4]
  return(result);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <HAL_RCC_GetSysClockFreq+0xc8>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f003 020f 	and.w	r2, r3, #15
 80038d6:	230f      	movs	r3, #15
 80038d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80038fc:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	fbb2 f2f3 	udiv	r2, r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	e004      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	623b      	str	r3, [r7, #32]
      break;
 800391c:	e002      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003920:	623b      	str	r3, [r7, #32]
      break;
 8003922:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003924:	6a3b      	ldr	r3, [r7, #32]
}
 8003926:	4618      	mov	r0, r3
 8003928:	372c      	adds	r7, #44	; 0x2c
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	007a1200 	.word	0x007a1200
 800393c:	0800a938 	.word	0x0800a938
 8003940:	0800a948 	.word	0x0800a948
 8003944:	003d0900 	.word	0x003d0900

08003948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <HAL_RCC_GetHCLKFreq+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000008 	.word	0x20000008

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003966:	f7ff ffef 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 800396a:	4601      	mov	r1, r0
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003974:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003978:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	603b      	str	r3, [r7, #0]
  return(result);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
 800398c:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	0800ad28 	.word	0x0800ad28

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039aa:	f7ff ffcd 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 80039ae:	4601      	mov	r1, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80039b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80039bc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	603b      	str	r3, [r7, #0]
  return(result);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	0800ad28 	.word	0x0800ad28

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b092      	sub	sp, #72	; 0x48
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80cf 	beq.w	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0c:	4b86      	ldr	r3, [pc, #536]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10e      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a18:	4b83      	ldr	r3, [pc, #524]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4a82      	ldr	r2, [pc, #520]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a22:	61d3      	str	r3, [r2, #28]
 8003a24:	4b80      	ldr	r3, [pc, #512]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	4b7d      	ldr	r3, [pc, #500]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d118      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a42:	4b7a      	ldr	r3, [pc, #488]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a79      	ldr	r2, [pc, #484]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4e:	f7fd f92f 	bl	8000cb0 <HAL_GetTick>
 8003a52:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	e008      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a56:	f7fd f92b 	bl	8000cb0 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b64      	cmp	r3, #100	; 0x64
 8003a62:	d901      	bls.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0da      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a74:	4b6c      	ldr	r3, [pc, #432]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d07c      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d075      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aa0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b5f      	ldr	r3, [pc, #380]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2301      	movs	r3, #1
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4b56      	ldr	r3, [pc, #344]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	461a      	mov	r2, r3
 8003adc:	2300      	movs	r3, #0
 8003ade:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ae0:	4a51      	ldr	r2, [pc, #324]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d046      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fd f8de 	bl	8000cb0 <HAL_GetTick>
 8003af4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	e00a      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af8:	f7fd f8da 	bl	8000cb0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e087      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	623b      	str	r3, [r7, #32]
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b26:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b28:	fab3 f383 	clz	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f043 0302 	orr.w	r3, r3, #2
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	e007      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003b42:	2302      	movs	r3, #2
 8003b44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2202      	movs	r2, #2
 8003b54:	613a      	str	r2, [r7, #16]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	fa92 f2a2 	rbit	r2, r2
 8003b5c:	60fa      	str	r2, [r7, #12]
  return(result);
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	fab2 f282 	clz	r2, r2
 8003b64:	b252      	sxtb	r2, r2
 8003b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6a:	b252      	sxtb	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f002 021f 	and.w	r2, r2, #31
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0bc      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b7e:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4927      	ldr	r1, [pc, #156]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b98:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	f023 0203 	bic.w	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	491a      	ldr	r1, [pc, #104]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	f023 0210 	bic.w	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	4913      	ldr	r1, [pc, #76]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	490b      	ldr	r1, [pc, #44]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	4904      	ldr	r1, [pc, #16]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3748      	adds	r7, #72	; 0x48
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	10908100 	.word	0x10908100

08003c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07c      	b.n	8003d40 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d106      	bne.n	8003c66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f004 fd3d 	bl	80086e0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c86:	d902      	bls.n	8003c8e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e002      	b.n	8003c94 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c9c:	d007      	beq.n	8003cae <HAL_SPI_Init+0x7a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ca6:	d002      	beq.n	8003cae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cbe:	d903      	bls.n	8003cc8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
 8003cc6:	e002      	b.n	8003cce <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	ea42 0103 	orr.w	r1, r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	f003 0204 	and.w	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	ea42 0103 	orr.w	r1, r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_SPI_Transmit+0x26>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e13e      	b.n	8003fec <HAL_SPI_Transmit+0x2a4>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d76:	f7fc ff9b 	bl	8000cb0 <HAL_GetTick>
 8003d7a:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d002      	beq.n	8003d8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d8c:	e125      	b.n	8003fda <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_SPI_Transmit+0x52>
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d9e:	e11c      	b.n	8003fda <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2203      	movs	r2, #3
 8003da4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	88fa      	ldrh	r2, [r7, #6]
 8003dbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dea:	d107      	bne.n	8003dfc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d007      	beq.n	8003e1a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e22:	d947      	bls.n	8003eb4 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_SPI_Transmit+0xee>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d138      	bne.n	8003ea8 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	3302      	adds	r3, #2
 8003e44:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e54:	e028      	b.n	8003ea8 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d10f      	bne.n	8003e84 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	881a      	ldrh	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3302      	adds	r3, #2
 8003e72:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e82:	e011      	b.n	8003ea8 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_SPI_Transmit+0x15a>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e90:	d00a      	beq.n	8003ea8 <HAL_SPI_Transmit+0x160>
 8003e92:	f7fc ff0d 	bl	8000cb0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d802      	bhi.n	8003ea8 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ea6:	e098      	b.n	8003fda <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1d1      	bne.n	8003e56 <HAL_SPI_Transmit+0x10e>
 8003eb2:	e070      	b.n	8003f96 <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d004      	beq.n	8003ec6 <HAL_SPI_Transmit+0x17e>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d162      	bne.n	8003f8c <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d90f      	bls.n	8003ef0 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	881a      	ldrh	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	3302      	adds	r3, #2
 8003ede:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b02      	subs	r3, #2
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eee:	e04d      	b.n	8003f8c <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	60ba      	str	r2, [r7, #8]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	320c      	adds	r2, #12
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f0e:	e03d      	b.n	8003f8c <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d124      	bne.n	8003f68 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d90f      	bls.n	8003f48 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	881a      	ldrh	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3302      	adds	r3, #2
 8003f36:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b02      	subs	r3, #2
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f46:	e021      	b.n	8003f8c <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	60ba      	str	r2, [r7, #8]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	320c      	adds	r2, #12
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f66:	e011      	b.n	8003f8c <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_SPI_Transmit+0x23e>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f74:	d00a      	beq.n	8003f8c <HAL_SPI_Transmit+0x244>
 8003f76:	f7fc fe9b 	bl	8000cb0 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d802      	bhi.n	8003f8c <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f8a:	e026      	b.n	8003fda <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1bc      	bne.n	8003f10 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f902 	bl	80041a4 <SPI_EndRxTxTransaction>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e000      	b.n	8003fda <HAL_SPI_Transmit+0x292>
  }

error:
 8003fd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004002:	e04c      	b.n	800409e <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800400a:	d048      	beq.n	800409e <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004012:	f7fc fe4d 	bl	8000cb0 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d83d      	bhi.n	800409e <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004030:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403a:	d111      	bne.n	8004060 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004044:	d004      	beq.n	8004050 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404e:	d107      	bne.n	8004060 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004068:	d10f      	bne.n	800408a <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004088:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e00e      	b.n	80040bc <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d101      	bne.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80040ae:	2201      	movs	r2, #1
 80040b0:	e000      	b.n	80040b4 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80040b2:	2200      	movs	r2, #0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d1a4      	bne.n	8004004 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80040d2:	e05a      	b.n	800418a <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040da:	d109      	bne.n	80040f0 <SPI_WaitFifoStateUntilTimeout+0x2c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f6:	d048      	beq.n	800418a <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <SPI_WaitFifoStateUntilTimeout+0x4a>
 80040fe:	f7fc fdd7 	bl	8000cb0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d83d      	bhi.n	800418a <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800411c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004126:	d111      	bne.n	800414c <SPI_WaitFifoStateUntilTimeout+0x88>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004130:	d004      	beq.n	800413c <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413a:	d107      	bne.n	800414c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004154:	d10f      	bne.n	8004176 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004174:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e008      	b.n	800419c <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4013      	ands	r3, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d19c      	bne.n	80040d4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ff81 	bl	80040c4 <SPI_WaitFifoStateUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e027      	b.n	8004228 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff06 	bl	8003ff4 <SPI_WaitFlagStateUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e014      	b.n	8004228 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff ff5a 	bl	80040c4 <SPI_WaitFifoStateUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e000      	b.n	8004228 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e01d      	b.n	800427e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f004 ffe0 	bl	800921c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f000 fc86 	bl	8004b80 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0201 	orr.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6a1a      	ldr	r2, [r3, #32]
 80042da:	f241 1311 	movw	r3, #4369	; 0x1111
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10f      	bne.n	8004304 <HAL_TIM_Base_Stop_IT+0x48>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	f240 4344 	movw	r3, #1092	; 0x444
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d107      	bne.n	8004304 <HAL_TIM_Base_Stop_IT+0x48>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e01d      	b.n	8004360 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f004 ff27 	bl	800918c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f000 fc15 	bl	8004b80 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2201      	movs	r2, #1
 8004378:	6839      	ldr	r1, [r7, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 ff23 	bl	80051c6 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a15      	ldr	r2, [pc, #84]	; (80043dc <HAL_TIM_PWM_Start+0x74>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x40>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <HAL_TIM_PWM_Start+0x78>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <HAL_TIM_PWM_Start+0x7c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_PWM_Start+0x40>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <HAL_TIM_PWM_Start+0x80>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_PWM_Start+0x44>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <HAL_TIM_PWM_Start+0x46>
 80043ac:	2300      	movs	r3, #0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
} 
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40014400 	.word	0x40014400
 80043e8:	40014800 	.word	0x40014800

080043ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{   
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fee1 	bl	80051c6 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <HAL_TIM_PWM_Stop+0xbc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_TIM_PWM_Stop+0x40>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a26      	ldr	r2, [pc, #152]	; (80044ac <HAL_TIM_PWM_Stop+0xc0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_TIM_PWM_Stop+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a24      	ldr	r2, [pc, #144]	; (80044b0 <HAL_TIM_PWM_Stop+0xc4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_TIM_PWM_Stop+0x40>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <HAL_TIM_PWM_Stop+0xc8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d101      	bne.n	8004430 <HAL_TIM_PWM_Stop+0x44>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_TIM_PWM_Stop+0x46>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d017      	beq.n	8004466 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a1a      	ldr	r2, [r3, #32]
 800443c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <HAL_TIM_PWM_Stop+0x7a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	f240 4344 	movw	r3, #1092	; 0x444
 8004450:	4013      	ands	r3, r2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d107      	bne.n	8004466 <HAL_TIM_PWM_Stop+0x7a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a1a      	ldr	r2, [r3, #32]
 800446c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10f      	bne.n	8004496 <HAL_TIM_PWM_Stop+0xaa>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6a1a      	ldr	r2, [r3, #32]
 800447c:	f240 4344 	movw	r3, #1092	; 0x444
 8004480:	4013      	ands	r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <HAL_TIM_PWM_Stop+0xaa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 800449e:	2300      	movs	r3, #0
} 
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	40014800 	.word	0x40014800

080044b8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b0c      	cmp	r3, #12
 80044c6:	d841      	bhi.n	800454c <HAL_TIM_PWM_Start_IT+0x94>
 80044c8:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <HAL_TIM_PWM_Start_IT+0x18>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	08004505 	.word	0x08004505
 80044d4:	0800454d 	.word	0x0800454d
 80044d8:	0800454d 	.word	0x0800454d
 80044dc:	0800454d 	.word	0x0800454d
 80044e0:	08004517 	.word	0x08004517
 80044e4:	0800454d 	.word	0x0800454d
 80044e8:	0800454d 	.word	0x0800454d
 80044ec:	0800454d 	.word	0x0800454d
 80044f0:	08004529 	.word	0x08004529
 80044f4:	0800454d 	.word	0x0800454d
 80044f8:	0800454d 	.word	0x0800454d
 80044fc:	0800454d 	.word	0x0800454d
 8004500:	0800453b 	.word	0x0800453b
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0202 	orr.w	r2, r2, #2
 8004512:	60da      	str	r2, [r3, #12]
    }
    break;
 8004514:	e01b      	b.n	800454e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0204 	orr.w	r2, r2, #4
 8004524:	60da      	str	r2, [r3, #12]
    }
    break;
 8004526:	e012      	b.n	800454e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0208 	orr.w	r2, r2, #8
 8004536:	60da      	str	r2, [r3, #12]
    }
    break;
 8004538:	e009      	b.n	800454e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0210 	orr.w	r2, r2, #16
 8004548:	60da      	str	r2, [r3, #12]
    }
    break;
 800454a:	e000      	b.n	800454e <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 800454c:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fe35 	bl	80051c6 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a15      	ldr	r2, [pc, #84]	; (80045b8 <HAL_TIM_PWM_Start_IT+0x100>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_TIM_PWM_Start_IT+0xcc>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a14      	ldr	r2, [pc, #80]	; (80045bc <HAL_TIM_PWM_Start_IT+0x104>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_TIM_PWM_Start_IT+0xcc>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <HAL_TIM_PWM_Start_IT+0x108>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_TIM_PWM_Start_IT+0xcc>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a11      	ldr	r2, [pc, #68]	; (80045c4 <HAL_TIM_PWM_Start_IT+0x10c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_TIM_PWM_Start_IT+0xd0>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <HAL_TIM_PWM_Start_IT+0xd2>
 8004588:	2300      	movs	r3, #0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_TIM_PWM_Start_IT+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0201 	orr.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
} 
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40014400 	.word	0x40014400
 80045c4:	40014800 	.word	0x40014800

080045c8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d841      	bhi.n	800465c <HAL_TIM_PWM_Stop_IT+0x94>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <HAL_TIM_PWM_Stop_IT+0x18>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004615 	.word	0x08004615
 80045e4:	0800465d 	.word	0x0800465d
 80045e8:	0800465d 	.word	0x0800465d
 80045ec:	0800465d 	.word	0x0800465d
 80045f0:	08004627 	.word	0x08004627
 80045f4:	0800465d 	.word	0x0800465d
 80045f8:	0800465d 	.word	0x0800465d
 80045fc:	0800465d 	.word	0x0800465d
 8004600:	08004639 	.word	0x08004639
 8004604:	0800465d 	.word	0x0800465d
 8004608:	0800465d 	.word	0x0800465d
 800460c:	0800465d 	.word	0x0800465d
 8004610:	0800464b 	.word	0x0800464b
  {
    case TIM_CHANNEL_1:
    {       
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0202 	bic.w	r2, r2, #2
 8004622:	60da      	str	r2, [r3, #12]
    }
    break;
 8004624:	e01b      	b.n	800465e <HAL_TIM_PWM_Stop_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0204 	bic.w	r2, r2, #4
 8004634:	60da      	str	r2, [r3, #12]
    }
    break;
 8004636:	e012      	b.n	800465e <HAL_TIM_PWM_Stop_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0208 	bic.w	r2, r2, #8
 8004646:	60da      	str	r2, [r3, #12]
    }
    break;
 8004648:	e009      	b.n	800465e <HAL_TIM_PWM_Stop_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0210 	bic.w	r2, r2, #16
 8004658:	60da      	str	r2, [r3, #12]
    }
    break;
 800465a:	e000      	b.n	800465e <HAL_TIM_PWM_Stop_IT+0x96>
    
    default:
    break; 
 800465c:	bf00      	nop
  }
  
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fdad 	bl	80051c6 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a25      	ldr	r2, [pc, #148]	; (8004708 <HAL_TIM_PWM_Stop_IT+0x140>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_PWM_Stop_IT+0xcc>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a24      	ldr	r2, [pc, #144]	; (800470c <HAL_TIM_PWM_Stop_IT+0x144>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_PWM_Stop_IT+0xcc>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a22      	ldr	r2, [pc, #136]	; (8004710 <HAL_TIM_PWM_Stop_IT+0x148>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_PWM_Stop_IT+0xcc>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a21      	ldr	r2, [pc, #132]	; (8004714 <HAL_TIM_PWM_Stop_IT+0x14c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d101      	bne.n	8004698 <HAL_TIM_PWM_Stop_IT+0xd0>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_TIM_PWM_Stop_IT+0xd2>
 8004698:	2300      	movs	r3, #0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d017      	beq.n	80046ce <HAL_TIM_PWM_Stop_IT+0x106>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6a1a      	ldr	r2, [r3, #32]
 80046a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <HAL_TIM_PWM_Stop_IT+0x106>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	f240 4344 	movw	r3, #1092	; 0x444
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d107      	bne.n	80046ce <HAL_TIM_PWM_Stop_IT+0x106>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10f      	bne.n	80046fe <HAL_TIM_PWM_Stop_IT+0x136>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6a1a      	ldr	r2, [r3, #32]
 80046e4:	f240 4344 	movw	r3, #1092	; 0x444
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d107      	bne.n	80046fe <HAL_TIM_PWM_Stop_IT+0x136>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
} 
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40014000 	.word	0x40014000
 8004710:	40014400 	.word	0x40014400
 8004714:	40014800 	.word	0x40014800

08004718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d122      	bne.n	8004774 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d11b      	bne.n	8004774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0202 	mvn.w	r2, #2
 8004744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f9f1 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f9e3 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f9f4 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b04      	cmp	r3, #4
 8004780:	d122      	bne.n	80047c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b04      	cmp	r3, #4
 800478e:	d11b      	bne.n	80047c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0204 	mvn.w	r2, #4
 8004798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9c7 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f9b9 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f9ca 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d122      	bne.n	800481c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d11b      	bne.n	800481c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0208 	mvn.w	r2, #8
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2204      	movs	r2, #4
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f99d 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f98f 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f9a0 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b10      	cmp	r3, #16
 8004828:	d122      	bne.n	8004870 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b10      	cmp	r3, #16
 8004836:	d11b      	bne.n	8004870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0210 	mvn.w	r2, #16
 8004840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2208      	movs	r2, #8
 8004846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f973 	bl	8004b42 <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f965 	bl	8004b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f976 	bl	8004b56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10e      	bne.n	800489c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d107      	bne.n	800489c <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0201 	mvn.w	r2, #1
 8004894:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f93f 	bl	8004b1a <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b80      	cmp	r3, #128	; 0x80
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fe90 	bl	80055e8 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d10e      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e2:	2b80      	cmp	r3, #128	; 0x80
 80048e4:	d107      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fe83 	bl	80055fc <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d10e      	bne.n	8004922 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d107      	bne.n	8004922 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800491a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f924 	bl	8004b6a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b20      	cmp	r3, #32
 800492e:	d10e      	bne.n	800494e <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b20      	cmp	r3, #32
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f06f 0220 	mvn.w	r2, #32
 8004946:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fe43 	bl	80055d4 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_TIM_ConfigClockSource+0x1c>
 800496e:	2302      	movs	r3, #2
 8004970:	e0cf      	b.n	8004b12 <HAL_TIM_ConfigClockSource+0x1bc>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004990:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004994:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800499c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d07c      	beq.n	8004aa8 <HAL_TIM_ConfigClockSource+0x152>
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d80f      	bhi.n	80049d2 <HAL_TIM_ConfigClockSource+0x7c>
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	f000 808f 	beq.w	8004ad6 <HAL_TIM_ConfigClockSource+0x180>
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d803      	bhi.n	80049c4 <HAL_TIM_ConfigClockSource+0x6e>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8083 	beq.w	8004ac8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 80049c2:	e09d      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	f000 808d 	beq.w	8004ae4 <HAL_TIM_ConfigClockSource+0x18e>
 80049ca:	2b30      	cmp	r3, #48	; 0x30
 80049cc:	f000 8091 	beq.w	8004af2 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 80049d0:	e096      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80049d2:	2b70      	cmp	r3, #112	; 0x70
 80049d4:	d018      	beq.n	8004a08 <HAL_TIM_ConfigClockSource+0xb2>
 80049d6:	2b70      	cmp	r3, #112	; 0x70
 80049d8:	d804      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x8e>
 80049da:	2b50      	cmp	r3, #80	; 0x50
 80049dc:	d044      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x112>
 80049de:	2b60      	cmp	r3, #96	; 0x60
 80049e0:	d052      	beq.n	8004a88 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 80049e2:	e08d      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x9c>
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ee:	d028      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 80049f0:	e086      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a00:	f023 0307 	bic.w	r3, r3, #7
 8004a04:	6093      	str	r3, [r2, #8]
    break;
 8004a06:	e07b      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6899      	ldr	r1, [r3, #8]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f000 fbb3 	bl	8005182 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]
    break;
 8004a40:	e05e      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6899      	ldr	r1, [r3, #8]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f000 fb96 	bl	8005182 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a64:	609a      	str	r2, [r3, #8]
    break;
 8004a66:	e04b      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6859      	ldr	r1, [r3, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	461a      	mov	r2, r3
 8004a76:	f000 fafd 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2150      	movs	r1, #80	; 0x50
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fb5e 	bl	8005142 <TIM_ITRx_SetConfig>
    break;
 8004a86:	e03b      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f000 fb20 	bl	80050da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2160      	movs	r1, #96	; 0x60
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fb4e 	bl	8005142 <TIM_ITRx_SetConfig>
    break;
 8004aa6:	e02b      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f000 fadd 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2140      	movs	r1, #64	; 0x40
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fb3e 	bl	8005142 <TIM_ITRx_SetConfig>
    break;
 8004ac6:	e01b      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fb37 	bl	8005142 <TIM_ITRx_SetConfig>
    break;
 8004ad4:	e014      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2110      	movs	r1, #16
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fb30 	bl	8005142 <TIM_ITRx_SetConfig>
    break;
 8004ae2:	e00d      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2120      	movs	r1, #32
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fb29 	bl	8005142 <TIM_ITRx_SetConfig>
    break;
 8004af0:	e006      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2130      	movs	r1, #48	; 0x30
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fb22 	bl	8005142 <TIM_ITRx_SetConfig>
    break;
 8004afe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a32      	ldr	r2, [pc, #200]	; (8004c60 <TIM_Base_SetConfig+0xe0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0x2c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0x2c>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a2f      	ldr	r2, [pc, #188]	; (8004c64 <TIM_Base_SetConfig+0xe4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d108      	bne.n	8004bbe <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a27      	ldr	r2, [pc, #156]	; (8004c60 <TIM_Base_SetConfig+0xe0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <TIM_Base_SetConfig+0x6e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bcc:	d00f      	beq.n	8004bee <TIM_Base_SetConfig+0x6e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a24      	ldr	r2, [pc, #144]	; (8004c64 <TIM_Base_SetConfig+0xe4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <TIM_Base_SetConfig+0x6e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a23      	ldr	r2, [pc, #140]	; (8004c68 <TIM_Base_SetConfig+0xe8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <TIM_Base_SetConfig+0x6e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <TIM_Base_SetConfig+0xec>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_Base_SetConfig+0x6e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <TIM_Base_SetConfig+0xf0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d108      	bne.n	8004c00 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a0e      	ldr	r2, [pc, #56]	; (8004c60 <TIM_Base_SetConfig+0xe0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_Base_SetConfig+0xc4>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a0e      	ldr	r2, [pc, #56]	; (8004c68 <TIM_Base_SetConfig+0xe8>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_Base_SetConfig+0xc4>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <TIM_Base_SetConfig+0xec>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_Base_SetConfig+0xc4>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a0c      	ldr	r2, [pc, #48]	; (8004c70 <TIM_Base_SetConfig+0xf0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d103      	bne.n	8004c4c <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	615a      	str	r2, [r3, #20]
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800

08004c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 0302 	bic.w	r3, r3, #2
 8004ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a28      	ldr	r2, [pc, #160]	; (8004d7c <TIM_OC1_SetConfig+0x108>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00b      	beq.n	8004cf8 <TIM_OC1_SetConfig+0x84>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a27      	ldr	r2, [pc, #156]	; (8004d80 <TIM_OC1_SetConfig+0x10c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d007      	beq.n	8004cf8 <TIM_OC1_SetConfig+0x84>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a26      	ldr	r2, [pc, #152]	; (8004d84 <TIM_OC1_SetConfig+0x110>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_OC1_SetConfig+0x84>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <TIM_OC1_SetConfig+0x114>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d10c      	bne.n	8004d12 <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0308 	bic.w	r3, r3, #8
 8004cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f023 0304 	bic.w	r3, r3, #4
 8004d10:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <TIM_OC1_SetConfig+0x108>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00b      	beq.n	8004d32 <TIM_OC1_SetConfig+0xbe>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <TIM_OC1_SetConfig+0x10c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d007      	beq.n	8004d32 <TIM_OC1_SetConfig+0xbe>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <TIM_OC1_SetConfig+0x110>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_OC1_SetConfig+0xbe>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <TIM_OC1_SetConfig+0x114>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d111      	bne.n	8004d56 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
} 
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800

08004d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f023 0210 	bic.w	r2, r3, #16
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd2:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0320 	bic.w	r3, r3, #32
 8004de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a24      	ldr	r2, [pc, #144]	; (8004e88 <TIM_OC2_SetConfig+0xfc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d10d      	bne.n	8004e18 <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e16:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <TIM_OC2_SetConfig+0xfc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_OC2_SetConfig+0xac>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <TIM_OC2_SetConfig+0x100>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d007      	beq.n	8004e38 <TIM_OC2_SetConfig+0xac>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a19      	ldr	r2, [pc, #100]	; (8004e90 <TIM_OC2_SetConfig+0x104>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC2_SetConfig+0xac>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <TIM_OC2_SetConfig+0x108>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d113      	bne.n	8004e60 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e3e:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e46:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40014400 	.word	0x40014400
 8004e94:	40014800 	.word	0x40014800

08004e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <TIM_OC3_SetConfig+0xf8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10d      	bne.n	8004f22 <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f20:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <TIM_OC3_SetConfig+0xf8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <TIM_OC3_SetConfig+0xaa>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <TIM_OC3_SetConfig+0xfc>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <TIM_OC3_SetConfig+0xaa>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <TIM_OC3_SetConfig+0x100>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_OC3_SetConfig+0xaa>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <TIM_OC3_SetConfig+0x104>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d113      	bne.n	8004f6a <TIM_OC3_SetConfig+0xd2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f50:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	621a      	str	r2, [r3, #32]
}
 8004f84:	bf00      	nop
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400
 8004f9c:	40014800 	.word	0x40014800

08004fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe6:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	031b      	lsls	r3, r3, #12
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a16      	ldr	r2, [pc, #88]	; (8005064 <TIM_OC4_SetConfig+0xc4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00b      	beq.n	8005028 <TIM_OC4_SetConfig+0x88>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <TIM_OC4_SetConfig+0xc8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d007      	beq.n	8005028 <TIM_OC4_SetConfig+0x88>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a14      	ldr	r2, [pc, #80]	; (800506c <TIM_OC4_SetConfig+0xcc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC4_SetConfig+0x88>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a13      	ldr	r2, [pc, #76]	; (8005070 <TIM_OC4_SetConfig+0xd0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d109      	bne.n	800503c <TIM_OC4_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502e:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800

08005074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0201 	bic.w	r2, r3, #1
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f023 030a 	bic.w	r3, r3, #10
 80050b8:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050da:	b480      	push	{r7}
 80050dc:	b087      	sub	sp, #28
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0210 	bic.w	r2, r3, #16
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800510c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800511e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	f043 0307 	orr.w	r3, r3, #7
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	609a      	str	r2, [r3, #8]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005182:	b480      	push	{r7}
 8005184:	b087      	sub	sp, #28
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	021a      	lsls	r2, r3, #8
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	609a      	str	r2, [r3, #8]
} 
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b087      	sub	sp, #28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80051d6:	2201      	movs	r2, #1
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	43db      	mvns	r3, r3
 80051e8:	401a      	ands	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1a      	ldr	r2, [r3, #32]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	431a      	orrs	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	621a      	str	r2, [r3, #32]
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005222:	2302      	movs	r3, #2
 8005224:	e105      	b.n	8005432 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b14      	cmp	r3, #20
 800523a:	f200 80f0 	bhi.w	800541e <HAL_TIM_PWM_ConfigChannel+0x212>
 800523e:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005299 	.word	0x08005299
 8005248:	0800541f 	.word	0x0800541f
 800524c:	0800541f 	.word	0x0800541f
 8005250:	0800541f 	.word	0x0800541f
 8005254:	080052d9 	.word	0x080052d9
 8005258:	0800541f 	.word	0x0800541f
 800525c:	0800541f 	.word	0x0800541f
 8005260:	0800541f 	.word	0x0800541f
 8005264:	0800531b 	.word	0x0800531b
 8005268:	0800541f 	.word	0x0800541f
 800526c:	0800541f 	.word	0x0800541f
 8005270:	0800541f 	.word	0x0800541f
 8005274:	0800535b 	.word	0x0800535b
 8005278:	0800541f 	.word	0x0800541f
 800527c:	0800541f 	.word	0x0800541f
 8005280:	0800541f 	.word	0x0800541f
 8005284:	0800539d 	.word	0x0800539d
 8005288:	0800541f 	.word	0x0800541f
 800528c:	0800541f 	.word	0x0800541f
 8005290:	0800541f 	.word	0x0800541f
 8005294:	080053dd 	.word	0x080053dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fce8 	bl	8004c74 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0208 	orr.w	r2, r2, #8
 80052b2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0204 	bic.w	r2, r2, #4
 80052c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6999      	ldr	r1, [r3, #24]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	619a      	str	r2, [r3, #24]
    }
    break;
 80052d6:	e0a3      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fd54 	bl	8004d8c <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6999      	ldr	r1, [r3, #24]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	021a      	lsls	r2, r3, #8
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	619a      	str	r2, [r3, #24]
    }
    break;
 8005318:	e082      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff fdb9 	bl	8004e98 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0208 	orr.w	r2, r2, #8
 8005334:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0204 	bic.w	r2, r2, #4
 8005344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69d9      	ldr	r1, [r3, #28]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	61da      	str	r2, [r3, #28]
    }
    break;
 8005358:	e062      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fe1d 	bl	8004fa0 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005374:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69d9      	ldr	r1, [r3, #28]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	021a      	lsls	r2, r3, #8
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	61da      	str	r2, [r3, #28]
    }
    break;
 800539a:	e041      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f934 	bl	8005610 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0208 	orr.w	r2, r2, #8
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80053da:	e021      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 f978 	bl	80056d8 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	021a      	lsls	r2, r3, #8
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800541c:	e000      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 800541e:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop

0800543c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005450:	2302      	movs	r3, #2
 8005452:	e038      	b.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d108      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800547c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
} 
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00

080054d8 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e067      	b.n	80055c4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d115      	bne.n	80055b2 <HAL_TIMEx_ConfigBreakDeadTime+0xda>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	051b      	lsls	r3, r3, #20
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	40012c00 	.word	0x40012c00

080055d4 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005660:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a15      	ldr	r2, [pc, #84]	; (80056c8 <TIM_OC5_SetConfig+0xb8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00b      	beq.n	800568e <TIM_OC5_SetConfig+0x7e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a14      	ldr	r2, [pc, #80]	; (80056cc <TIM_OC5_SetConfig+0xbc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d007      	beq.n	800568e <TIM_OC5_SetConfig+0x7e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a13      	ldr	r2, [pc, #76]	; (80056d0 <TIM_OC5_SetConfig+0xc0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_OC5_SetConfig+0x7e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a12      	ldr	r2, [pc, #72]	; (80056d4 <TIM_OC5_SetConfig+0xc4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d109      	bne.n	80056a2 <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005694:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	621a      	str	r2, [r3, #32]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40014400 	.word	0x40014400
 80056d4:	40014800 	.word	0x40014800

080056d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005716:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800572a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	051b      	lsls	r3, r3, #20
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a16      	ldr	r2, [pc, #88]	; (8005794 <TIM_OC6_SetConfig+0xbc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00b      	beq.n	8005758 <TIM_OC6_SetConfig+0x80>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a15      	ldr	r2, [pc, #84]	; (8005798 <TIM_OC6_SetConfig+0xc0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d007      	beq.n	8005758 <TIM_OC6_SetConfig+0x80>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a14      	ldr	r2, [pc, #80]	; (800579c <TIM_OC6_SetConfig+0xc4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_OC6_SetConfig+0x80>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <TIM_OC6_SetConfig+0xc8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d109      	bne.n	800576c <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800575e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	621a      	str	r2, [r3, #32]
} 
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40014000 	.word	0x40014000
 800579c:	40014400 	.word	0x40014400
 80057a0:	40014800 	.word	0x40014800

080057a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e043      	b.n	800583e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f003 fdf4 	bl	80093b8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2224      	movs	r2, #36	; 0x24
 80057d4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f82d 	bl	8005848 <UART_SetConfig>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e022      	b.n	800583e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f987 	bl	8005b14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005814:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005824:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fa0e 	bl	8005c58 <UART_CheckIdleState>
 800583c:	4603      	mov	r3, r0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005854:	2310      	movs	r3, #16
 8005856:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8005858:	2300      	movs	r3, #0
 800585a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800585c:	2300      	movs	r3, #0
 800585e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b9f      	ldr	r3, [pc, #636]	; (8005b00 <UART_SetConfig+0x2b8>)
 8005884:	4013      	ands	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	68f9      	ldr	r1, [r7, #12]
 800588c:	430b      	orrs	r3, r1
 800588e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a8e      	ldr	r2, [pc, #568]	; (8005b04 <UART_SetConfig+0x2bc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d121      	bne.n	8005914 <UART_SetConfig+0xcc>
 80058d0:	4b8d      	ldr	r3, [pc, #564]	; (8005b08 <UART_SetConfig+0x2c0>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	f003 0303 	and.w	r3, r3, #3
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d817      	bhi.n	800590c <UART_SetConfig+0xc4>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <UART_SetConfig+0x9c>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	080058f5 	.word	0x080058f5
 80058e8:	08005901 	.word	0x08005901
 80058ec:	08005907 	.word	0x08005907
 80058f0:	080058fb 	.word	0x080058fb
 80058f4:	2300      	movs	r3, #0
 80058f6:	75fb      	strb	r3, [r7, #23]
 80058f8:	e01e      	b.n	8005938 <UART_SetConfig+0xf0>
 80058fa:	2302      	movs	r3, #2
 80058fc:	75fb      	strb	r3, [r7, #23]
 80058fe:	e01b      	b.n	8005938 <UART_SetConfig+0xf0>
 8005900:	2304      	movs	r3, #4
 8005902:	75fb      	strb	r3, [r7, #23]
 8005904:	e018      	b.n	8005938 <UART_SetConfig+0xf0>
 8005906:	2308      	movs	r3, #8
 8005908:	75fb      	strb	r3, [r7, #23]
 800590a:	e015      	b.n	8005938 <UART_SetConfig+0xf0>
 800590c:	2310      	movs	r3, #16
 800590e:	75fb      	strb	r3, [r7, #23]
 8005910:	bf00      	nop
 8005912:	e011      	b.n	8005938 <UART_SetConfig+0xf0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a7c      	ldr	r2, [pc, #496]	; (8005b0c <UART_SetConfig+0x2c4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d102      	bne.n	8005924 <UART_SetConfig+0xdc>
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]
 8005922:	e009      	b.n	8005938 <UART_SetConfig+0xf0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a79      	ldr	r2, [pc, #484]	; (8005b10 <UART_SetConfig+0x2c8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d102      	bne.n	8005934 <UART_SetConfig+0xec>
 800592e:	2300      	movs	r3, #0
 8005930:	75fb      	strb	r3, [r7, #23]
 8005932:	e001      	b.n	8005938 <UART_SetConfig+0xf0>
 8005934:	2310      	movs	r3, #16
 8005936:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005940:	d16f      	bne.n	8005a22 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d857      	bhi.n	80059f8 <UART_SetConfig+0x1b0>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0x108>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005975 	.word	0x08005975
 8005954:	08005991 	.word	0x08005991
 8005958:	080059ad 	.word	0x080059ad
 800595c:	080059f9 	.word	0x080059f9
 8005960:	080059c7 	.word	0x080059c7
 8005964:	080059f9 	.word	0x080059f9
 8005968:	080059f9 	.word	0x080059f9
 800596c:	080059f9 	.word	0x080059f9
 8005970:	080059e3 	.word	0x080059e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005974:	f7fd fff4 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8005978:	4603      	mov	r3, r0
 800597a:	005a      	lsls	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	441a      	add	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	82bb      	strh	r3, [r7, #20]
        break;
 800598e:	e036      	b.n	80059fe <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005990:	f7fe f808 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8005994:	4603      	mov	r3, r0
 8005996:	005a      	lsls	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	441a      	add	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	82bb      	strh	r3, [r7, #20]
        break;
 80059aa:	e028      	b.n	80059fe <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80059b6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6852      	ldr	r2, [r2, #4]
 80059be:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c2:	82bb      	strh	r3, [r7, #20]
        break;
 80059c4:	e01b      	b.n	80059fe <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80059c6:	f7fd ff55 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80059ca:	4603      	mov	r3, r0
 80059cc:	005a      	lsls	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	441a      	add	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	fbb2 f3f3 	udiv	r3, r2, r3
 80059de:	82bb      	strh	r3, [r7, #20]
        break;
 80059e0:	e00d      	b.n	80059fe <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f4:	82bb      	strh	r3, [r7, #20]
        break;
 80059f6:	e002      	b.n	80059fe <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	74fb      	strb	r3, [r7, #19]
        break;
 80059fc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80059fe:	8abb      	ldrh	r3, [r7, #20]
 8005a00:	f023 030f 	bic.w	r3, r3, #15
 8005a04:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a06:	8abb      	ldrh	r3, [r7, #20]
 8005a08:	105b      	asrs	r3, r3, #1
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	897b      	ldrh	r3, [r7, #10]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	897a      	ldrh	r2, [r7, #10]
 8005a1e:	60da      	str	r2, [r3, #12]
 8005a20:	e069      	b.n	8005af6 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d863      	bhi.n	8005af0 <UART_SetConfig+0x2a8>
 8005a28:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <UART_SetConfig+0x1e8>)
 8005a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2e:	bf00      	nop
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a75 	.word	0x08005a75
 8005a38:	08005a95 	.word	0x08005a95
 8005a3c:	08005af1 	.word	0x08005af1
 8005a40:	08005ab5 	.word	0x08005ab5
 8005a44:	08005af1 	.word	0x08005af1
 8005a48:	08005af1 	.word	0x08005af1
 8005a4c:	08005af1 	.word	0x08005af1
 8005a50:	08005ad5 	.word	0x08005ad5
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005a54:	f7fd ff84 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60da      	str	r2, [r3, #12]
        break;
 8005a72:	e040      	b.n	8005af6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005a74:	f7fd ff96 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	441a      	add	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60da      	str	r2, [r3, #12]
        break;
 8005a92:	e030      	b.n	8005af6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005a9e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6852      	ldr	r2, [r2, #4]
 8005aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60da      	str	r2, [r3, #12]
        break;
 8005ab2:	e020      	b.n	8005af6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ab4:	f7fd fede 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	441a      	add	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60da      	str	r2, [r3, #12]
        break;
 8005ad2:	e010      	b.n	8005af6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60da      	str	r2, [r3, #12]
        break;
 8005aee:	e002      	b.n	8005af6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	74fb      	strb	r3, [r7, #19]
        break;
 8005af4:	bf00      	nop
    }
  }

  return ret;
 8005af6:	7cfb      	ldrb	r3, [r7, #19]

}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	efff69f3 	.word	0xefff69f3
 8005b04:	40013800 	.word	0x40013800
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	40004400 	.word	0x40004400
 8005b10:	40004800 	.word	0x40004800

08005b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01a      	beq.n	8005c2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c12:	d10a      	bne.n	8005c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	605a      	str	r2, [r3, #4]
  }
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005c6a:	f7fb f821 	bl	8000cb0 <HAL_GetTick>
 8005c6e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d10e      	bne.n	8005c9c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f82c 	bl	8005cea <UART_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e022      	b.n	8005ce2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d10e      	bne.n	8005cc8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005caa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f816 	bl	8005cea <UART_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e00c      	b.n	8005ce2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	603b      	str	r3, [r7, #0]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cfa:	e02c      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d02:	d028      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d0a:	f7fa ffd1 	bl	8000cb0 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d21d      	bcs.n	8005d56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e00f      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	bf0c      	ite	eq
 8005d66:	2301      	moveq	r3, #1
 8005d68:	2300      	movne	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d0c3      	beq.n	8005cfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_ADC_ConvCpltCallback>:
int g_sensorLEDFlag;
float batf;

uint16_t g_ADCBuffer[4];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
//	[0]=bat
//	[1]=left
//	[2]=center
//	[3]=right
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	0000      	movs	r0, r0
 8005d94:	0000      	movs	r0, r0
	...

08005d98 <AD_bat>:

void AD_bat(void) {
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af02      	add	r7, sp, #8
	HAL_Delay(10);
 8005d9e:	200a      	movs	r0, #10
 8005da0:	f7fa ff92 	bl	8000cc8 <HAL_Delay>
	batf = 1.066 * 3.3 * (g_ADCBuffer[0] / 4095.0) * (100.0 + 22.0) / 22.0;
 8005da4:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <AD_bat+0x138>)
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa fbb3 	bl	8000514 <__aeabi_i2d>
 8005dae:	a342      	add	r3, pc, #264	; (adr r3, 8005eb8 <AD_bat+0x120>)
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f7fa fd42 	bl	800083c <__aeabi_ddiv>
 8005db8:	4603      	mov	r3, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	a33f      	add	r3, pc, #252	; (adr r3, 8005ec0 <AD_bat+0x128>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f7fa fc0f 	bl	80005e8 <__aeabi_dmul>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	4618      	mov	r0, r3
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	4b3f      	ldr	r3, [pc, #252]	; (8005ed4 <AD_bat+0x13c>)
 8005dd8:	f7fa fc06 	bl	80005e8 <__aeabi_dmul>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	4618      	mov	r0, r3
 8005de2:	4621      	mov	r1, r4
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	4b3b      	ldr	r3, [pc, #236]	; (8005ed8 <AD_bat+0x140>)
 8005dea:	f7fa fd27 	bl	800083c <__aeabi_ddiv>
 8005dee:	4603      	mov	r3, r0
 8005df0:	460c      	mov	r4, r1
 8005df2:	4618      	mov	r0, r3
 8005df4:	4621      	mov	r1, r4
 8005df6:	f7fa feb1 	bl	8000b5c <__aeabi_d2f>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b37      	ldr	r3, [pc, #220]	; (8005edc <AD_bat+0x144>)
 8005dfe:	601a      	str	r2, [r3, #0]

	if (batf < 11.1) {
 8005e00:	4b36      	ldr	r3, [pc, #216]	; (8005edc <AD_bat+0x144>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fa fb97 	bl	8000538 <__aeabi_f2d>
 8005e0a:	a32f      	add	r3, pc, #188	; (adr r3, 8005ec8 <AD_bat+0x130>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f7fa fe5c 	bl	8000acc <__aeabi_dcmplt>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01b      	beq.n	8005e52 <AD_bat+0xba>
		printfLCD(0, 0, BLACK, "   ERROR!     ");
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <AD_bat+0x148>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	2100      	movs	r1, #0
 8005e20:	2000      	movs	r0, #0
 8005e22:	f000 fd81 	bl	8006928 <printfLCD>
		printfLCD(1, 0, WHITE, "battery");
 8005e26:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <AD_bat+0x14c>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	2001      	movs	r0, #1
 8005e2e:	f000 fd7b 	bl	8006928 <printfLCD>
		printfLCD(2, 3, WHITE, "%.2fV\n\r", batf);
 8005e32:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <AD_bat+0x144>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fa fb7e 	bl	8000538 <__aeabi_f2d>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	e9cd 3400 	strd	r3, r4, [sp]
 8005e44:	4b28      	ldr	r3, [pc, #160]	; (8005ee8 <AD_bat+0x150>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	2103      	movs	r1, #3
 8005e4a:	2002      	movs	r0, #2
 8005e4c:	f000 fd6c 	bl	8006928 <printfLCD>
		while (1) {
 8005e50:	e7fe      	b.n	8005e50 <AD_bat+0xb8>
		}
	} else {
		printfLCD(0, 0, BLACK, "    OK!    ");
 8005e52:	4b26      	ldr	r3, [pc, #152]	; (8005eec <AD_bat+0x154>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	2100      	movs	r1, #0
 8005e58:	2000      	movs	r0, #0
 8005e5a:	f000 fd65 	bl	8006928 <printfLCD>
		printfLCD(1, 0, WHITE, "battery");
 8005e5e:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <AD_bat+0x14c>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	2001      	movs	r0, #1
 8005e66:	f000 fd5f 	bl	8006928 <printfLCD>
		printfLCD(2, 3, WHITE, "%.2fV\n\r", batf);
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <AD_bat+0x144>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fa fb62 	bl	8000538 <__aeabi_f2d>
 8005e74:	4603      	mov	r3, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	e9cd 3400 	strd	r3, r4, [sp]
 8005e7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <AD_bat+0x150>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2103      	movs	r1, #3
 8005e82:	2002      	movs	r0, #2
 8005e84:	f000 fd50 	bl	8006928 <printfLCD>
	}

	volatile int i;
	i = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	607b      	str	r3, [r7, #4]
	while (i == 0) {
 8005e8c:	e00b      	b.n	8005ea6 <AD_bat+0x10e>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == HIGH) {//XXX
 8005e8e:	2101      	movs	r1, #1
 8005e90:	4817      	ldr	r0, [pc, #92]	; (8005ef0 <AD_bat+0x158>)
 8005e92:	f7fc fc55 	bl	8002740 <HAL_GPIO_ReadPin>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d004      	beq.n	8005ea6 <AD_bat+0x10e>
		} else {
			i = 1;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	607b      	str	r3, [r7, #4]
			HAL_Delay(100);
 8005ea0:	2064      	movs	r0, #100	; 0x64
 8005ea2:	f7fa ff11 	bl	8000cc8 <HAL_Delay>
	while (i == 0) {
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0f0      	beq.n	8005e8e <AD_bat+0xf6>
		}
	}
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd90      	pop	{r4, r7, pc}
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	00000000 	.word	0x00000000
 8005ebc:	40affe00 	.word	0x40affe00
 8005ec0:	538ef34d 	.word	0x538ef34d
 8005ec4:	400c2474 	.word	0x400c2474
 8005ec8:	33333333 	.word	0x33333333
 8005ecc:	40263333 	.word	0x40263333
 8005ed0:	200000f0 	.word	0x200000f0
 8005ed4:	405e8000 	.word	0x405e8000
 8005ed8:	40360000 	.word	0x40360000
 8005edc:	200000cc 	.word	0x200000cc
 8005ee0:	0800a7bc 	.word	0x0800a7bc
 8005ee4:	0800a7cc 	.word	0x0800a7cc
 8005ee8:	0800a7d4 	.word	0x0800a7d4
 8005eec:	0800a7dc 	.word	0x0800a7dc
 8005ef0:	48000400 	.word	0x48000400

08005ef4 <getWallSensorValue>:

void getWallSensorValue(void) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
	volatile uint32_t onSENSORLEDWAITCOUNT;
	volatile uint32_t offSENSORLEDWAITCOUNT;
	onSENSORLEDWAITCOUNT = 250;
 8005efa:	23fa      	movs	r3, #250	; 0xfa
 8005efc:	60fb      	str	r3, [r7, #12]
	offSENSORLEDWAITCOUNT = 250;
 8005efe:	23fa      	movs	r3, #250	; 0xfa
 8005f00:	60bb      	str	r3, [r7, #8]

//消灯時の値を得る
	g_offWallSensorValue.left = g_ADCBuffer[1];
 8005f02:	4b45      	ldr	r3, [pc, #276]	; (8006018 <getWallSensorValue+0x124>)
 8005f04:	885b      	ldrh	r3, [r3, #2]
 8005f06:	461a      	mov	r2, r3
 8005f08:	4b44      	ldr	r3, [pc, #272]	; (800601c <getWallSensorValue+0x128>)
 8005f0a:	609a      	str	r2, [r3, #8]
	g_offWallSensorValue.right = g_ADCBuffer[3];
 8005f0c:	4b42      	ldr	r3, [pc, #264]	; (8006018 <getWallSensorValue+0x124>)
 8005f0e:	88db      	ldrh	r3, [r3, #6]
 8005f10:	461a      	mov	r2, r3
 8005f12:	4b42      	ldr	r3, [pc, #264]	; (800601c <getWallSensorValue+0x128>)
 8005f14:	605a      	str	r2, [r3, #4]
	g_offWallSensorValue.center = g_ADCBuffer[2];
 8005f16:	4b40      	ldr	r3, [pc, #256]	; (8006018 <getWallSensorValue+0x124>)
 8005f18:	889b      	ldrh	r3, [r3, #4]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4b3f      	ldr	r3, [pc, #252]	; (800601c <getWallSensorValue+0x128>)
 8005f1e:	601a      	str	r2, [r3, #0]

//左右のLEDを点灯
	if (g_sensorLEDFlag == 1) {
 8005f20:	4b3f      	ldr	r3, [pc, #252]	; (8006020 <getWallSensorValue+0x12c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d110      	bne.n	8005f4a <getWallSensorValue+0x56>
		sensorSideLED(HIGH);
 8005f28:	2001      	movs	r0, #1
 8005f2a:	f002 fb89 	bl	8008640 <sensorSideLED>
		volatile uint16_t i;
		for (i = 0; i < onSENSORLEDWAITCOUNT; i++) {
 8005f2e:	2300      	movs	r3, #0
 8005f30:	80fb      	strh	r3, [r7, #6]
 8005f32:	e004      	b.n	8005f3e <getWallSensorValue+0x4a>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3301      	adds	r3, #1
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	80fb      	strh	r3, [r7, #6]
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d3f4      	bcc.n	8005f34 <getWallSensorValue+0x40>
		} //立ち上がり待ち
	}

//左右方向のセンサの値を得る
	g_onWallSensorValue.left = g_ADCBuffer[1];
 8005f4a:	4b33      	ldr	r3, [pc, #204]	; (8006018 <getWallSensorValue+0x124>)
 8005f4c:	885b      	ldrh	r3, [r3, #2]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b34      	ldr	r3, [pc, #208]	; (8006024 <getWallSensorValue+0x130>)
 8005f52:	609a      	str	r2, [r3, #8]
	g_onWallSensorValue.right = g_ADCBuffer[3];
 8005f54:	4b30      	ldr	r3, [pc, #192]	; (8006018 <getWallSensorValue+0x124>)
 8005f56:	88db      	ldrh	r3, [r3, #6]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4b32      	ldr	r3, [pc, #200]	; (8006024 <getWallSensorValue+0x130>)
 8005f5c:	605a      	str	r2, [r3, #4]

//左右のLEDを消灯
	if (g_sensorLEDFlag == 1) {
 8005f5e:	4b30      	ldr	r3, [pc, #192]	; (8006020 <getWallSensorValue+0x12c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d110      	bne.n	8005f88 <getWallSensorValue+0x94>
		sensorSideLED(LOW);
 8005f66:	2000      	movs	r0, #0
 8005f68:	f002 fb6a 	bl	8008640 <sensorSideLED>
		volatile uint16_t i;
		for (i = 0; i < offSENSORLEDWAITCOUNT; i++) {
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	80bb      	strh	r3, [r7, #4]
 8005f70:	e004      	b.n	8005f7c <getWallSensorValue+0x88>
 8005f72:	88bb      	ldrh	r3, [r7, #4]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3301      	adds	r3, #1
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	80bb      	strh	r3, [r7, #4]
 8005f7c:	88bb      	ldrh	r3, [r7, #4]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d3f4      	bcc.n	8005f72 <getWallSensorValue+0x7e>
		} //立ち上がり待ち
	}

//前方向のLEDを点灯
	if (g_sensorLEDFlag == 1) {
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <getWallSensorValue+0x12c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d110      	bne.n	8005fb2 <getWallSensorValue+0xbe>
		sensorFrontLED(HIGH);
 8005f90:	2001      	movs	r0, #1
 8005f92:	f002 fb43 	bl	800861c <sensorFrontLED>
		volatile uint16_t i;
		for (i = 0; i < onSENSORLEDWAITCOUNT; i++) {
 8005f96:	2300      	movs	r3, #0
 8005f98:	807b      	strh	r3, [r7, #2]
 8005f9a:	e004      	b.n	8005fa6 <getWallSensorValue+0xb2>
 8005f9c:	887b      	ldrh	r3, [r7, #2]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	807b      	strh	r3, [r7, #2]
 8005fa6:	887b      	ldrh	r3, [r7, #2]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d3f4      	bcc.n	8005f9c <getWallSensorValue+0xa8>
		} //立ち上がり待ち
	}

//前方向のセンサの値を得る
	g_onWallSensorValue.center = g_ADCBuffer[2];
 8005fb2:	4b19      	ldr	r3, [pc, #100]	; (8006018 <getWallSensorValue+0x124>)
 8005fb4:	889b      	ldrh	r3, [r3, #4]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <getWallSensorValue+0x130>)
 8005fba:	601a      	str	r2, [r3, #0]

//前方向のLEDを消灯
	if (g_sensorLEDFlag == 1) {
 8005fbc:	4b18      	ldr	r3, [pc, #96]	; (8006020 <getWallSensorValue+0x12c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d110      	bne.n	8005fe6 <getWallSensorValue+0xf2>
		sensorFrontLED(LOW);
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f002 fb29 	bl	800861c <sensorFrontLED>
		volatile uint16_t i;
		for (i = 0; i < offSENSORLEDWAITCOUNT; i++) {
 8005fca:	2300      	movs	r3, #0
 8005fcc:	803b      	strh	r3, [r7, #0]
 8005fce:	e004      	b.n	8005fda <getWallSensorValue+0xe6>
 8005fd0:	883b      	ldrh	r3, [r7, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	803b      	strh	r3, [r7, #0]
 8005fda:	883b      	ldrh	r3, [r7, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3f4      	bcc.n	8005fd0 <getWallSensorValue+0xdc>
		} //立ち上がり待ち
	}

	g_nowWallSensorValue.center = g_onWallSensorValue.center
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <getWallSensorValue+0x130>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
			- g_offWallSensorValue.center;
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <getWallSensorValue+0x128>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	1ad3      	subs	r3, r2, r3
	g_nowWallSensorValue.center = g_onWallSensorValue.center
 8005ff0:	4a0d      	ldr	r2, [pc, #52]	; (8006028 <getWallSensorValue+0x134>)
 8005ff2:	6013      	str	r3, [r2, #0]
	g_nowWallSensorValue.left = g_onWallSensorValue.left
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <getWallSensorValue+0x130>)
 8005ff6:	689a      	ldr	r2, [r3, #8]
			- g_offWallSensorValue.left;
 8005ff8:	4b08      	ldr	r3, [pc, #32]	; (800601c <getWallSensorValue+0x128>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	1ad3      	subs	r3, r2, r3
	g_nowWallSensorValue.left = g_onWallSensorValue.left
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <getWallSensorValue+0x134>)
 8006000:	6093      	str	r3, [r2, #8]
	g_nowWallSensorValue.right = g_onWallSensorValue.right
 8006002:	4b08      	ldr	r3, [pc, #32]	; (8006024 <getWallSensorValue+0x130>)
 8006004:	685a      	ldr	r2, [r3, #4]
			- g_offWallSensorValue.right;
 8006006:	4b05      	ldr	r3, [pc, #20]	; (800601c <getWallSensorValue+0x128>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	1ad3      	subs	r3, r2, r3
	g_nowWallSensorValue.right = g_onWallSensorValue.right
 800600c:	4a06      	ldr	r2, [pc, #24]	; (8006028 <getWallSensorValue+0x134>)
 800600e:	6053      	str	r3, [r2, #4]

}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	200000f0 	.word	0x200000f0
 800601c:	200000e0 	.word	0x200000e0
 8006020:	200000ec 	.word	0x200000ec
 8006024:	200000d0 	.word	0x200000d0
 8006028:	200000c0 	.word	0x200000c0

0800602c <adachi>:
#include "move.h"
#include "map.h"
#include "ad.h"
#include "motor.h"
#include <stdio.h>
void adachi(void) {
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
	initStepMap();
 8006030:	f001 f8e2 	bl	80071f8 <initStepMap>
	g_location.x = 0;
 8006034:	4ba6      	ldr	r3, [pc, #664]	; (80062d0 <adachi+0x2a4>)
 8006036:	2200      	movs	r2, #0
 8006038:	709a      	strb	r2, [r3, #2]
	g_location.y = 0;
 800603a:	4ba5      	ldr	r3, [pc, #660]	; (80062d0 <adachi+0x2a4>)
 800603c:	2200      	movs	r2, #0
 800603e:	70da      	strb	r2, [r3, #3]
	g_location.Direction = 0;
 8006040:	4ba3      	ldr	r3, [pc, #652]	; (80062d0 <adachi+0x2a4>)
 8006042:	2200      	movs	r2, #0
 8006044:	711a      	strb	r2, [r3, #4]
	motorEnable(1); //xxx
 8006046:	2001      	movs	r0, #1
 8006048:	f001 fea4 	bl	8007d94 <motorEnable>
	while (g_location.x != g_location.x_goal
 800604c:	e12c      	b.n	80062a8 <adachi+0x27c>
			|| g_location.y != g_location.y_goal) {
		StepMapforAdachi();
 800604e:	f001 f8f9 	bl	8007244 <StepMapforAdachi>
		if (g_nowWallSensorValue.center > g_WallThreshold.center
 8006052:	4ba0      	ldr	r3, [pc, #640]	; (80062d4 <adachi+0x2a8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4aa0      	ldr	r2, [pc, #640]	; (80062d8 <adachi+0x2ac>)
 8006058:	8812      	ldrh	r2, [r2, #0]
 800605a:	4293      	cmp	r3, r2
 800605c:	dd14      	ble.n	8006088 <adachi+0x5c>
				&& g_nowWallSensorValue.right > g_WallThreshold.right
 800605e:	4b9d      	ldr	r3, [pc, #628]	; (80062d4 <adachi+0x2a8>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	4a9d      	ldr	r2, [pc, #628]	; (80062d8 <adachi+0x2ac>)
 8006064:	8852      	ldrh	r2, [r2, #2]
 8006066:	4293      	cmp	r3, r2
 8006068:	dd0e      	ble.n	8006088 <adachi+0x5c>
				&& g_nowWallSensorValue.left > g_WallThreshold.left) { //全方向に壁があれば後ろに下がる
 800606a:	4b9a      	ldr	r3, [pc, #616]	; (80062d4 <adachi+0x2a8>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	4a9a      	ldr	r2, [pc, #616]	; (80062d8 <adachi+0x2ac>)
 8006070:	8892      	ldrh	r2, [r2, #4]
 8006072:	4293      	cmp	r3, r2
 8006074:	dd08      	ble.n	8006088 <adachi+0x5c>
			goBack();
 8006076:	f002 fa5f 	bl	8008538 <goBack>
			setWalltoMap();
 800607a:	f000 ff21 	bl	8006ec0 <setWalltoMap>
			HAL_Delay(500);
 800607e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006082:	f7fa fe21 	bl	8000cc8 <HAL_Delay>
				&& g_nowWallSensorValue.left > g_WallThreshold.left) { //全方向に壁があれば後ろに下がる
 8006086:	e10f      	b.n	80062a8 <adachi+0x27c>
		} else if (compareStep(g_location.x, g_location.y, g_location.Direction)
 8006088:	4b91      	ldr	r3, [pc, #580]	; (80062d0 <adachi+0x2a4>)
 800608a:	7898      	ldrb	r0, [r3, #2]
 800608c:	4b90      	ldr	r3, [pc, #576]	; (80062d0 <adachi+0x2a4>)
 800608e:	78d9      	ldrb	r1, [r3, #3]
 8006090:	4b8f      	ldr	r3, [pc, #572]	; (80062d0 <adachi+0x2a4>)
 8006092:	791b      	ldrb	r3, [r3, #4]
 8006094:	461a      	mov	r2, r3
 8006096:	f001 f99f 	bl	80073d8 <compareStep>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d111      	bne.n	80060c4 <adachi+0x98>
				== 0) { //壁がなければ前に進む
			if (g_nowWallSensorValue.center < g_WallThreshold.center) {
 80060a0:	4b8c      	ldr	r3, [pc, #560]	; (80062d4 <adachi+0x2a8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a8c      	ldr	r2, [pc, #560]	; (80062d8 <adachi+0x2ac>)
 80060a6:	8812      	ldrh	r2, [r2, #0]
 80060a8:	4293      	cmp	r3, r2
 80060aa:	da08      	bge.n	80060be <adachi+0x92>
				goAhead();
 80060ac:	f002 f960 	bl	8008370 <goAhead>
				setWalltoMap();
 80060b0:	f000 ff06 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 80060b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060b8:	f7fa fe06 	bl	8000cc8 <HAL_Delay>
 80060bc:	e0f4      	b.n	80062a8 <adachi+0x27c>
			} else {
				setWalltoMap();
 80060be:	f000 feff 	bl	8006ec0 <setWalltoMap>
 80060c2:	e0f1      	b.n	80062a8 <adachi+0x27c>
			}
		} else if (compareStep(g_location.x, g_location.y, g_location.Direction)
 80060c4:	4b82      	ldr	r3, [pc, #520]	; (80062d0 <adachi+0x2a4>)
 80060c6:	7898      	ldrb	r0, [r3, #2]
 80060c8:	4b81      	ldr	r3, [pc, #516]	; (80062d0 <adachi+0x2a4>)
 80060ca:	78d9      	ldrb	r1, [r3, #3]
 80060cc:	4b80      	ldr	r3, [pc, #512]	; (80062d0 <adachi+0x2a4>)
 80060ce:	791b      	ldrb	r3, [r3, #4]
 80060d0:	461a      	mov	r2, r3
 80060d2:	f001 f981 	bl	80073d8 <compareStep>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d111      	bne.n	8006100 <adachi+0xd4>
				== 1) { //壁がなければ左に進む
			if (g_nowWallSensorValue.left < g_WallThreshold.left) {
 80060dc:	4b7d      	ldr	r3, [pc, #500]	; (80062d4 <adachi+0x2a8>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4a7d      	ldr	r2, [pc, #500]	; (80062d8 <adachi+0x2ac>)
 80060e2:	8892      	ldrh	r2, [r2, #4]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	da08      	bge.n	80060fa <adachi+0xce>
				turnLeft();
 80060e8:	f002 f982 	bl	80083f0 <turnLeft>
				setWalltoMap();
 80060ec:	f000 fee8 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 80060f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060f4:	f7fa fde8 	bl	8000cc8 <HAL_Delay>
 80060f8:	e0d6      	b.n	80062a8 <adachi+0x27c>
			} else {
				setWalltoMap();
 80060fa:	f000 fee1 	bl	8006ec0 <setWalltoMap>
 80060fe:	e0d3      	b.n	80062a8 <adachi+0x27c>
			}
		} else if (compareStep(g_location.x, g_location.y, g_location.Direction)
 8006100:	4b73      	ldr	r3, [pc, #460]	; (80062d0 <adachi+0x2a4>)
 8006102:	7898      	ldrb	r0, [r3, #2]
 8006104:	4b72      	ldr	r3, [pc, #456]	; (80062d0 <adachi+0x2a4>)
 8006106:	78d9      	ldrb	r1, [r3, #3]
 8006108:	4b71      	ldr	r3, [pc, #452]	; (80062d0 <adachi+0x2a4>)
 800610a:	791b      	ldrb	r3, [r3, #4]
 800610c:	461a      	mov	r2, r3
 800610e:	f001 f963 	bl	80073d8 <compareStep>
 8006112:	4603      	mov	r3, r0
 8006114:	2b02      	cmp	r3, #2
 8006116:	d111      	bne.n	800613c <adachi+0x110>
				== 2) { //壁がなければ右に曲がる
			if (g_nowWallSensorValue.right < g_WallThreshold.right) {
 8006118:	4b6e      	ldr	r3, [pc, #440]	; (80062d4 <adachi+0x2a8>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4a6e      	ldr	r2, [pc, #440]	; (80062d8 <adachi+0x2ac>)
 800611e:	8852      	ldrh	r2, [r2, #2]
 8006120:	4293      	cmp	r3, r2
 8006122:	da08      	bge.n	8006136 <adachi+0x10a>
				turnRight();
 8006124:	f002 f9b6 	bl	8008494 <turnRight>
				setWalltoMap();
 8006128:	f000 feca 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 800612c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006130:	f7fa fdca 	bl	8000cc8 <HAL_Delay>
 8006134:	e0b8      	b.n	80062a8 <adachi+0x27c>
			} else {
				setWalltoMap();
 8006136:	f000 fec3 	bl	8006ec0 <setWalltoMap>
 800613a:	e0b5      	b.n	80062a8 <adachi+0x27c>
			}
		} else if (compareStep(g_location.x, g_location.y, g_location.Direction)
 800613c:	4b64      	ldr	r3, [pc, #400]	; (80062d0 <adachi+0x2a4>)
 800613e:	7898      	ldrb	r0, [r3, #2]
 8006140:	4b63      	ldr	r3, [pc, #396]	; (80062d0 <adachi+0x2a4>)
 8006142:	78d9      	ldrb	r1, [r3, #3]
 8006144:	4b62      	ldr	r3, [pc, #392]	; (80062d0 <adachi+0x2a4>)
 8006146:	791b      	ldrb	r3, [r3, #4]
 8006148:	461a      	mov	r2, r3
 800614a:	f001 f945 	bl	80073d8 <compareStep>
 800614e:	4603      	mov	r3, r0
 8006150:	2b03      	cmp	r3, #3
 8006152:	d12f      	bne.n	80061b4 <adachi+0x188>
				== 3) { //前壁→右壁→左壁で試す
			if (g_nowWallSensorValue.center < g_WallThreshold.center) { //前壁がなければ前に進む
 8006154:	4b5f      	ldr	r3, [pc, #380]	; (80062d4 <adachi+0x2a8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a5f      	ldr	r2, [pc, #380]	; (80062d8 <adachi+0x2ac>)
 800615a:	8812      	ldrh	r2, [r2, #0]
 800615c:	4293      	cmp	r3, r2
 800615e:	da08      	bge.n	8006172 <adachi+0x146>
				goAhead();
 8006160:	f002 f906 	bl	8008370 <goAhead>
				setWalltoMap();
 8006164:	f000 feac 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 8006168:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800616c:	f7fa fdac 	bl	8000cc8 <HAL_Delay>
 8006170:	e09a      	b.n	80062a8 <adachi+0x27c>
			} else if (g_nowWallSensorValue.right < g_WallThreshold.right) { //右壁がなければ右に進む
 8006172:	4b58      	ldr	r3, [pc, #352]	; (80062d4 <adachi+0x2a8>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	4a58      	ldr	r2, [pc, #352]	; (80062d8 <adachi+0x2ac>)
 8006178:	8852      	ldrh	r2, [r2, #2]
 800617a:	4293      	cmp	r3, r2
 800617c:	da08      	bge.n	8006190 <adachi+0x164>
				turnRight();
 800617e:	f002 f989 	bl	8008494 <turnRight>
				setWalltoMap();
 8006182:	f000 fe9d 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 8006186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800618a:	f7fa fd9d 	bl	8000cc8 <HAL_Delay>
 800618e:	e08b      	b.n	80062a8 <adachi+0x27c>
			} else if (g_nowWallSensorValue.left < g_WallThreshold.left) { //左壁がなければ左に進む
 8006190:	4b50      	ldr	r3, [pc, #320]	; (80062d4 <adachi+0x2a8>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	4a50      	ldr	r2, [pc, #320]	; (80062d8 <adachi+0x2ac>)
 8006196:	8892      	ldrh	r2, [r2, #4]
 8006198:	4293      	cmp	r3, r2
 800619a:	da08      	bge.n	80061ae <adachi+0x182>
				turnLeft();
 800619c:	f002 f928 	bl	80083f0 <turnLeft>
				setWalltoMap();
 80061a0:	f000 fe8e 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 80061a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061a8:	f7fa fd8e 	bl	8000cc8 <HAL_Delay>
 80061ac:	e07c      	b.n	80062a8 <adachi+0x27c>
			} else {
				setWalltoMap();
 80061ae:	f000 fe87 	bl	8006ec0 <setWalltoMap>
 80061b2:	e079      	b.n	80062a8 <adachi+0x27c>
			}
		} else if (compareStep(g_location.x, g_location.y, g_location.Direction)
 80061b4:	4b46      	ldr	r3, [pc, #280]	; (80062d0 <adachi+0x2a4>)
 80061b6:	7898      	ldrb	r0, [r3, #2]
 80061b8:	4b45      	ldr	r3, [pc, #276]	; (80062d0 <adachi+0x2a4>)
 80061ba:	78d9      	ldrb	r1, [r3, #3]
 80061bc:	4b44      	ldr	r3, [pc, #272]	; (80062d0 <adachi+0x2a4>)
 80061be:	791b      	ldrb	r3, [r3, #4]
 80061c0:	461a      	mov	r2, r3
 80061c2:	f001 f909 	bl	80073d8 <compareStep>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d120      	bne.n	800620e <adachi+0x1e2>
				== 4) { //前→右
			if (g_nowWallSensorValue.center < g_WallThreshold.center) { //前壁がなければ前に進む
 80061cc:	4b41      	ldr	r3, [pc, #260]	; (80062d4 <adachi+0x2a8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a41      	ldr	r2, [pc, #260]	; (80062d8 <adachi+0x2ac>)
 80061d2:	8812      	ldrh	r2, [r2, #0]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	da08      	bge.n	80061ea <adachi+0x1be>
				goAhead();
 80061d8:	f002 f8ca 	bl	8008370 <goAhead>
				setWalltoMap();
 80061dc:	f000 fe70 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 80061e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061e4:	f7fa fd70 	bl	8000cc8 <HAL_Delay>
 80061e8:	e05e      	b.n	80062a8 <adachi+0x27c>
			} else if (g_nowWallSensorValue.right < g_WallThreshold.right) { //右壁がなければ右に進む
 80061ea:	4b3a      	ldr	r3, [pc, #232]	; (80062d4 <adachi+0x2a8>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4a3a      	ldr	r2, [pc, #232]	; (80062d8 <adachi+0x2ac>)
 80061f0:	8852      	ldrh	r2, [r2, #2]
 80061f2:	4293      	cmp	r3, r2
 80061f4:	da08      	bge.n	8006208 <adachi+0x1dc>
				turnRight();
 80061f6:	f002 f94d 	bl	8008494 <turnRight>
				setWalltoMap();
 80061fa:	f000 fe61 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 80061fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006202:	f7fa fd61 	bl	8000cc8 <HAL_Delay>
 8006206:	e04f      	b.n	80062a8 <adachi+0x27c>
			} else {
				setWalltoMap();
 8006208:	f000 fe5a 	bl	8006ec0 <setWalltoMap>
 800620c:	e04c      	b.n	80062a8 <adachi+0x27c>
			}
		} else if (compareStep(g_location.x, g_location.y, g_location.Direction)
 800620e:	4b30      	ldr	r3, [pc, #192]	; (80062d0 <adachi+0x2a4>)
 8006210:	7898      	ldrb	r0, [r3, #2]
 8006212:	4b2f      	ldr	r3, [pc, #188]	; (80062d0 <adachi+0x2a4>)
 8006214:	78d9      	ldrb	r1, [r3, #3]
 8006216:	4b2e      	ldr	r3, [pc, #184]	; (80062d0 <adachi+0x2a4>)
 8006218:	791b      	ldrb	r3, [r3, #4]
 800621a:	461a      	mov	r2, r3
 800621c:	f001 f8dc 	bl	80073d8 <compareStep>
 8006220:	4603      	mov	r3, r0
 8006222:	2b05      	cmp	r3, #5
 8006224:	d120      	bne.n	8006268 <adachi+0x23c>
				== 5) { //前→左
			if (g_nowWallSensorValue.left < g_WallThreshold.left) { //左壁がなければ左に進む
 8006226:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <adachi+0x2a8>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	4a2b      	ldr	r2, [pc, #172]	; (80062d8 <adachi+0x2ac>)
 800622c:	8892      	ldrh	r2, [r2, #4]
 800622e:	4293      	cmp	r3, r2
 8006230:	da08      	bge.n	8006244 <adachi+0x218>
				turnLeft();
 8006232:	f002 f8dd 	bl	80083f0 <turnLeft>
				setWalltoMap();
 8006236:	f000 fe43 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 800623a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800623e:	f7fa fd43 	bl	8000cc8 <HAL_Delay>
 8006242:	e031      	b.n	80062a8 <adachi+0x27c>
			} else if (g_nowWallSensorValue.center < g_WallThreshold.center) { //前壁がなければ前に進む
 8006244:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <adachi+0x2a8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a23      	ldr	r2, [pc, #140]	; (80062d8 <adachi+0x2ac>)
 800624a:	8812      	ldrh	r2, [r2, #0]
 800624c:	4293      	cmp	r3, r2
 800624e:	da08      	bge.n	8006262 <adachi+0x236>
				goAhead();
 8006250:	f002 f88e 	bl	8008370 <goAhead>
				setWalltoMap();
 8006254:	f000 fe34 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 8006258:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800625c:	f7fa fd34 	bl	8000cc8 <HAL_Delay>
 8006260:	e022      	b.n	80062a8 <adachi+0x27c>
			} else {
				setWalltoMap();
 8006262:	f000 fe2d 	bl	8006ec0 <setWalltoMap>
 8006266:	e01f      	b.n	80062a8 <adachi+0x27c>
			}
		} else { //右→左
			if (g_nowWallSensorValue.right < g_WallThreshold.right) { //右壁がなければ右に進む
 8006268:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <adachi+0x2a8>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <adachi+0x2ac>)
 800626e:	8852      	ldrh	r2, [r2, #2]
 8006270:	4293      	cmp	r3, r2
 8006272:	da08      	bge.n	8006286 <adachi+0x25a>
				turnRight();
 8006274:	f002 f90e 	bl	8008494 <turnRight>
				setWalltoMap();
 8006278:	f000 fe22 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 800627c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006280:	f7fa fd22 	bl	8000cc8 <HAL_Delay>
 8006284:	e010      	b.n	80062a8 <adachi+0x27c>
			} else if (g_nowWallSensorValue.left < g_WallThreshold.left) { //左壁がなければ左に進む
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <adachi+0x2a8>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <adachi+0x2ac>)
 800628c:	8892      	ldrh	r2, [r2, #4]
 800628e:	4293      	cmp	r3, r2
 8006290:	da08      	bge.n	80062a4 <adachi+0x278>
				turnLeft();
 8006292:	f002 f8ad 	bl	80083f0 <turnLeft>
				setWalltoMap();
 8006296:	f000 fe13 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 800629a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800629e:	f7fa fd13 	bl	8000cc8 <HAL_Delay>
 80062a2:	e001      	b.n	80062a8 <adachi+0x27c>
			} else {
				setWalltoMap();
 80062a4:	f000 fe0c 	bl	8006ec0 <setWalltoMap>
	while (g_location.x != g_location.x_goal
 80062a8:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <adachi+0x2a4>)
 80062aa:	789a      	ldrb	r2, [r3, #2]
 80062ac:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <adachi+0x2a4>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	f47f aecc 	bne.w	800604e <adachi+0x22>
			|| g_location.y != g_location.y_goal) {
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <adachi+0x2a4>)
 80062b8:	78da      	ldrb	r2, [r3, #3]
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <adachi+0x2a4>)
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	429a      	cmp	r2, r3
 80062c0:	f47f aec5 	bne.w	800604e <adachi+0x22>
			}
		}
//		saveMapFlash(0x0800f800);
	}
	motorEnable(0);
 80062c4:	2000      	movs	r0, #0
 80062c6:	f001 fd65 	bl	8007d94 <motorEnable>
}
 80062ca:	bf00      	nop
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000190 	.word	0x20000190
 80062d4:	200000c0 	.word	0x200000c0
 80062d8:	20000198 	.word	0x20000198

080062dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80062e2:	f107 031c 	add.w	r3, r7, #28
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	605a      	str	r2, [r3, #4]
 80062ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	60da      	str	r2, [r3, #12]
 80062fa:	611a      	str	r2, [r3, #16]
 80062fc:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80062fe:	4b42      	ldr	r3, [pc, #264]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006300:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006306:	4b40      	ldr	r3, [pc, #256]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006308:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800630c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800630e:	4b3e      	ldr	r3, [pc, #248]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006310:	2200      	movs	r2, #0
 8006312:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8006314:	4b3c      	ldr	r3, [pc, #240]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006316:	2201      	movs	r2, #1
 8006318:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800631a:	4b3b      	ldr	r3, [pc, #236]	; (8006408 <MX_ADC1_Init+0x12c>)
 800631c:	2201      	movs	r2, #1
 800631e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006320:	4b39      	ldr	r3, [pc, #228]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006322:	2200      	movs	r2, #0
 8006324:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006326:	4b38      	ldr	r3, [pc, #224]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <MX_ADC1_Init+0x12c>)
 800632e:	2201      	movs	r2, #1
 8006330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006332:	4b35      	ldr	r3, [pc, #212]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006334:	2200      	movs	r2, #0
 8006336:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8006338:	4b33      	ldr	r3, [pc, #204]	; (8006408 <MX_ADC1_Init+0x12c>)
 800633a:	2204      	movs	r2, #4
 800633c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800633e:	4b32      	ldr	r3, [pc, #200]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006340:	2201      	movs	r2, #1
 8006342:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006344:	4b30      	ldr	r3, [pc, #192]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006346:	2204      	movs	r2, #4
 8006348:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800634a:	4b2f      	ldr	r3, [pc, #188]	; (8006408 <MX_ADC1_Init+0x12c>)
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006352:	2200      	movs	r2, #0
 8006354:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006356:	482c      	ldr	r0, [pc, #176]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006358:	f7fa fcec 	bl	8000d34 <HAL_ADC_Init>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8006362:	f000 fd02 	bl	8006d6a <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800636a:	f107 031c 	add.w	r3, r7, #28
 800636e:	4619      	mov	r1, r3
 8006370:	4825      	ldr	r0, [pc, #148]	; (8006408 <MX_ADC1_Init+0x12c>)
 8006372:	f7fb fa0b 	bl	800178c <HAL_ADCEx_MultiModeConfigChannel>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 800637c:	f000 fcf5 	bl	8006d6a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006380:	230c      	movs	r3, #12
 8006382:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006384:	2301      	movs	r3, #1
 8006386:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006388:	2300      	movs	r3, #0
 800638a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800638c:	2304      	movs	r3, #4
 800638e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006398:	1d3b      	adds	r3, r7, #4
 800639a:	4619      	mov	r1, r3
 800639c:	481a      	ldr	r0, [pc, #104]	; (8006408 <MX_ADC1_Init+0x12c>)
 800639e:	f7fa ff33 	bl	8001208 <HAL_ADC_ConfigChannel>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80063a8:	f000 fcdf 	bl	8006d6a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80063ac:	2301      	movs	r3, #1
 80063ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80063b0:	2302      	movs	r3, #2
 80063b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80063b4:	1d3b      	adds	r3, r7, #4
 80063b6:	4619      	mov	r1, r3
 80063b8:	4813      	ldr	r0, [pc, #76]	; (8006408 <MX_ADC1_Init+0x12c>)
 80063ba:	f7fa ff25 	bl	8001208 <HAL_ADC_ConfigChannel>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80063c4:	f000 fcd1 	bl	8006d6a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80063c8:	2304      	movs	r3, #4
 80063ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80063cc:	2303      	movs	r3, #3
 80063ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80063d0:	1d3b      	adds	r3, r7, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	480c      	ldr	r0, [pc, #48]	; (8006408 <MX_ADC1_Init+0x12c>)
 80063d6:	f7fa ff17 	bl	8001208 <HAL_ADC_ConfigChannel>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80063e0:	f000 fcc3 	bl	8006d6a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80063e4:	2302      	movs	r3, #2
 80063e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80063e8:	2304      	movs	r3, #4
 80063ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80063ec:	1d3b      	adds	r3, r7, #4
 80063ee:	4619      	mov	r1, r3
 80063f0:	4805      	ldr	r0, [pc, #20]	; (8006408 <MX_ADC1_Init+0x12c>)
 80063f2:	f7fa ff09 	bl	8001208 <HAL_ADC_ConfigChannel>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 80063fc:	f000 fcb5 	bl	8006d6a <Error_Handler>
  }

}
 8006400:	bf00      	nop
 8006402:	3728      	adds	r7, #40	; 0x28
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	200000f8 	.word	0x200000f8

0800640c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	; 0x28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006414:	f107 0314 	add.w	r3, r7, #20
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	605a      	str	r2, [r3, #4]
 800641e:	609a      	str	r2, [r3, #8]
 8006420:	60da      	str	r2, [r3, #12]
 8006422:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800642c:	d164      	bne.n	80064f8 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800642e:	4b34      	ldr	r3, [pc, #208]	; (8006500 <HAL_ADC_MspInit+0xf4>)
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	4a33      	ldr	r2, [pc, #204]	; (8006500 <HAL_ADC_MspInit+0xf4>)
 8006434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006438:	6153      	str	r3, [r2, #20]
 800643a:	4b31      	ldr	r3, [pc, #196]	; (8006500 <HAL_ADC_MspInit+0xf4>)
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006446:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <HAL_ADC_MspInit+0xf4>)
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	4a2d      	ldr	r2, [pc, #180]	; (8006500 <HAL_ADC_MspInit+0xf4>)
 800644c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006450:	6153      	str	r3, [r2, #20]
 8006452:	4b2b      	ldr	r3, [pc, #172]	; (8006500 <HAL_ADC_MspInit+0xf4>)
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800645e:	4b28      	ldr	r3, [pc, #160]	; (8006500 <HAL_ADC_MspInit+0xf4>)
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	4a27      	ldr	r2, [pc, #156]	; (8006500 <HAL_ADC_MspInit+0xf4>)
 8006464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006468:	6153      	str	r3, [r2, #20]
 800646a:	4b25      	ldr	r3, [pc, #148]	; (8006500 <HAL_ADC_MspInit+0xf4>)
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006472:	60bb      	str	r3, [r7, #8]
 8006474:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = center_Pin|right_Pin|left_Pin;
 8006476:	230b      	movs	r3, #11
 8006478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800647a:	2303      	movs	r3, #3
 800647c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006482:	f107 0314 	add.w	r3, r7, #20
 8006486:	4619      	mov	r1, r3
 8006488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800648c:	f7fb ffe2 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_Pin;
 8006490:	2302      	movs	r3, #2
 8006492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006494:	2303      	movs	r3, #3
 8006496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_GPIO_Port, &GPIO_InitStruct);
 800649c:	f107 0314 	add.w	r3, r7, #20
 80064a0:	4619      	mov	r1, r3
 80064a2:	4818      	ldr	r0, [pc, #96]	; (8006504 <HAL_ADC_MspInit+0xf8>)
 80064a4:	f7fb ffd6 	bl	8002454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80064a8:	4b17      	ldr	r3, [pc, #92]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064aa:	4a18      	ldr	r2, [pc, #96]	; (800650c <HAL_ADC_MspInit+0x100>)
 80064ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064ae:	4b16      	ldr	r3, [pc, #88]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064b4:	4b14      	ldr	r3, [pc, #80]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064bc:	2280      	movs	r2, #128	; 0x80
 80064be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80064c0:	4b11      	ldr	r3, [pc, #68]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80064c8:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80064d0:	4b0d      	ldr	r3, [pc, #52]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064d2:	2220      	movs	r2, #32
 80064d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80064d6:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064d8:	2200      	movs	r2, #0
 80064da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80064dc:	480a      	ldr	r0, [pc, #40]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064de:	f7fb fc4a 	bl	8001d76 <HAL_DMA_Init>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 80064e8:	f000 fc3f 	bl	8006d6a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a06      	ldr	r2, [pc, #24]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80064f2:	4a05      	ldr	r2, [pc, #20]	; (8006508 <HAL_ADC_MspInit+0xfc>)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80064f8:	bf00      	nop
 80064fa:	3728      	adds	r7, #40	; 0x28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40021000 	.word	0x40021000
 8006504:	48000400 	.word	0x48000400
 8006508:	2000014c 	.word	0x2000014c
 800650c:	40020008 	.word	0x40020008

08006510 <initAQM1248A>:

#include <stdio.h>
#include <string.h>
#include <stdarg.h>

void initAQM1248A(void) {
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0

	lcdCS(HIGH);
 8006514:	2001      	movs	r0, #1
 8006516:	f002 f871 	bl	80085fc <lcdCS>
	lcdRS(LOW);
 800651a:	2000      	movs	r0, #0
 800651c:	f002 f85e 	bl	80085dc <lcdRS>

	HAL_Delay(3);
 8006520:	2003      	movs	r0, #3
 8006522:	f7fa fbd1 	bl	8000cc8 <HAL_Delay>
	spiWriteAQM1248A(0xAE, RS_OFF); //Display = OFF
 8006526:	2100      	movs	r1, #0
 8006528:	20ae      	movs	r0, #174	; 0xae
 800652a:	f000 f84b 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A(0xA0, RS_OFF); //ADC = normal
 800652e:	2100      	movs	r1, #0
 8006530:	20a0      	movs	r0, #160	; 0xa0
 8006532:	f000 f847 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A(0xC8, RS_OFF); //Common output = reverse
 8006536:	2100      	movs	r1, #0
 8006538:	20c8      	movs	r0, #200	; 0xc8
 800653a:	f000 f843 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A(0xA3, RS_OFF); //bias = 1/7
 800653e:	2100      	movs	r1, #0
 8006540:	20a3      	movs	r0, #163	; 0xa3
 8006542:	f000 f83f 	bl	80065c4 <spiWriteAQM1248A>

	HAL_Delay(3);
 8006546:	2003      	movs	r0, #3
 8006548:	f7fa fbbe 	bl	8000cc8 <HAL_Delay>
	spiWriteAQM1248A(0x2C, RS_OFF); //power control 1
 800654c:	2100      	movs	r1, #0
 800654e:	202c      	movs	r0, #44	; 0x2c
 8006550:	f000 f838 	bl	80065c4 <spiWriteAQM1248A>
	HAL_Delay(3);
 8006554:	2003      	movs	r0, #3
 8006556:	f7fa fbb7 	bl	8000cc8 <HAL_Delay>
	spiWriteAQM1248A(0x2E, RS_OFF); //power control 2
 800655a:	2100      	movs	r1, #0
 800655c:	202e      	movs	r0, #46	; 0x2e
 800655e:	f000 f831 	bl	80065c4 <spiWriteAQM1248A>
	HAL_Delay(3);
 8006562:	2003      	movs	r0, #3
 8006564:	f7fa fbb0 	bl	8000cc8 <HAL_Delay>
	spiWriteAQM1248A(0x2F, RS_OFF); //power control 3
 8006568:	2100      	movs	r1, #0
 800656a:	202f      	movs	r0, #47	; 0x2f
 800656c:	f000 f82a 	bl	80065c4 <spiWriteAQM1248A>

	HAL_Delay(3);
 8006570:	2003      	movs	r0, #3
 8006572:	f7fa fba9 	bl	8000cc8 <HAL_Delay>
	spiWriteAQM1248A(0x23, RS_OFF); //Vo voltage resistor ratio set
 8006576:	2100      	movs	r1, #0
 8006578:	2023      	movs	r0, #35	; 0x23
 800657a:	f000 f823 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A(0x81, RS_OFF); //Electronic volume mode set
 800657e:	2100      	movs	r1, #0
 8006580:	2081      	movs	r0, #129	; 0x81
 8006582:	f000 f81f 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A(0x1C, RS_OFF); //Electronic volume value set
 8006586:	2100      	movs	r1, #0
 8006588:	201c      	movs	r0, #28
 800658a:	f000 f81b 	bl	80065c4 <spiWriteAQM1248A>

	HAL_Delay(3);
 800658e:	2003      	movs	r0, #3
 8006590:	f7fa fb9a 	bl	8000cc8 <HAL_Delay>
	spiWriteAQM1248A(0xA4, RS_OFF); //display all point = normal�i�S�_�����Ȃ��j
 8006594:	2100      	movs	r1, #0
 8006596:	20a4      	movs	r0, #164	; 0xa4
 8006598:	f000 f814 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A(0x40, RS_OFF); //display start line = 0
 800659c:	2100      	movs	r1, #0
 800659e:	2040      	movs	r0, #64	; 0x40
 80065a0:	f000 f810 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A(0xA6, RS_OFF); //Display normal/revers = normal(�������]���Ȃ��j
 80065a4:	2100      	movs	r1, #0
 80065a6:	20a6      	movs	r0, #166	; 0xa6
 80065a8:	f000 f80c 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A(0xAF, RS_OFF); //Display = ON
 80065ac:	2100      	movs	r1, #0
 80065ae:	20af      	movs	r0, #175	; 0xaf
 80065b0:	f000 f808 	bl	80065c4 <spiWriteAQM1248A>

	HAL_Delay(10);
 80065b4:	200a      	movs	r0, #10
 80065b6:	f7fa fb87 	bl	8000cc8 <HAL_Delay>
	displayReset();
 80065ba:	f000 f82d 	bl	8006618 <displayReset>

}
 80065be:	bf00      	nop
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <spiWriteAQM1248A>:

uint8_t spiWriteAQM1248A(uint8_t txData, uint8_t rs) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	460a      	mov	r2, r1
 80065ce:	71fb      	strb	r3, [r7, #7]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71bb      	strb	r3, [r7, #6]

	uint8_t txDataAQM1248A;
	signed int error;

	txDataAQM1248A = txData;
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	72fb      	strb	r3, [r7, #11]

	lcdRS(rs);
 80065d8:	79bb      	ldrb	r3, [r7, #6]
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 fffe 	bl	80085dc <lcdRS>
	lcdCS(LOW);
 80065e0:	2000      	movs	r0, #0
 80065e2:	f002 f80b 	bl	80085fc <lcdCS>
	error = HAL_SPI_Transmit(&hspi1, (uint8_t *) &txDataAQM1248A, 1, 1000);
 80065e6:	f107 010b 	add.w	r1, r7, #11
 80065ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065ee:	2201      	movs	r2, #1
 80065f0:	4808      	ldr	r0, [pc, #32]	; (8006614 <spiWriteAQM1248A+0x50>)
 80065f2:	f7fd fba9 	bl	8003d48 <HAL_SPI_Transmit>
 80065f6:	4603      	mov	r3, r0
 80065f8:	60fb      	str	r3, [r7, #12]
	lcdCS(HIGH);
 80065fa:	2001      	movs	r0, #1
 80065fc:	f001 fffe 	bl	80085fc <lcdCS>

	lcdRS(RS_OFF);
 8006600:	2000      	movs	r0, #0
 8006602:	f001 ffeb 	bl	80085dc <lcdRS>

	return error;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	b2db      	uxtb	r3, r3
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	2000035c 	.word	0x2000035c

08006618 <displayReset>:

void displayReset(void) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0

	uint8_t pageAddress, columnAddress;

	for (pageAddress = 0; pageAddress < 6; pageAddress++) {
 800661e:	2300      	movs	r3, #0
 8006620:	71fb      	strb	r3, [r7, #7]
 8006622:	e01f      	b.n	8006664 <displayReset+0x4c>
		spiWriteAQM1248A((0xB0 | pageAddress), RS_OFF);
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff ffc8 	bl	80065c4 <spiWriteAQM1248A>
		spiWriteAQM1248A(0x10, RS_OFF);
 8006634:	2100      	movs	r1, #0
 8006636:	2010      	movs	r0, #16
 8006638:	f7ff ffc4 	bl	80065c4 <spiWriteAQM1248A>
		spiWriteAQM1248A(0x00, RS_OFF);
 800663c:	2100      	movs	r1, #0
 800663e:	2000      	movs	r0, #0
 8006640:	f7ff ffc0 	bl	80065c4 <spiWriteAQM1248A>
		for (columnAddress = 0; columnAddress < 132; columnAddress++) {
 8006644:	2300      	movs	r3, #0
 8006646:	71bb      	strb	r3, [r7, #6]
 8006648:	e006      	b.n	8006658 <displayReset+0x40>
			spiWriteAQM1248A(0x00, RS_ON);
 800664a:	2101      	movs	r1, #1
 800664c:	2000      	movs	r0, #0
 800664e:	f7ff ffb9 	bl	80065c4 <spiWriteAQM1248A>
		for (columnAddress = 0; columnAddress < 132; columnAddress++) {
 8006652:	79bb      	ldrb	r3, [r7, #6]
 8006654:	3301      	adds	r3, #1
 8006656:	71bb      	strb	r3, [r7, #6]
 8006658:	79bb      	ldrb	r3, [r7, #6]
 800665a:	2b83      	cmp	r3, #131	; 0x83
 800665c:	d9f5      	bls.n	800664a <displayReset+0x32>
	for (pageAddress = 0; pageAddress < 6; pageAddress++) {
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	3301      	adds	r3, #1
 8006662:	71fb      	strb	r3, [r7, #7]
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	2b05      	cmp	r3, #5
 8006668:	d9dc      	bls.n	8006624 <displayReset+0xc>
		}
	}

}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <bigFont>:

void bigFont(uint8_t charCode, uint8_t row, uint8_t column, uint8_t contrast) {
 8006674:	b590      	push	{r4, r7, lr}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	461a      	mov	r2, r3
 8006682:	4623      	mov	r3, r4
 8006684:	71fb      	strb	r3, [r7, #7]
 8006686:	4603      	mov	r3, r0
 8006688:	71bb      	strb	r3, [r7, #6]
 800668a:	460b      	mov	r3, r1
 800668c:	717b      	strb	r3, [r7, #5]
 800668e:	4613      	mov	r3, r2
 8006690:	713b      	strb	r3, [r7, #4]
	unsigned char startColum;
	unsigned char charCodeH, charCodeL;
	unsigned char txData;
	int i;

	startColum = column * 11;
 8006692:	797b      	ldrb	r3, [r7, #5]
 8006694:	461a      	mov	r2, r3
 8006696:	0092      	lsls	r2, r2, #2
 8006698:	441a      	add	r2, r3
 800669a:	0052      	lsls	r2, r2, #1
 800669c:	4413      	add	r3, r2
 800669e:	73fb      	strb	r3, [r7, #15]

	spiWriteAQM1248A((0xB0 | (row * 2)), RS_OFF);
 80066a0:	79bb      	ldrb	r3, [r7, #6]
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff ff86 	bl	80065c4 <spiWriteAQM1248A>

	spiWriteAQM1248A((0x10 | ((startColum & 0xF0) >> 4)), RS_OFF); //���4bit
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	091b      	lsrs	r3, r3, #4
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f043 0310 	orr.w	r3, r3, #16
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff ff7c 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A((0x00 | (startColum & 0x0F)), RS_OFF); //����4bit
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff ff74 	bl	80065c4 <spiWriteAQM1248A>

	for (i = 0; i < 5; i++) {
 80066dc:	2300      	movs	r3, #0
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	e044      	b.n	800676c <bigFont+0xf8>
		charCodeL = (g_Font[charCode][i] & 0x0F);
 80066e2:	79fa      	ldrb	r2, [r7, #7]
 80066e4:	4966      	ldr	r1, [pc, #408]	; (8006880 <bigFont+0x20c>)
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	18ca      	adds	r2, r1, r3
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4413      	add	r3, r2
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	75bb      	strb	r3, [r7, #22]
		if (contrast == 1) {
 80066fa:	793b      	ldrb	r3, [r7, #4]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d102      	bne.n	8006706 <bigFont+0x92>
			charCodeL = ~charCodeL;
 8006700:	7dbb      	ldrb	r3, [r7, #22]
 8006702:	43db      	mvns	r3, r3
 8006704:	75bb      	strb	r3, [r7, #22]
		}
		txData = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	757b      	strb	r3, [r7, #21]
		if ((charCodeL & 0x01) == 0x01) {
 800670a:	7dbb      	ldrb	r3, [r7, #22]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <bigFont+0xa8>
			txData = (txData | 0x03);
 8006714:	7d7b      	ldrb	r3, [r7, #21]
 8006716:	f043 0303 	orr.w	r3, r3, #3
 800671a:	757b      	strb	r3, [r7, #21]
		}
		if ((charCodeL & 0x02) == 0x02) {
 800671c:	7dbb      	ldrb	r3, [r7, #22]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <bigFont+0xba>
			txData = (txData | 0x0C);
 8006726:	7d7b      	ldrb	r3, [r7, #21]
 8006728:	f043 030c 	orr.w	r3, r3, #12
 800672c:	757b      	strb	r3, [r7, #21]
		}
		if ((charCodeL & 0x04) == 0x04) {
 800672e:	7dbb      	ldrb	r3, [r7, #22]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <bigFont+0xcc>
			txData = (txData | 0x30);
 8006738:	7d7b      	ldrb	r3, [r7, #21]
 800673a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800673e:	757b      	strb	r3, [r7, #21]
		}
		if ((charCodeL & 0x08) == 0x08) {
 8006740:	7dbb      	ldrb	r3, [r7, #22]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <bigFont+0xde>
			txData = (txData | 0xC0);
 800674a:	7d7b      	ldrb	r3, [r7, #21]
 800674c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006750:	757b      	strb	r3, [r7, #21]
		}

		spiWriteAQM1248A(txData, RS_ON);
 8006752:	7d7b      	ldrb	r3, [r7, #21]
 8006754:	2101      	movs	r1, #1
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff ff34 	bl	80065c4 <spiWriteAQM1248A>
		spiWriteAQM1248A(txData, RS_ON);
 800675c:	7d7b      	ldrb	r3, [r7, #21]
 800675e:	2101      	movs	r1, #1
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff ff2f 	bl	80065c4 <spiWriteAQM1248A>
	for (i = 0; i < 5; i++) {
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	3301      	adds	r3, #1
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	2b04      	cmp	r3, #4
 8006770:	ddb7      	ble.n	80066e2 <bigFont+0x6e>

	}
	if (contrast == 1) {
 8006772:	793b      	ldrb	r3, [r7, #4]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d104      	bne.n	8006782 <bigFont+0x10e>
		spiWriteAQM1248A(0xFF, RS_ON);
 8006778:	2101      	movs	r1, #1
 800677a:	20ff      	movs	r0, #255	; 0xff
 800677c:	f7ff ff22 	bl	80065c4 <spiWriteAQM1248A>
 8006780:	e003      	b.n	800678a <bigFont+0x116>
	} else {
		spiWriteAQM1248A(0x00, RS_ON);
 8006782:	2101      	movs	r1, #1
 8006784:	2000      	movs	r0, #0
 8006786:	f7ff ff1d 	bl	80065c4 <spiWriteAQM1248A>
	}

	spiWriteAQM1248A((0xB0 | ((row * 2) + 1)), RS_OFF);
 800678a:	79bb      	ldrb	r3, [r7, #6]
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	b2db      	uxtb	r3, r3
 8006790:	3301      	adds	r3, #1
 8006792:	b2db      	uxtb	r3, r3
 8006794:	b25b      	sxtb	r3, r3
 8006796:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800679a:	b25b      	sxtb	r3, r3
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff ff0f 	bl	80065c4 <spiWriteAQM1248A>

	spiWriteAQM1248A((0x10 | ((startColum & 0xF0) >> 4)), RS_OFF); //���4bit
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f043 0310 	orr.w	r3, r3, #16
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff ff05 	bl	80065c4 <spiWriteAQM1248A>
	spiWriteAQM1248A((0x00 | (startColum & 0x0F)), RS_OFF); //����4bit
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2100      	movs	r1, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fefd 	bl	80065c4 <spiWriteAQM1248A>

	for (i = 0; i < 5; i++) {
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	e043      	b.n	8006858 <bigFont+0x1e4>
		charCodeH = ((g_Font[charCode][i] & 0xF0) >> 4);
 80067d0:	79fa      	ldrb	r2, [r7, #7]
 80067d2:	492b      	ldr	r1, [pc, #172]	; (8006880 <bigFont+0x20c>)
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	18ca      	adds	r2, r1, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	091b      	lsrs	r3, r3, #4
 80067e4:	75fb      	strb	r3, [r7, #23]
		if (contrast == 1) {
 80067e6:	793b      	ldrb	r3, [r7, #4]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d102      	bne.n	80067f2 <bigFont+0x17e>
			charCodeH = ~charCodeH;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	43db      	mvns	r3, r3
 80067f0:	75fb      	strb	r3, [r7, #23]
		}
		txData = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	757b      	strb	r3, [r7, #21]
		if ((charCodeH & 0x01) == 0x01) {
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <bigFont+0x194>
			txData = (txData | 0x03);
 8006800:	7d7b      	ldrb	r3, [r7, #21]
 8006802:	f043 0303 	orr.w	r3, r3, #3
 8006806:	757b      	strb	r3, [r7, #21]
		}
		if ((charCodeH & 0x02) == 0x02) {
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <bigFont+0x1a6>
			txData = (txData | 0x0C);
 8006812:	7d7b      	ldrb	r3, [r7, #21]
 8006814:	f043 030c 	orr.w	r3, r3, #12
 8006818:	757b      	strb	r3, [r7, #21]
		}
		if ((charCodeH & 0x04) == 0x04) {
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <bigFont+0x1b8>
			txData = (txData | 0x30);
 8006824:	7d7b      	ldrb	r3, [r7, #21]
 8006826:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800682a:	757b      	strb	r3, [r7, #21]
		}
		if ((charCodeH & 0x08) == 0x08) {
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <bigFont+0x1ca>
			txData = (txData | 0xC0);
 8006836:	7d7b      	ldrb	r3, [r7, #21]
 8006838:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800683c:	757b      	strb	r3, [r7, #21]
		}

		spiWriteAQM1248A(txData, RS_ON);
 800683e:	7d7b      	ldrb	r3, [r7, #21]
 8006840:	2101      	movs	r1, #1
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff febe 	bl	80065c4 <spiWriteAQM1248A>
		spiWriteAQM1248A(txData, RS_ON);
 8006848:	7d7b      	ldrb	r3, [r7, #21]
 800684a:	2101      	movs	r1, #1
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff feb9 	bl	80065c4 <spiWriteAQM1248A>
	for (i = 0; i < 5; i++) {
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3301      	adds	r3, #1
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b04      	cmp	r3, #4
 800685c:	ddb8      	ble.n	80067d0 <bigFont+0x15c>

	}

	if (contrast == 1) {
 800685e:	793b      	ldrb	r3, [r7, #4]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d104      	bne.n	800686e <bigFont+0x1fa>
		spiWriteAQM1248A(0xFF, RS_ON);
 8006864:	2101      	movs	r1, #1
 8006866:	20ff      	movs	r0, #255	; 0xff
 8006868:	f7ff feac 	bl	80065c4 <spiWriteAQM1248A>
	} else {
		spiWriteAQM1248A(0x00, RS_ON);
	}
}
 800686c:	e003      	b.n	8006876 <bigFont+0x202>
		spiWriteAQM1248A(0x00, RS_ON);
 800686e:	2101      	movs	r1, #1
 8006870:	2000      	movs	r0, #0
 8006872:	f7ff fea7 	bl	80065c4 <spiWriteAQM1248A>
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	bd90      	pop	{r4, r7, pc}
 800687e:	bf00      	nop
 8006880:	0800a958 	.word	0x0800a958

08006884 <printLCDString>:

void printLCDString(uint8_t row, uint8_t column, uint8_t contrast,
		char *string) {
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4603      	mov	r3, r0
 800688e:	71fb      	strb	r3, [r7, #7]
 8006890:	460b      	mov	r3, r1
 8006892:	71bb      	strb	r3, [r7, #6]
 8006894:	4613      	mov	r3, r2
 8006896:	717b      	strb	r3, [r7, #5]
	int i;
	i = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]

	while (string[i] != 0) {
 800689c:	e036      	b.n	800690c <printLCDString+0x88>
		bigFont(string[i] - 0x20, row + (column + i) / 11, (column + i) % 11,
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	4413      	add	r3, r2
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	3b20      	subs	r3, #32
 80068a8:	b2d8      	uxtb	r0, r3
 80068aa:	79ba      	ldrb	r2, [r7, #6]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <printLCDString+0xa0>)
 80068b2:	fb82 1203 	smull	r1, r2, r2, r3
 80068b6:	1052      	asrs	r2, r2, #1
 80068b8:	17db      	asrs	r3, r3, #31
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	4413      	add	r3, r2
 80068c2:	b2dc      	uxtb	r4, r3
 80068c4:	79ba      	ldrb	r2, [r7, #6]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	18d1      	adds	r1, r2, r3
 80068ca:	4b16      	ldr	r3, [pc, #88]	; (8006924 <printLCDString+0xa0>)
 80068cc:	fb83 2301 	smull	r2, r3, r3, r1
 80068d0:	105a      	asrs	r2, r3, #1
 80068d2:	17cb      	asrs	r3, r1, #31
 80068d4:	1ad2      	subs	r2, r2, r3
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	4413      	add	r3, r2
 80068e0:	1aca      	subs	r2, r1, r3
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	797b      	ldrb	r3, [r7, #5]
 80068e6:	4621      	mov	r1, r4
 80068e8:	f7ff fec4 	bl	8006674 <bigFont>
				contrast);
		i++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
		if (row + (column + i) / 11 >= 3) {
 80068f2:	79fa      	ldrb	r2, [r7, #7]
 80068f4:	79b9      	ldrb	r1, [r7, #6]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	440b      	add	r3, r1
 80068fa:	490a      	ldr	r1, [pc, #40]	; (8006924 <printLCDString+0xa0>)
 80068fc:	fb81 0103 	smull	r0, r1, r1, r3
 8006900:	1049      	asrs	r1, r1, #1
 8006902:	17db      	asrs	r3, r3, #31
 8006904:	1acb      	subs	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	2b02      	cmp	r3, #2
 800690a:	dc06      	bgt.n	800691a <printLCDString+0x96>
	while (string[i] != 0) {
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	4413      	add	r3, r2
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1c2      	bne.n	800689e <printLCDString+0x1a>
 8006918:	e000      	b.n	800691c <printLCDString+0x98>
			return;
 800691a:	bf00      	nop
		}
	}
}
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	bd90      	pop	{r4, r7, pc}
 8006922:	bf00      	nop
 8006924:	2e8ba2e9 	.word	0x2e8ba2e9

08006928 <printfLCD>:

void printfLCD(uint8_t row, uint8_t column, uint8_t contrast, const char* fmt,
		...) {
 8006928:	b408      	push	{r3}
 800692a:	b590      	push	{r4, r7, lr}
 800692c:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8006930:	af00      	add	r7, sp, #0
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	1dfb      	adds	r3, r7, #7
 800693a:	4622      	mov	r2, r4
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	1dbb      	adds	r3, r7, #6
 8006940:	4602      	mov	r2, r0
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	1d7b      	adds	r3, r7, #5
 8006946:	460a      	mov	r2, r1
 8006948:	701a      	strb	r2, [r3, #0]

	va_list list;
	char buffer[1024];

	va_start(list, fmt);
 800694a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800694e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	vsprintf(buffer, fmt, list);
 8006952:	f107 030c 	add.w	r3, r7, #12
 8006956:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800695a:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 800695e:	4618      	mov	r0, r3
 8006960:	f002 fe70 	bl	8009644 <vsiprintf>

	printLCDString(row, column, contrast, buffer);
 8006964:	f107 040c 	add.w	r4, r7, #12
 8006968:	1d7b      	adds	r3, r7, #5
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	1dbb      	adds	r3, r7, #6
 800696e:	7819      	ldrb	r1, [r3, #0]
 8006970:	1dfb      	adds	r3, r7, #7
 8006972:	7818      	ldrb	r0, [r3, #0]
 8006974:	4623      	mov	r3, r4
 8006976:	f7ff ff85 	bl	8006884 <printLCDString>

	va_end(list);

}
 800697a:	bf00      	nop
 800697c:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8006980:	46bd      	mov	sp, r7
 8006982:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006986:	b001      	add	sp, #4
 8006988:	4770      	bx	lr
	...

0800698c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006992:	4b0c      	ldr	r3, [pc, #48]	; (80069c4 <MX_DMA_Init+0x38>)
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	4a0b      	ldr	r2, [pc, #44]	; (80069c4 <MX_DMA_Init+0x38>)
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	6153      	str	r3, [r2, #20]
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <MX_DMA_Init+0x38>)
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 80069aa:	2200      	movs	r2, #0
 80069ac:	2104      	movs	r1, #4
 80069ae:	200b      	movs	r0, #11
 80069b0:	f7fb f9ab 	bl	8001d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80069b4:	200b      	movs	r0, #11
 80069b6:	f7fb f9c4 	bl	8001d42 <HAL_NVIC_EnableIRQ>

}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40021000 	.word	0x40021000

080069c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ce:	f107 030c 	add.w	r3, r7, #12
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	605a      	str	r2, [r3, #4]
 80069d8:	609a      	str	r2, [r3, #8]
 80069da:	60da      	str	r2, [r3, #12]
 80069dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80069de:	4b4e      	ldr	r3, [pc, #312]	; (8006b18 <MX_GPIO_Init+0x150>)
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	4a4d      	ldr	r2, [pc, #308]	; (8006b18 <MX_GPIO_Init+0x150>)
 80069e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069e8:	6153      	str	r3, [r2, #20]
 80069ea:	4b4b      	ldr	r3, [pc, #300]	; (8006b18 <MX_GPIO_Init+0x150>)
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f2:	60bb      	str	r3, [r7, #8]
 80069f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069f6:	4b48      	ldr	r3, [pc, #288]	; (8006b18 <MX_GPIO_Init+0x150>)
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	4a47      	ldr	r2, [pc, #284]	; (8006b18 <MX_GPIO_Init+0x150>)
 80069fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a00:	6153      	str	r3, [r2, #20]
 8006a02:	4b45      	ldr	r3, [pc, #276]	; (8006b18 <MX_GPIO_Init+0x150>)
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a0e:	4b42      	ldr	r3, [pc, #264]	; (8006b18 <MX_GPIO_Init+0x150>)
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	4a41      	ldr	r2, [pc, #260]	; (8006b18 <MX_GPIO_Init+0x150>)
 8006a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a18:	6153      	str	r3, [r2, #20]
 8006a1a:	4b3f      	ldr	r3, [pc, #252]	; (8006b18 <MX_GPIO_Init+0x150>)
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8006a26:	2200      	movs	r2, #0
 8006a28:	2102      	movs	r1, #2
 8006a2a:	483c      	ldr	r0, [pc, #240]	; (8006b1c <MX_GPIO_Init+0x154>)
 8006a2c:	f7fb fea0 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD__CS_Pin|R_CW_CCW_Pin|L_CW_CCW_Pin, GPIO_PIN_RESET);
 8006a30:	2200      	movs	r2, #0
 8006a32:	f44f 6145 	mov.w	r1, #3152	; 0xc50
 8006a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a3a:	f7fb fe99 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|senLED_center_Pin|senLED_side_Pin|motor_enable_Pin 
 8006a3e:	2200      	movs	r2, #0
 8006a40:	21f8      	movs	r1, #248	; 0xf8
 8006a42:	4837      	ldr	r0, [pc, #220]	; (8006b20 <MX_GPIO_Init+0x158>)
 8006a44:	f7fb fe94 	bl	8002770 <HAL_GPIO_WritePin>
                          |motor_reset_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a58:	f107 030c 	add.w	r3, r7, #12
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	482f      	ldr	r0, [pc, #188]	; (8006b1c <MX_GPIO_Init+0x154>)
 8006a60:	f7fb fcf8 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8006a64:	2310      	movs	r3, #16
 8006a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8006a74:	f107 030c 	add.w	r3, r7, #12
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a7e:	f7fb fce9 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD__CS_Pin;
 8006a82:	2340      	movs	r3, #64	; 0x40
 8006a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a86:	2301      	movs	r3, #1
 8006a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD__CS_GPIO_Port, &GPIO_InitStruct);
 8006a92:	f107 030c 	add.w	r3, r7, #12
 8006a96:	4619      	mov	r1, r3
 8006a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a9c:	f7fb fcda 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWICH1_Pin;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SWICH1_GPIO_Port, &GPIO_InitStruct);
 8006aac:	f107 030c 	add.w	r3, r7, #12
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	481b      	ldr	r0, [pc, #108]	; (8006b20 <MX_GPIO_Init+0x158>)
 8006ab4:	f7fb fcce 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = R_CW_CCW_Pin|L_CW_CCW_Pin;
 8006ab8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aca:	f107 030c 	add.w	r3, r7, #12
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ad4:	f7fb fcbe 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWICH0_Pin;
 8006ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SWICH0_GPIO_Port, &GPIO_InitStruct);
 8006ae6:	f107 030c 	add.w	r3, r7, #12
 8006aea:	4619      	mov	r1, r3
 8006aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006af0:	f7fb fcb0 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|senLED_center_Pin|senLED_side_Pin|motor_enable_Pin 
 8006af4:	23f8      	movs	r3, #248	; 0xf8
 8006af6:	60fb      	str	r3, [r7, #12]
                          |motor_reset_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006af8:	2301      	movs	r3, #1
 8006afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b04:	f107 030c 	add.w	r3, r7, #12
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4805      	ldr	r0, [pc, #20]	; (8006b20 <MX_GPIO_Init+0x158>)
 8006b0c:	f7fb fca2 	bl	8002454 <HAL_GPIO_Init>

}
 8006b10:	bf00      	nop
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	48001400 	.word	0x48001400
 8006b20:	48000400 	.word	0x48000400

08006b24 <leftHandMethod>:
#include "map.h"
#include "gpio.h"
#include "myassign.h"
#include "motor.h"

void leftHandMethod(void) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8006b28:	2064      	movs	r0, #100	; 0x64
 8006b2a:	f7fa f8cd 	bl	8000cc8 <HAL_Delay>
	g_location.x = 0;
 8006b2e:	4b2c      	ldr	r3, [pc, #176]	; (8006be0 <leftHandMethod+0xbc>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	709a      	strb	r2, [r3, #2]
	g_location.y = 0;
 8006b34:	4b2a      	ldr	r3, [pc, #168]	; (8006be0 <leftHandMethod+0xbc>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	70da      	strb	r2, [r3, #3]
	g_location.Direction = 0;
 8006b3a:	4b29      	ldr	r3, [pc, #164]	; (8006be0 <leftHandMethod+0xbc>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	711a      	strb	r2, [r3, #4]
	g_WallThreshold.center = 1;
 8006b40:	4b28      	ldr	r3, [pc, #160]	; (8006be4 <leftHandMethod+0xc0>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	801a      	strh	r2, [r3, #0]
	g_WallThreshold.right = 150;
 8006b46:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <leftHandMethod+0xc0>)
 8006b48:	2296      	movs	r2, #150	; 0x96
 8006b4a:	805a      	strh	r2, [r3, #2]
	g_WallThreshold.left = 65;
 8006b4c:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <leftHandMethod+0xc0>)
 8006b4e:	2241      	movs	r2, #65	; 0x41
 8006b50:	809a      	strh	r2, [r3, #4]

	while (1) {
		if (g_location.x == g_location.x_goal
 8006b52:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <leftHandMethod+0xbc>)
 8006b54:	789a      	ldrb	r2, [r3, #2]
 8006b56:	4b22      	ldr	r3, [pc, #136]	; (8006be0 <leftHandMethod+0xbc>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d105      	bne.n	8006b6a <leftHandMethod+0x46>
				&& g_location.y == g_location.y_goal) { //ゴール座標
 8006b5e:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <leftHandMethod+0xbc>)
 8006b60:	78da      	ldrb	r2, [r3, #3]
 8006b62:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <leftHandMethod+0xbc>)
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d038      	beq.n	8006bdc <leftHandMethod+0xb8>
			break;
		} else {
			motorEnable(1);
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f001 f912 	bl	8007d94 <motorEnable>
			if (g_nowWallSensorValue.left < g_WallThreshold.left) { //左に回る
 8006b70:	4b1d      	ldr	r3, [pc, #116]	; (8006be8 <leftHandMethod+0xc4>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4a1b      	ldr	r2, [pc, #108]	; (8006be4 <leftHandMethod+0xc0>)
 8006b76:	8892      	ldrh	r2, [r2, #4]
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	da08      	bge.n	8006b8e <leftHandMethod+0x6a>
				turnLeft();
 8006b7c:	f001 fc38 	bl	80083f0 <turnLeft>
				setWalltoMap();
 8006b80:	f000 f99e 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 8006b84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b88:	f7fa f89e 	bl	8000cc8 <HAL_Delay>
 8006b8c:	e7e1      	b.n	8006b52 <leftHandMethod+0x2e>
			} else if (g_nowWallSensorValue.center < g_WallThreshold.center) { //まっすぐ進む
 8006b8e:	4b16      	ldr	r3, [pc, #88]	; (8006be8 <leftHandMethod+0xc4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <leftHandMethod+0xc0>)
 8006b94:	8812      	ldrh	r2, [r2, #0]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	da08      	bge.n	8006bac <leftHandMethod+0x88>
				goAhead();
 8006b9a:	f001 fbe9 	bl	8008370 <goAhead>
				setWalltoMap();
 8006b9e:	f000 f98f 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 8006ba2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ba6:	f7fa f88f 	bl	8000cc8 <HAL_Delay>
 8006baa:	e7d2      	b.n	8006b52 <leftHandMethod+0x2e>
			} else if (g_nowWallSensorValue.right < g_WallThreshold.right) { //右に回る
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <leftHandMethod+0xc4>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4a0c      	ldr	r2, [pc, #48]	; (8006be4 <leftHandMethod+0xc0>)
 8006bb2:	8852      	ldrh	r2, [r2, #2]
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	da08      	bge.n	8006bca <leftHandMethod+0xa6>
				turnRight();
 8006bb8:	f001 fc6c 	bl	8008494 <turnRight>
				setWalltoMap();
 8006bbc:	f000 f980 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 8006bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bc4:	f7fa f880 	bl	8000cc8 <HAL_Delay>
 8006bc8:	e7c3      	b.n	8006b52 <leftHandMethod+0x2e>
			} else { //後ろに下がる
				goBack();
 8006bca:	f001 fcb5 	bl	8008538 <goBack>
				setWalltoMap();
 8006bce:	f000 f977 	bl	8006ec0 <setWalltoMap>
				HAL_Delay(500);
 8006bd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bd6:	f7fa f877 	bl	8000cc8 <HAL_Delay>
		if (g_location.x == g_location.x_goal
 8006bda:	e7ba      	b.n	8006b52 <leftHandMethod+0x2e>
			}
		}
	}


}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000190 	.word	0x20000190
 8006be4:	20000198 	.word	0x20000198
 8006be8:	200000c0 	.word	0x200000c0

08006bec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006bf0:	f7fa f804 	bl	8000bfc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006bf4:	f000 f860 	bl	8006cb8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006bf8:	f7ff fee6 	bl	80069c8 <MX_GPIO_Init>
	MX_DMA_Init();
 8006bfc:	f7ff fec6 	bl	800698c <MX_DMA_Init>
	MX_ADC1_Init();
 8006c00:	f7ff fb6c 	bl	80062dc <MX_ADC1_Init>
	MX_SPI1_Init();
 8006c04:	f001 fd2e 	bl	8008664 <MX_SPI1_Init>
	MX_TIM1_Init();
 8006c08:	f002 f952 	bl	8008eb0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8006c0c:	f002 f9e0 	bl	8008fd0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8006c10:	f002 fa38 	bl	8009084 <MX_TIM3_Init>
	MX_TIM6_Init();
 8006c14:	f002 fa84 	bl	8009120 <MX_TIM6_Init>
	MX_USART2_UART_Init();
 8006c18:	f002 fb9e 	bl	8009358 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	initAQM1248A();
 8006c1c:	f7ff fc78 	bl	8006510 <initAQM1248A>
	HAL_TIM_Base_Start_IT(&htim6);
 8006c20:	481e      	ldr	r0, [pc, #120]	; (8006c9c <main+0xb0>)
 8006c22:	f7fd fb30 	bl	8004286 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8006c26:	481e      	ldr	r0, [pc, #120]	; (8006ca0 <main+0xb4>)
 8006c28:	f7fd fb2d 	bl	8004286 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	481c      	ldr	r0, [pc, #112]	; (8006ca0 <main+0xb4>)
 8006c30:	f7fd fb9a 	bl	8004368 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8006c34:	481b      	ldr	r0, [pc, #108]	; (8006ca4 <main+0xb8>)
 8006c36:	f7fd fb26 	bl	8004286 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8006c3a:	2108      	movs	r1, #8
 8006c3c:	4819      	ldr	r0, [pc, #100]	; (8006ca4 <main+0xb8>)
 8006c3e:	f7fd fb93 	bl	8004368 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) g_ADCBuffer, 4);
 8006c42:	2204      	movs	r2, #4
 8006c44:	4918      	ldr	r1, [pc, #96]	; (8006ca8 <main+0xbc>)
 8006c46:	4819      	ldr	r0, [pc, #100]	; (8006cac <main+0xc0>)
 8006c48:	f7fa fa04 	bl	8001054 <HAL_ADC_Start_DMA>
	HAL_Delay(10);
 8006c4c:	200a      	movs	r0, #10
 8006c4e:	f7fa f83b 	bl	8000cc8 <HAL_Delay>
	AD_bat();
 8006c52:	f7ff f8a1 	bl	8005d98 <AD_bat>
	HAL_TIM_Base_Stop_IT(&htim1);
 8006c56:	4812      	ldr	r0, [pc, #72]	; (8006ca0 <main+0xb4>)
 8006c58:	f7fd fb30 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4810      	ldr	r0, [pc, #64]	; (8006ca0 <main+0xb4>)
 8006c60:	f7fd fcb2 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 8006c64:	480f      	ldr	r0, [pc, #60]	; (8006ca4 <main+0xb8>)
 8006c66:	f7fd fb29 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_3);
 8006c6a:	2108      	movs	r1, #8
 8006c6c:	480d      	ldr	r0, [pc, #52]	; (8006ca4 <main+0xb8>)
 8006c6e:	f7fd fcab 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>

	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */

	g_location.x_goal = 2;
 8006c72:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <main+0xc4>)
 8006c74:	2202      	movs	r2, #2
 8006c76:	701a      	strb	r2, [r3, #0]
	g_location.y_goal = 0;
 8006c78:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <main+0xc4>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	705a      	strb	r2, [r3, #1]
	g_WallThreshold.center = 1;
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <main+0xc8>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	801a      	strh	r2, [r3, #0]
	g_WallThreshold.right = 150;
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <main+0xc8>)
 8006c86:	2296      	movs	r2, #150	; 0x96
 8006c88:	805a      	strh	r2, [r3, #2]
	g_WallThreshold.left = 40;
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <main+0xc8>)
 8006c8c:	2228      	movs	r2, #40	; 0x28
 8006c8e:	809a      	strh	r2, [r3, #4]
	modeSelect();
 8006c90:	f000 fdf4 	bl	800787c <modeSelect>
 8006c94:	2300      	movs	r3, #0

	/* USER CODE END 3 */
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000400 	.word	0x20000400
 8006ca0:	20000440 	.word	0x20000440
 8006ca4:	20000484 	.word	0x20000484
 8006ca8:	200000f0 	.word	0x200000f0
 8006cac:	200000f8 	.word	0x200000f8
 8006cb0:	20000190 	.word	0x20000190
 8006cb4:	20000198 	.word	0x20000198

08006cb8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b096      	sub	sp, #88	; 0x58
 8006cbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006cbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cc2:	2228      	movs	r2, #40	; 0x28
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f002 fc0e 	bl	80094e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006ccc:	f107 031c 	add.w	r3, r7, #28
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	609a      	str	r2, [r3, #8]
 8006cd8:	60da      	str	r2, [r3, #12]
 8006cda:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8006cdc:	1d3b      	adds	r3, r7, #4
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	605a      	str	r2, [r3, #4]
 8006ce4:	609a      	str	r2, [r3, #8]
 8006ce6:	60da      	str	r2, [r3, #12]
 8006ce8:	611a      	str	r2, [r3, #16]
 8006cea:	615a      	str	r2, [r3, #20]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006cec:	2302      	movs	r3, #2
 8006cee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8006d00:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8006d04:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006d06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fb fd48 	bl	80027a0 <HAL_RCC_OscConfig>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <SystemClock_Config+0x62>
		Error_Handler();
 8006d16:	f000 f828 	bl	8006d6a <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006d1a:	230f      	movs	r3, #15
 8006d1c:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d22:	2300      	movs	r3, #0
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006d30:	f107 031c 	add.w	r3, r7, #28
 8006d34:	2102      	movs	r1, #2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fc fc20 	bl	800357c <HAL_RCC_ClockConfig>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <SystemClock_Config+0x8e>
		Error_Handler();
 8006d42:	f000 f812 	bl	8006d6a <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8006d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d4a:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fc fe48 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <SystemClock_Config+0xaa>
		Error_Handler();
 8006d5e:	f000 f804 	bl	8006d6a <Error_Handler>
	}
}
 8006d62:	bf00      	nop
 8006d64:	3758      	adds	r7, #88	; 0x58
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006d6a:	b480      	push	{r7}
 8006d6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8006d6e:	bf00      	nop
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <initWall>:
wallThresholdparameter g_WallThreshold;
uint16_t g_WallEW[17];
uint16_t g_WallSN[17];
unsigned char g_stepNumber[16][16];

void initWall(void) {
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
//東西
	g_WallEW[0] = 0xffff;
 8006d7e:	4b1a      	ldr	r3, [pc, #104]	; (8006de8 <initWall+0x70>)
 8006d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d84:	801a      	strh	r2, [r3, #0]
	for (int i = 1; i < 16; i++) {
 8006d86:	2301      	movs	r3, #1
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	e007      	b.n	8006d9c <initWall+0x24>
		g_WallEW[i] = 0x0000;
 8006d8c:	4a16      	ldr	r2, [pc, #88]	; (8006de8 <initWall+0x70>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2100      	movs	r1, #0
 8006d92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 1; i < 16; i++) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	607b      	str	r3, [r7, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b0f      	cmp	r3, #15
 8006da0:	ddf4      	ble.n	8006d8c <initWall+0x14>
	}
	g_WallEW[16] = 0xffff;
 8006da2:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <initWall+0x70>)
 8006da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006da8:	841a      	strh	r2, [r3, #32]

//南北
	g_WallSN[0] = 0xffff;
 8006daa:	4b10      	ldr	r3, [pc, #64]	; (8006dec <initWall+0x74>)
 8006dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006db0:	801a      	strh	r2, [r3, #0]
	g_WallSN[1] = 0x0001;
 8006db2:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <initWall+0x74>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	805a      	strh	r2, [r3, #2]
	for (int i = 2; i < 16; i++) {
 8006db8:	2302      	movs	r3, #2
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	e007      	b.n	8006dce <initWall+0x56>
		g_WallSN[i] = 0x0000;
 8006dbe:	4a0b      	ldr	r2, [pc, #44]	; (8006dec <initWall+0x74>)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 2; i < 16; i++) {
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b0f      	cmp	r3, #15
 8006dd2:	ddf4      	ble.n	8006dbe <initWall+0x46>
	}
	g_WallSN[16] = 0xffff;
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <initWall+0x74>)
 8006dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dda:	841a      	strh	r2, [r3, #32]
} //壁情報初期化
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	200002c4 	.word	0x200002c4
 8006dec:	200001a0 	.word	0x200001a0

08006df0 <setWallBit>:

void setWallBit(uint8_t X, uint8_t Y, uint8_t absDir) {
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4603      	mov	r3, r0
 8006df8:	71fb      	strb	r3, [r7, #7]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	71bb      	strb	r3, [r7, #6]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	717b      	strb	r3, [r7, #5]
	if (absDir == 0) { //北壁を入れる
 8006e02:	797b      	ldrb	r3, [r7, #5]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d113      	bne.n	8006e30 <setWallBit+0x40>
		g_WallEW[Y + 1] |= (1 << X);
 8006e08:	79bb      	ldrb	r3, [r7, #6]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <setWallBit+0xc8>)
 8006e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e12:	b21a      	sxth	r2, r3
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	2101      	movs	r1, #1
 8006e18:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1c:	b21b      	sxth	r3, r3
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b21a      	sxth	r2, r3
 8006e22:	79bb      	ldrb	r3, [r7, #6]
 8006e24:	3301      	adds	r3, #1
 8006e26:	b291      	uxth	r1, r2
 8006e28:	4a23      	ldr	r2, [pc, #140]	; (8006eb8 <setWallBit+0xc8>)
 8006e2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	} else if (absDir == 2) { //南壁を入れる
		g_WallEW[Y] |= (1 << X);
	} else { //東壁を入れる
		g_WallSN[X + 1] |= (1 << Y);
	}
} //壁入れ関数
 8006e2e:	e03c      	b.n	8006eaa <setWallBit+0xba>
	} else if (absDir == 1) { //西壁を入れる
 8006e30:	797b      	ldrb	r3, [r7, #5]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d111      	bne.n	8006e5a <setWallBit+0x6a>
		g_WallSN[X] |= (1 << Y);
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	4a20      	ldr	r2, [pc, #128]	; (8006ebc <setWallBit+0xcc>)
 8006e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e3e:	b21a      	sxth	r2, r3
 8006e40:	79bb      	ldrb	r3, [r7, #6]
 8006e42:	2101      	movs	r1, #1
 8006e44:	fa01 f303 	lsl.w	r3, r1, r3
 8006e48:	b21b      	sxth	r3, r3
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	b21a      	sxth	r2, r3
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	b291      	uxth	r1, r2
 8006e52:	4a1a      	ldr	r2, [pc, #104]	; (8006ebc <setWallBit+0xcc>)
 8006e54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
} //壁入れ関数
 8006e58:	e027      	b.n	8006eaa <setWallBit+0xba>
	} else if (absDir == 2) { //南壁を入れる
 8006e5a:	797b      	ldrb	r3, [r7, #5]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d111      	bne.n	8006e84 <setWallBit+0x94>
		g_WallEW[Y] |= (1 << X);
 8006e60:	79bb      	ldrb	r3, [r7, #6]
 8006e62:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <setWallBit+0xc8>)
 8006e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e68:	b21a      	sxth	r2, r3
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e72:	b21b      	sxth	r3, r3
 8006e74:	4313      	orrs	r3, r2
 8006e76:	b21a      	sxth	r2, r3
 8006e78:	79bb      	ldrb	r3, [r7, #6]
 8006e7a:	b291      	uxth	r1, r2
 8006e7c:	4a0e      	ldr	r2, [pc, #56]	; (8006eb8 <setWallBit+0xc8>)
 8006e7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
} //壁入れ関数
 8006e82:	e012      	b.n	8006eaa <setWallBit+0xba>
		g_WallSN[X + 1] |= (1 << Y);
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	3301      	adds	r3, #1
 8006e88:	4a0c      	ldr	r2, [pc, #48]	; (8006ebc <setWallBit+0xcc>)
 8006e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e8e:	b21a      	sxth	r2, r3
 8006e90:	79bb      	ldrb	r3, [r7, #6]
 8006e92:	2101      	movs	r1, #1
 8006e94:	fa01 f303 	lsl.w	r3, r1, r3
 8006e98:	b21b      	sxth	r3, r3
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	b21a      	sxth	r2, r3
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	b291      	uxth	r1, r2
 8006ea4:	4a05      	ldr	r2, [pc, #20]	; (8006ebc <setWallBit+0xcc>)
 8006ea6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
} //壁入れ関数
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	200002c4 	.word	0x200002c4
 8006ebc:	200001a0 	.word	0x200001a0

08006ec0 <setWalltoMap>:

void setWalltoMap(void) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
	if (g_nowWallSensorValue.left > g_WallThreshold.left) { //左壁の有無
 8006ec4:	4b21      	ldr	r3, [pc, #132]	; (8006f4c <setWalltoMap+0x8c>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <setWalltoMap+0x90>)
 8006eca:	8892      	ldrh	r2, [r2, #4]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	dd11      	ble.n	8006ef4 <setWalltoMap+0x34>
		setWallBit(g_location.x, g_location.y, (g_location.Direction + 1) % 4);
 8006ed0:	4b20      	ldr	r3, [pc, #128]	; (8006f54 <setWalltoMap+0x94>)
 8006ed2:	7898      	ldrb	r0, [r3, #2]
 8006ed4:	4b1f      	ldr	r3, [pc, #124]	; (8006f54 <setWalltoMap+0x94>)
 8006ed6:	78d9      	ldrb	r1, [r3, #3]
 8006ed8:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <setWalltoMap+0x94>)
 8006eda:	791b      	ldrb	r3, [r3, #4]
 8006edc:	3301      	adds	r3, #1
 8006ede:	425a      	negs	r2, r3
 8006ee0:	f003 0303 	and.w	r3, r3, #3
 8006ee4:	f002 0203 	and.w	r2, r2, #3
 8006ee8:	bf58      	it	pl
 8006eea:	4253      	negpl	r3, r2
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7ff ff7e 	bl	8006df0 <setWallBit>
	}
	if (g_nowWallSensorValue.center > g_WallThreshold.center) { //前壁の有無
 8006ef4:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <setWalltoMap+0x8c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a15      	ldr	r2, [pc, #84]	; (8006f50 <setWalltoMap+0x90>)
 8006efa:	8812      	ldrh	r2, [r2, #0]
 8006efc:	4293      	cmp	r3, r2
 8006efe:	dd0b      	ble.n	8006f18 <setWalltoMap+0x58>
		setWallBit(g_location.x, g_location.y, g_location.Direction % 4);
 8006f00:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <setWalltoMap+0x94>)
 8006f02:	7898      	ldrb	r0, [r3, #2]
 8006f04:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <setWalltoMap+0x94>)
 8006f06:	78d9      	ldrb	r1, [r3, #3]
 8006f08:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <setWalltoMap+0x94>)
 8006f0a:	791b      	ldrb	r3, [r3, #4]
 8006f0c:	f003 0303 	and.w	r3, r3, #3
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	f7ff ff6c 	bl	8006df0 <setWallBit>
	}
	if (g_nowWallSensorValue.right > g_WallThreshold.right) { //右壁の有無
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <setWalltoMap+0x8c>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <setWalltoMap+0x90>)
 8006f1e:	8852      	ldrh	r2, [r2, #2]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	dd11      	ble.n	8006f48 <setWalltoMap+0x88>
		setWallBit(g_location.x, g_location.y, (g_location.Direction + 3) % 4);
 8006f24:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <setWalltoMap+0x94>)
 8006f26:	7898      	ldrb	r0, [r3, #2]
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <setWalltoMap+0x94>)
 8006f2a:	78d9      	ldrb	r1, [r3, #3]
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <setWalltoMap+0x94>)
 8006f2e:	791b      	ldrb	r3, [r3, #4]
 8006f30:	3303      	adds	r3, #3
 8006f32:	425a      	negs	r2, r3
 8006f34:	f003 0303 	and.w	r3, r3, #3
 8006f38:	f002 0203 	and.w	r2, r2, #3
 8006f3c:	bf58      	it	pl
 8006f3e:	4253      	negpl	r3, r2
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	f7ff ff54 	bl	8006df0 <setWallBit>
	}
} //壁入れ指示
 8006f48:	bf00      	nop
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	200000c0 	.word	0x200000c0
 8006f50:	20000198 	.word	0x20000198
 8006f54:	20000190 	.word	0x20000190

08006f58 <judgeWall>:

uint8_t judgeWall(uint8_t X, uint8_t Y, uint8_t absDir) {
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	71fb      	strb	r3, [r7, #7]
 8006f62:	460b      	mov	r3, r1
 8006f64:	71bb      	strb	r3, [r7, #6]
 8006f66:	4613      	mov	r3, r2
 8006f68:	717b      	strb	r3, [r7, #5]
	if (absDir == 0) { //北壁
 8006f6a:	797b      	ldrb	r3, [r7, #5]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10d      	bne.n	8006f8c <judgeWall+0x34>
		return (g_WallEW[Y + 1] >> X) & 1;
 8006f70:	79bb      	ldrb	r3, [r7, #6]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4a1f      	ldr	r2, [pc, #124]	; (8006ff4 <judgeWall+0x9c>)
 8006f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	fa42 f303 	asr.w	r3, r2, r3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e02c      	b.n	8006fe6 <judgeWall+0x8e>
	} else if (absDir == 1) { //西壁
 8006f8c:	797b      	ldrb	r3, [r7, #5]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d10c      	bne.n	8006fac <judgeWall+0x54>
		return (g_WallSN[X] >> Y) & 1;
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <judgeWall+0xa0>)
 8006f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	79bb      	ldrb	r3, [r7, #6]
 8006f9e:	fa42 f303 	asr.w	r3, r2, r3
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	e01c      	b.n	8006fe6 <judgeWall+0x8e>
	} else if (absDir == 2) { //南壁
 8006fac:	797b      	ldrb	r3, [r7, #5]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d10c      	bne.n	8006fcc <judgeWall+0x74>
		return (g_WallEW[Y] >> X) & 1;
 8006fb2:	79bb      	ldrb	r3, [r7, #6]
 8006fb4:	4a0f      	ldr	r2, [pc, #60]	; (8006ff4 <judgeWall+0x9c>)
 8006fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	fa42 f303 	asr.w	r3, r2, r3
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	e00c      	b.n	8006fe6 <judgeWall+0x8e>
	} else { //東壁
		return (g_WallSN[X + 1] >> Y) & 1;
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <judgeWall+0xa0>)
 8006fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	79bb      	ldrb	r3, [r7, #6]
 8006fda:	fa42 f303 	asr.w	r3, r2, r3
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	b2db      	uxtb	r3, r3
	}
} //壁の有無を判断
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	200002c4 	.word	0x200002c4
 8006ff8:	200001a0 	.word	0x200001a0

08006ffc <printWall>:

void printWall(void) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
	printf("\r \e[0m\e[1mMAP \n\r");
 8007002:	486f      	ldr	r0, [pc, #444]	; (80071c0 <printWall+0x1c4>)
 8007004:	f002 fa78 	bl	80094f8 <iprintf>
	for (int i = 15; i >= 0; i--) {
 8007008:	230f      	movs	r3, #15
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e0b3      	b.n	8007176 <printWall+0x17a>
		for (int j = 0; j <= 15; j++) { //Y=iの時の北壁
 800700e:	2300      	movs	r3, #0
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	e014      	b.n	800703e <printWall+0x42>
			if (judgeWall(j, i, 0) == 1) {
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	b2d1      	uxtb	r1, r2
 800701c:	2200      	movs	r2, #0
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff ff9a 	bl	8006f58 <judgeWall>
 8007024:	4603      	mov	r3, r0
 8007026:	2b01      	cmp	r3, #1
 8007028:	d103      	bne.n	8007032 <printWall+0x36>
				printf("\e[33m -----");
 800702a:	4866      	ldr	r0, [pc, #408]	; (80071c4 <printWall+0x1c8>)
 800702c:	f002 fa64 	bl	80094f8 <iprintf>
 8007030:	e002      	b.n	8007038 <printWall+0x3c>
			} else {
				printf("\e[30m -----");
 8007032:	4865      	ldr	r0, [pc, #404]	; (80071c8 <printWall+0x1cc>)
 8007034:	f002 fa60 	bl	80094f8 <iprintf>
		for (int j = 0; j <= 15; j++) { //Y=iの時の北壁
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	3301      	adds	r3, #1
 800703c:	60bb      	str	r3, [r7, #8]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b0f      	cmp	r3, #15
 8007042:	dde7      	ble.n	8007014 <printWall+0x18>
			}
		}
		printf("\r\n");
 8007044:	4861      	ldr	r0, [pc, #388]	; (80071cc <printWall+0x1d0>)
 8007046:	f002 fadf 	bl	8009608 <puts>
		for (int j = 0; j <= 15; j++) { //Y=iの時の西壁
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
 800704e:	e078      	b.n	8007142 <printWall+0x146>
			if (judgeWall(j, i, 1) == 1) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	b2d1      	uxtb	r1, r2
 8007058:	2201      	movs	r2, #1
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff ff7c 	bl	8006f58 <judgeWall>
 8007060:	4603      	mov	r3, r0
 8007062:	2b01      	cmp	r3, #1
 8007064:	d135      	bne.n	80070d2 <printWall+0xd6>
				if (g_stepNumber[j][i] < 10) { //一桁なら
 8007066:	4a5a      	ldr	r2, [pc, #360]	; (80071d0 <printWall+0x1d4>)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	441a      	add	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b09      	cmp	r3, #9
 8007076:	d80b      	bhi.n	8007090 <printWall+0x94>
					printf("\e[33m|  \e[30m%d  ", g_stepNumber[j][i]);
 8007078:	4a55      	ldr	r2, [pc, #340]	; (80071d0 <printWall+0x1d4>)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	441a      	add	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	4619      	mov	r1, r3
 8007088:	4852      	ldr	r0, [pc, #328]	; (80071d4 <printWall+0x1d8>)
 800708a:	f002 fa35 	bl	80094f8 <iprintf>
 800708e:	e055      	b.n	800713c <printWall+0x140>
				} else if (g_stepNumber[j][i] < 100) { //二桁なら
 8007090:	4a4f      	ldr	r2, [pc, #316]	; (80071d0 <printWall+0x1d4>)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	441a      	add	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b63      	cmp	r3, #99	; 0x63
 80070a0:	d80b      	bhi.n	80070ba <printWall+0xbe>
					printf("\e[33m|  \e[30m%d ", g_stepNumber[j][i]);
 80070a2:	4a4b      	ldr	r2, [pc, #300]	; (80071d0 <printWall+0x1d4>)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	441a      	add	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	4619      	mov	r1, r3
 80070b2:	4849      	ldr	r0, [pc, #292]	; (80071d8 <printWall+0x1dc>)
 80070b4:	f002 fa20 	bl	80094f8 <iprintf>
 80070b8:	e040      	b.n	800713c <printWall+0x140>
				} else { //三桁なら
					printf("\e[33m| \e[30m%d ", g_stepNumber[j][i]);
 80070ba:	4a45      	ldr	r2, [pc, #276]	; (80071d0 <printWall+0x1d4>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	441a      	add	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	4619      	mov	r1, r3
 80070ca:	4844      	ldr	r0, [pc, #272]	; (80071dc <printWall+0x1e0>)
 80070cc:	f002 fa14 	bl	80094f8 <iprintf>
 80070d0:	e034      	b.n	800713c <printWall+0x140>
				}
			} else {
				if (g_stepNumber[j][i] < 10) { //一桁なら
 80070d2:	4a3f      	ldr	r2, [pc, #252]	; (80071d0 <printWall+0x1d4>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	441a      	add	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d80b      	bhi.n	80070fc <printWall+0x100>
					printf("\e[30m|  \e[30m%d  ", g_stepNumber[j][i]);
 80070e4:	4a3a      	ldr	r2, [pc, #232]	; (80071d0 <printWall+0x1d4>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	441a      	add	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4619      	mov	r1, r3
 80070f4:	483a      	ldr	r0, [pc, #232]	; (80071e0 <printWall+0x1e4>)
 80070f6:	f002 f9ff 	bl	80094f8 <iprintf>
 80070fa:	e01f      	b.n	800713c <printWall+0x140>
				} else if (g_stepNumber[j][i] < 100) { //二桁なら
 80070fc:	4a34      	ldr	r2, [pc, #208]	; (80071d0 <printWall+0x1d4>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	441a      	add	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b63      	cmp	r3, #99	; 0x63
 800710c:	d80b      	bhi.n	8007126 <printWall+0x12a>
					printf("\e[30m|  \e[30m%d ", g_stepNumber[j][i]);
 800710e:	4a30      	ldr	r2, [pc, #192]	; (80071d0 <printWall+0x1d4>)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	441a      	add	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	4619      	mov	r1, r3
 800711e:	4831      	ldr	r0, [pc, #196]	; (80071e4 <printWall+0x1e8>)
 8007120:	f002 f9ea 	bl	80094f8 <iprintf>
 8007124:	e00a      	b.n	800713c <printWall+0x140>
				} else { //三桁なら
					printf("\e[30m| \e[30m%d ", g_stepNumber[j][i]);
 8007126:	4a2a      	ldr	r2, [pc, #168]	; (80071d0 <printWall+0x1d4>)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	441a      	add	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	482c      	ldr	r0, [pc, #176]	; (80071e8 <printWall+0x1ec>)
 8007138:	f002 f9de 	bl	80094f8 <iprintf>
		for (int j = 0; j <= 15; j++) { //Y=iの時の西壁
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3301      	adds	r3, #1
 8007140:	607b      	str	r3, [r7, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b0f      	cmp	r3, #15
 8007146:	dd83      	ble.n	8007050 <printWall+0x54>
				}
			}
		}
		if (judgeWall(15, i, 3) == 1) { //X=15,Y=iの時の東壁
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2203      	movs	r2, #3
 800714e:	4619      	mov	r1, r3
 8007150:	200f      	movs	r0, #15
 8007152:	f7ff ff01 	bl	8006f58 <judgeWall>
 8007156:	4603      	mov	r3, r0
 8007158:	2b01      	cmp	r3, #1
 800715a:	d103      	bne.n	8007164 <printWall+0x168>
			printf("\e[33m|");
 800715c:	4823      	ldr	r0, [pc, #140]	; (80071ec <printWall+0x1f0>)
 800715e:	f002 f9cb 	bl	80094f8 <iprintf>
 8007162:	e002      	b.n	800716a <printWall+0x16e>
		} else {
			printf("\e[30m|");
 8007164:	4822      	ldr	r0, [pc, #136]	; (80071f0 <printWall+0x1f4>)
 8007166:	f002 f9c7 	bl	80094f8 <iprintf>
		}
		printf("\n\r");
 800716a:	4822      	ldr	r0, [pc, #136]	; (80071f4 <printWall+0x1f8>)
 800716c:	f002 f9c4 	bl	80094f8 <iprintf>
	for (int i = 15; i >= 0; i--) {
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3b01      	subs	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f6bf af48 	bge.w	800700e <printWall+0x12>

	}
	printf("\r");
 800717e:	200d      	movs	r0, #13
 8007180:	f002 f9d2 	bl	8009528 <putchar>
	for (int j = 0; j <= 15; j++) { //Y=0の時の南壁---
 8007184:	2300      	movs	r3, #0
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	e00f      	b.n	80071aa <printWall+0x1ae>
		if (judgeWall(j, 0, 2) == 1) {
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2202      	movs	r2, #2
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff fee0 	bl	8006f58 <judgeWall>
 8007198:	4603      	mov	r3, r0
 800719a:	2b01      	cmp	r3, #1
 800719c:	d102      	bne.n	80071a4 <printWall+0x1a8>
			printf("\e[33m -----");
 800719e:	4809      	ldr	r0, [pc, #36]	; (80071c4 <printWall+0x1c8>)
 80071a0:	f002 f9aa 	bl	80094f8 <iprintf>
	for (int j = 0; j <= 15; j++) { //Y=0の時の南壁---
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	3301      	adds	r3, #1
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b0f      	cmp	r3, #15
 80071ae:	ddec      	ble.n	800718a <printWall+0x18e>
		} else {

		}
	}
	printf("\n");
 80071b0:	200a      	movs	r0, #10
 80071b2:	f002 f9b9 	bl	8009528 <putchar>
} //壁情報吐き出し
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	0800a7fc 	.word	0x0800a7fc
 80071c4:	0800a810 	.word	0x0800a810
 80071c8:	0800a81c 	.word	0x0800a81c
 80071cc:	0800a828 	.word	0x0800a828
 80071d0:	200001c4 	.word	0x200001c4
 80071d4:	0800a82c 	.word	0x0800a82c
 80071d8:	0800a840 	.word	0x0800a840
 80071dc:	0800a854 	.word	0x0800a854
 80071e0:	0800a864 	.word	0x0800a864
 80071e4:	0800a878 	.word	0x0800a878
 80071e8:	0800a88c 	.word	0x0800a88c
 80071ec:	0800a89c 	.word	0x0800a89c
 80071f0:	0800a8a4 	.word	0x0800a8a4
 80071f4:	0800a8ac 	.word	0x0800a8ac

080071f8 <initStepMap>:

void initStepMap(void) {
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 16; i++) {
 80071fe:	2300      	movs	r3, #0
 8007200:	71fb      	strb	r3, [r7, #7]
 8007202:	e013      	b.n	800722c <initStepMap+0x34>
		for (uint8_t j = 0; j < 16; j++) {
 8007204:	2300      	movs	r3, #0
 8007206:	71bb      	strb	r3, [r7, #6]
 8007208:	e00a      	b.n	8007220 <initStepMap+0x28>
			g_stepNumber[i][j] = 255;
 800720a:	79fa      	ldrb	r2, [r7, #7]
 800720c:	79bb      	ldrb	r3, [r7, #6]
 800720e:	490c      	ldr	r1, [pc, #48]	; (8007240 <initStepMap+0x48>)
 8007210:	0112      	lsls	r2, r2, #4
 8007212:	440a      	add	r2, r1
 8007214:	4413      	add	r3, r2
 8007216:	22ff      	movs	r2, #255	; 0xff
 8007218:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 16; j++) {
 800721a:	79bb      	ldrb	r3, [r7, #6]
 800721c:	3301      	adds	r3, #1
 800721e:	71bb      	strb	r3, [r7, #6]
 8007220:	79bb      	ldrb	r3, [r7, #6]
 8007222:	2b0f      	cmp	r3, #15
 8007224:	d9f1      	bls.n	800720a <initStepMap+0x12>
	for (uint8_t i = 0; i < 16; i++) {
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	3301      	adds	r3, #1
 800722a:	71fb      	strb	r3, [r7, #7]
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	2b0f      	cmp	r3, #15
 8007230:	d9e8      	bls.n	8007204 <initStepMap+0xc>
		}
	}

} //歩数マップ初期化
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	200001c4 	.word	0x200001c4

08007244 <StepMapforAdachi>:

void StepMapforAdachi(void) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
	uint8_t x_map;
	uint8_t y_map;
	g_stepNumber[g_location.x_goal][g_location.y_goal] = 0;
 800724a:	4b61      	ldr	r3, [pc, #388]	; (80073d0 <StepMapforAdachi+0x18c>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	4b5f      	ldr	r3, [pc, #380]	; (80073d0 <StepMapforAdachi+0x18c>)
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	4619      	mov	r1, r3
 8007256:	4a5f      	ldr	r2, [pc, #380]	; (80073d4 <StepMapforAdachi+0x190>)
 8007258:	0103      	lsls	r3, r0, #4
 800725a:	4413      	add	r3, r2
 800725c:	440b      	add	r3, r1
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]

	for (uint8_t k = 0; k < 256; k++) { //自分の今いる位置まで展開する
 8007262:	2300      	movs	r3, #0
 8007264:	71fb      	strb	r3, [r7, #7]
		if (g_stepNumber[g_location.x][g_location.y] != 255) {
 8007266:	4b5a      	ldr	r3, [pc, #360]	; (80073d0 <StepMapforAdachi+0x18c>)
 8007268:	789b      	ldrb	r3, [r3, #2]
 800726a:	4618      	mov	r0, r3
 800726c:	4b58      	ldr	r3, [pc, #352]	; (80073d0 <StepMapforAdachi+0x18c>)
 800726e:	78db      	ldrb	r3, [r3, #3]
 8007270:	4619      	mov	r1, r3
 8007272:	4a58      	ldr	r2, [pc, #352]	; (80073d4 <StepMapforAdachi+0x190>)
 8007274:	0103      	lsls	r3, r0, #4
 8007276:	4413      	add	r3, r2
 8007278:	440b      	add	r3, r1
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2bff      	cmp	r3, #255	; 0xff
 800727e:	f040 80a2 	bne.w	80073c6 <StepMapforAdachi+0x182>
			break;
		} else {
			for (uint8_t j = 0; j < 16; j++) {
 8007282:	2300      	movs	r3, #0
 8007284:	71bb      	strb	r3, [r7, #6]
 8007286:	e096      	b.n	80073b6 <StepMapforAdachi+0x172>
				for (uint8_t i = 0; i < 16; i++) {
 8007288:	2300      	movs	r3, #0
 800728a:	717b      	strb	r3, [r7, #5]
 800728c:	e08c      	b.n	80073a8 <StepMapforAdachi+0x164>
					if (g_stepNumber[i][j] == k) {
 800728e:	797a      	ldrb	r2, [r7, #5]
 8007290:	79bb      	ldrb	r3, [r7, #6]
 8007292:	4950      	ldr	r1, [pc, #320]	; (80073d4 <StepMapforAdachi+0x190>)
 8007294:	0112      	lsls	r2, r2, #4
 8007296:	440a      	add	r2, r1
 8007298:	4413      	add	r3, r2
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	79fa      	ldrb	r2, [r7, #7]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d17f      	bne.n	80073a2 <StepMapforAdachi+0x15e>
						x_map = i;
 80072a2:	797b      	ldrb	r3, [r7, #5]
 80072a4:	713b      	strb	r3, [r7, #4]
						y_map = j;
 80072a6:	79bb      	ldrb	r3, [r7, #6]
 80072a8:	70fb      	strb	r3, [r7, #3]
						if (judgeWall(x_map, y_map, 0) == 0) { //北壁がなければ
 80072aa:	78f9      	ldrb	r1, [r7, #3]
 80072ac:	793b      	ldrb	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff fe51 	bl	8006f58 <judgeWall>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d115      	bne.n	80072e8 <StepMapforAdachi+0xa4>
							if (g_stepNumber[x_map][y_map + 1] == 255) {
 80072bc:	793a      	ldrb	r2, [r7, #4]
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	3301      	adds	r3, #1
 80072c2:	4944      	ldr	r1, [pc, #272]	; (80073d4 <StepMapforAdachi+0x190>)
 80072c4:	0112      	lsls	r2, r2, #4
 80072c6:	440a      	add	r2, r1
 80072c8:	4413      	add	r3, r2
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2bff      	cmp	r3, #255	; 0xff
 80072ce:	d10b      	bne.n	80072e8 <StepMapforAdachi+0xa4>
								g_stepNumber[x_map][y_map + 1] = k + 1;
 80072d0:	793a      	ldrb	r2, [r7, #4]
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	3301      	adds	r3, #1
 80072d6:	79f9      	ldrb	r1, [r7, #7]
 80072d8:	3101      	adds	r1, #1
 80072da:	b2c8      	uxtb	r0, r1
 80072dc:	493d      	ldr	r1, [pc, #244]	; (80073d4 <StepMapforAdachi+0x190>)
 80072de:	0112      	lsls	r2, r2, #4
 80072e0:	440a      	add	r2, r1
 80072e2:	4413      	add	r3, r2
 80072e4:	4602      	mov	r2, r0
 80072e6:	701a      	strb	r2, [r3, #0]
							}
						}
						if (judgeWall(x_map, y_map, 1) == 0) { //西壁がなければ
 80072e8:	78f9      	ldrb	r1, [r7, #3]
 80072ea:	793b      	ldrb	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fe32 	bl	8006f58 <judgeWall>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d115      	bne.n	8007326 <StepMapforAdachi+0xe2>
							if (g_stepNumber[x_map - 1][y_map] == 255) {
 80072fa:	793b      	ldrb	r3, [r7, #4]
 80072fc:	1e5a      	subs	r2, r3, #1
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	4934      	ldr	r1, [pc, #208]	; (80073d4 <StepMapforAdachi+0x190>)
 8007302:	0112      	lsls	r2, r2, #4
 8007304:	440a      	add	r2, r1
 8007306:	4413      	add	r3, r2
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2bff      	cmp	r3, #255	; 0xff
 800730c:	d10b      	bne.n	8007326 <StepMapforAdachi+0xe2>
								g_stepNumber[x_map - 1][y_map] = k + 1;
 800730e:	793b      	ldrb	r3, [r7, #4]
 8007310:	1e5a      	subs	r2, r3, #1
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	79f9      	ldrb	r1, [r7, #7]
 8007316:	3101      	adds	r1, #1
 8007318:	b2c8      	uxtb	r0, r1
 800731a:	492e      	ldr	r1, [pc, #184]	; (80073d4 <StepMapforAdachi+0x190>)
 800731c:	0112      	lsls	r2, r2, #4
 800731e:	440a      	add	r2, r1
 8007320:	4413      	add	r3, r2
 8007322:	4602      	mov	r2, r0
 8007324:	701a      	strb	r2, [r3, #0]
							}
						}
						if (judgeWall(x_map, y_map, 2) == 0) { //南壁がなければ
 8007326:	78f9      	ldrb	r1, [r7, #3]
 8007328:	793b      	ldrb	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	4618      	mov	r0, r3
 800732e:	f7ff fe13 	bl	8006f58 <judgeWall>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d115      	bne.n	8007364 <StepMapforAdachi+0x120>
							if (g_stepNumber[x_map][y_map - 1] == 255) {
 8007338:	793a      	ldrb	r2, [r7, #4]
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	3b01      	subs	r3, #1
 800733e:	4925      	ldr	r1, [pc, #148]	; (80073d4 <StepMapforAdachi+0x190>)
 8007340:	0112      	lsls	r2, r2, #4
 8007342:	440a      	add	r2, r1
 8007344:	4413      	add	r3, r2
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2bff      	cmp	r3, #255	; 0xff
 800734a:	d10b      	bne.n	8007364 <StepMapforAdachi+0x120>
								g_stepNumber[x_map][y_map - 1] = k + 1;
 800734c:	793a      	ldrb	r2, [r7, #4]
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	3b01      	subs	r3, #1
 8007352:	79f9      	ldrb	r1, [r7, #7]
 8007354:	3101      	adds	r1, #1
 8007356:	b2c8      	uxtb	r0, r1
 8007358:	491e      	ldr	r1, [pc, #120]	; (80073d4 <StepMapforAdachi+0x190>)
 800735a:	0112      	lsls	r2, r2, #4
 800735c:	440a      	add	r2, r1
 800735e:	4413      	add	r3, r2
 8007360:	4602      	mov	r2, r0
 8007362:	701a      	strb	r2, [r3, #0]
							}
						}
						if (judgeWall(x_map, y_map, 3) == 0) { //東壁がなければ
 8007364:	78f9      	ldrb	r1, [r7, #3]
 8007366:	793b      	ldrb	r3, [r7, #4]
 8007368:	2203      	movs	r2, #3
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff fdf4 	bl	8006f58 <judgeWall>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d115      	bne.n	80073a2 <StepMapforAdachi+0x15e>
							if (g_stepNumber[x_map + 1][y_map] == 255) {
 8007376:	793b      	ldrb	r3, [r7, #4]
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	4915      	ldr	r1, [pc, #84]	; (80073d4 <StepMapforAdachi+0x190>)
 800737e:	0112      	lsls	r2, r2, #4
 8007380:	440a      	add	r2, r1
 8007382:	4413      	add	r3, r2
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2bff      	cmp	r3, #255	; 0xff
 8007388:	d10b      	bne.n	80073a2 <StepMapforAdachi+0x15e>
								g_stepNumber[x_map + 1][y_map] = k + 1;
 800738a:	793b      	ldrb	r3, [r7, #4]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	79f9      	ldrb	r1, [r7, #7]
 8007392:	3101      	adds	r1, #1
 8007394:	b2c8      	uxtb	r0, r1
 8007396:	490f      	ldr	r1, [pc, #60]	; (80073d4 <StepMapforAdachi+0x190>)
 8007398:	0112      	lsls	r2, r2, #4
 800739a:	440a      	add	r2, r1
 800739c:	4413      	add	r3, r2
 800739e:	4602      	mov	r2, r0
 80073a0:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < 16; i++) {
 80073a2:	797b      	ldrb	r3, [r7, #5]
 80073a4:	3301      	adds	r3, #1
 80073a6:	717b      	strb	r3, [r7, #5]
 80073a8:	797b      	ldrb	r3, [r7, #5]
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	f67f af6f 	bls.w	800728e <StepMapforAdachi+0x4a>
			for (uint8_t j = 0; j < 16; j++) {
 80073b0:	79bb      	ldrb	r3, [r7, #6]
 80073b2:	3301      	adds	r3, #1
 80073b4:	71bb      	strb	r3, [r7, #6]
 80073b6:	79bb      	ldrb	r3, [r7, #6]
 80073b8:	2b0f      	cmp	r3, #15
 80073ba:	f67f af65 	bls.w	8007288 <StepMapforAdachi+0x44>
	for (uint8_t k = 0; k < 256; k++) { //自分の今いる位置まで展開する
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	3301      	adds	r3, #1
 80073c2:	71fb      	strb	r3, [r7, #7]
		if (g_stepNumber[g_location.x][g_location.y] != 255) {
 80073c4:	e74f      	b.n	8007266 <StepMapforAdachi+0x22>
			break;
 80073c6:	bf00      	nop
					}
				}
			}
		}
	}
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000190 	.word	0x20000190
 80073d4:	200001c4 	.word	0x200001c4

080073d8 <compareStep>:

uint8_t compareStep(uint8_t X, uint8_t Y, uint8_t absDir) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	71fb      	strb	r3, [r7, #7]
 80073e2:	460b      	mov	r3, r1
 80073e4:	71bb      	strb	r3, [r7, #6]
 80073e6:	4613      	mov	r3, r2
 80073e8:	717b      	strb	r3, [r7, #5]

	uint16_t front_StepNumber = 65535; //今向いてる方向の歩数
 80073ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073ee:	81fb      	strh	r3, [r7, #14]
	uint16_t left_StepNumber = 65535; //今向いてる方向の左の歩数
 80073f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073f4:	81bb      	strh	r3, [r7, #12]
	uint16_t right_StepNumber = 65535; //今向いてる方向の右の歩数
 80073f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073fa:	817b      	strh	r3, [r7, #10]
	uint8_t minStepNumberDir; //0=前に進む，1=左に進む，2=右に進む
	if (absDir % 4 == 0) { //北を向いていたら
 80073fc:	797b      	ldrb	r3, [r7, #5]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d146      	bne.n	8007496 <compareStep+0xbe>
		if (judgeWall(X, Y, 0) == 0) { //前壁がなければ
 8007408:	79b9      	ldrb	r1, [r7, #6]
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	2200      	movs	r2, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fda2 	bl	8006f58 <judgeWall>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <compareStep+0x56>
			front_StepNumber = g_stepNumber[X][Y + 1];
 800741a:	79fa      	ldrb	r2, [r7, #7]
 800741c:	79bb      	ldrb	r3, [r7, #6]
 800741e:	3301      	adds	r3, #1
 8007420:	49aa      	ldr	r1, [pc, #680]	; (80076cc <compareStep+0x2f4>)
 8007422:	0112      	lsls	r2, r2, #4
 8007424:	440a      	add	r2, r1
 8007426:	4413      	add	r3, r2
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	81fb      	strh	r3, [r7, #14]
 800742c:	e002      	b.n	8007434 <compareStep+0x5c>
		} else {
			front_StepNumber = 65535;
 800742e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007432:	81fb      	strh	r3, [r7, #14]
		}
		if (judgeWall(X, Y, 1) == 0) { //左壁がなければ
 8007434:	79b9      	ldrb	r1, [r7, #6]
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	2201      	movs	r2, #1
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff fd8c 	bl	8006f58 <judgeWall>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10d      	bne.n	8007462 <compareStep+0x8a>
			if (X - 1 >= 0) {
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	3b01      	subs	r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	db0c      	blt.n	8007468 <compareStep+0x90>
				left_StepNumber = g_stepNumber[X - 1][Y];
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	1e5a      	subs	r2, r3, #1
 8007452:	79bb      	ldrb	r3, [r7, #6]
 8007454:	499d      	ldr	r1, [pc, #628]	; (80076cc <compareStep+0x2f4>)
 8007456:	0112      	lsls	r2, r2, #4
 8007458:	440a      	add	r2, r1
 800745a:	4413      	add	r3, r2
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	81bb      	strh	r3, [r7, #12]
 8007460:	e002      	b.n	8007468 <compareStep+0x90>
			}
		} else {
			left_StepNumber = 65535;
 8007462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007466:	81bb      	strh	r3, [r7, #12]
		}
		if (judgeWall(X, Y, 3) == 0) { //右壁がなければ
 8007468:	79b9      	ldrb	r1, [r7, #6]
 800746a:	79fb      	ldrb	r3, [r7, #7]
 800746c:	2203      	movs	r2, #3
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fd72 	bl	8006f58 <judgeWall>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <compareStep+0xb6>
			right_StepNumber = g_stepNumber[X + 1][Y];
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	79bb      	ldrb	r3, [r7, #6]
 8007480:	4992      	ldr	r1, [pc, #584]	; (80076cc <compareStep+0x2f4>)
 8007482:	0112      	lsls	r2, r2, #4
 8007484:	440a      	add	r2, r1
 8007486:	4413      	add	r3, r2
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	817b      	strh	r3, [r7, #10]
 800748c:	e0eb      	b.n	8007666 <compareStep+0x28e>
		} else {
			right_StepNumber = 65535;
 800748e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007492:	817b      	strh	r3, [r7, #10]
 8007494:	e0e7      	b.n	8007666 <compareStep+0x28e>
		}
	} else if (absDir % 4 == 1) { //西を向いていたら
 8007496:	797b      	ldrb	r3, [r7, #5]
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d14a      	bne.n	8007538 <compareStep+0x160>
		if (judgeWall(X, Y, 1) == 0) { //前壁がなければ
 80074a2:	79b9      	ldrb	r1, [r7, #6]
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	2201      	movs	r2, #1
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff fd55 	bl	8006f58 <judgeWall>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10d      	bne.n	80074d0 <compareStep+0xf8>
			if (X - 1 >= 0) {
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	db0c      	blt.n	80074d6 <compareStep+0xfe>
				front_StepNumber = g_stepNumber[X - 1][Y];
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	1e5a      	subs	r2, r3, #1
 80074c0:	79bb      	ldrb	r3, [r7, #6]
 80074c2:	4982      	ldr	r1, [pc, #520]	; (80076cc <compareStep+0x2f4>)
 80074c4:	0112      	lsls	r2, r2, #4
 80074c6:	440a      	add	r2, r1
 80074c8:	4413      	add	r3, r2
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	81fb      	strh	r3, [r7, #14]
 80074ce:	e002      	b.n	80074d6 <compareStep+0xfe>
			}
		} else {
			front_StepNumber = 65535;
 80074d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074d4:	81fb      	strh	r3, [r7, #14]
		}
		if (judgeWall(X, Y, 2) == 0) { //左壁がなければ
 80074d6:	79b9      	ldrb	r1, [r7, #6]
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2202      	movs	r2, #2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fd3b 	bl	8006f58 <judgeWall>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10d      	bne.n	8007504 <compareStep+0x12c>
			if (Y - 1 >= 0) {
 80074e8:	79bb      	ldrb	r3, [r7, #6]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	db0c      	blt.n	800750a <compareStep+0x132>
				left_StepNumber = g_stepNumber[X][Y - 1];
 80074f0:	79fa      	ldrb	r2, [r7, #7]
 80074f2:	79bb      	ldrb	r3, [r7, #6]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	4975      	ldr	r1, [pc, #468]	; (80076cc <compareStep+0x2f4>)
 80074f8:	0112      	lsls	r2, r2, #4
 80074fa:	440a      	add	r2, r1
 80074fc:	4413      	add	r3, r2
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	81bb      	strh	r3, [r7, #12]
 8007502:	e002      	b.n	800750a <compareStep+0x132>
			}
		} else {
			left_StepNumber = 65535;
 8007504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007508:	81bb      	strh	r3, [r7, #12]
		}
		if (judgeWall(X, Y, 0) == 0) { //右壁がなければ
 800750a:	79b9      	ldrb	r1, [r7, #6]
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2200      	movs	r2, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff fd21 	bl	8006f58 <judgeWall>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d109      	bne.n	8007530 <compareStep+0x158>
			right_StepNumber = g_stepNumber[X][Y + 1];
 800751c:	79fa      	ldrb	r2, [r7, #7]
 800751e:	79bb      	ldrb	r3, [r7, #6]
 8007520:	3301      	adds	r3, #1
 8007522:	496a      	ldr	r1, [pc, #424]	; (80076cc <compareStep+0x2f4>)
 8007524:	0112      	lsls	r2, r2, #4
 8007526:	440a      	add	r2, r1
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	817b      	strh	r3, [r7, #10]
 800752e:	e09a      	b.n	8007666 <compareStep+0x28e>
		} else {
			right_StepNumber = 65535;
 8007530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007534:	817b      	strh	r3, [r7, #10]
 8007536:	e096      	b.n	8007666 <compareStep+0x28e>
		}
	} else if (absDir % 4 == 2) { //南を向いていたら
 8007538:	797b      	ldrb	r3, [r7, #5]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b02      	cmp	r3, #2
 8007542:	d14a      	bne.n	80075da <compareStep+0x202>
		if (judgeWall(X, Y, 2) == 0) { //前壁がなければ
 8007544:	79b9      	ldrb	r1, [r7, #6]
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	2202      	movs	r2, #2
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff fd04 	bl	8006f58 <judgeWall>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10d      	bne.n	8007572 <compareStep+0x19a>
			if (Y - 1 >= 0) {
 8007556:	79bb      	ldrb	r3, [r7, #6]
 8007558:	3b01      	subs	r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	db0c      	blt.n	8007578 <compareStep+0x1a0>
				front_StepNumber = g_stepNumber[X][Y - 1];
 800755e:	79fa      	ldrb	r2, [r7, #7]
 8007560:	79bb      	ldrb	r3, [r7, #6]
 8007562:	3b01      	subs	r3, #1
 8007564:	4959      	ldr	r1, [pc, #356]	; (80076cc <compareStep+0x2f4>)
 8007566:	0112      	lsls	r2, r2, #4
 8007568:	440a      	add	r2, r1
 800756a:	4413      	add	r3, r2
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	81fb      	strh	r3, [r7, #14]
 8007570:	e002      	b.n	8007578 <compareStep+0x1a0>
			}
		} else {
			front_StepNumber = 65535;
 8007572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007576:	81fb      	strh	r3, [r7, #14]
		}
		if (judgeWall(X, Y, 3) == 0) { //左壁がなければ
 8007578:	79b9      	ldrb	r1, [r7, #6]
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	2203      	movs	r2, #3
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fcea 	bl	8006f58 <judgeWall>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <compareStep+0x1c6>
			left_StepNumber = g_stepNumber[X + 1][Y];
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	79bb      	ldrb	r3, [r7, #6]
 8007590:	494e      	ldr	r1, [pc, #312]	; (80076cc <compareStep+0x2f4>)
 8007592:	0112      	lsls	r2, r2, #4
 8007594:	440a      	add	r2, r1
 8007596:	4413      	add	r3, r2
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	81bb      	strh	r3, [r7, #12]
 800759c:	e002      	b.n	80075a4 <compareStep+0x1cc>
		} else {
			left_StepNumber = 65535;
 800759e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075a2:	81bb      	strh	r3, [r7, #12]
		}
		if (judgeWall(X, Y, 1) == 0) { //右壁がなければ
 80075a4:	79b9      	ldrb	r1, [r7, #6]
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	2201      	movs	r2, #1
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7ff fcd4 	bl	8006f58 <judgeWall>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10d      	bne.n	80075d2 <compareStep+0x1fa>
			if (X - 1 >= 0) {
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	db53      	blt.n	8007666 <compareStep+0x28e>
				right_StepNumber = g_stepNumber[X - 1][Y];
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	1e5a      	subs	r2, r3, #1
 80075c2:	79bb      	ldrb	r3, [r7, #6]
 80075c4:	4941      	ldr	r1, [pc, #260]	; (80076cc <compareStep+0x2f4>)
 80075c6:	0112      	lsls	r2, r2, #4
 80075c8:	440a      	add	r2, r1
 80075ca:	4413      	add	r3, r2
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	817b      	strh	r3, [r7, #10]
 80075d0:	e049      	b.n	8007666 <compareStep+0x28e>
			}
		} else {
			right_StepNumber = 65535;
 80075d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075d6:	817b      	strh	r3, [r7, #10]
 80075d8:	e045      	b.n	8007666 <compareStep+0x28e>
		}
	} else { //東を向いていたら
		if (judgeWall(X, Y, 3) == 0) { //前壁がなければ
 80075da:	79b9      	ldrb	r1, [r7, #6]
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	2203      	movs	r2, #3
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff fcb9 	bl	8006f58 <judgeWall>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <compareStep+0x228>
			front_StepNumber = g_stepNumber[X + 1][Y];
 80075ec:	79fb      	ldrb	r3, [r7, #7]
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	79bb      	ldrb	r3, [r7, #6]
 80075f2:	4936      	ldr	r1, [pc, #216]	; (80076cc <compareStep+0x2f4>)
 80075f4:	0112      	lsls	r2, r2, #4
 80075f6:	440a      	add	r2, r1
 80075f8:	4413      	add	r3, r2
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	81fb      	strh	r3, [r7, #14]
 80075fe:	e002      	b.n	8007606 <compareStep+0x22e>
		} else {
			front_StepNumber = 65535;
 8007600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007604:	81fb      	strh	r3, [r7, #14]
		}
		if (judgeWall(X, Y, 0) == 0) { //左壁がなければ
 8007606:	79b9      	ldrb	r1, [r7, #6]
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	2200      	movs	r2, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff fca3 	bl	8006f58 <judgeWall>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d109      	bne.n	800762c <compareStep+0x254>
			left_StepNumber = g_stepNumber[X][Y + 1];
 8007618:	79fa      	ldrb	r2, [r7, #7]
 800761a:	79bb      	ldrb	r3, [r7, #6]
 800761c:	3301      	adds	r3, #1
 800761e:	492b      	ldr	r1, [pc, #172]	; (80076cc <compareStep+0x2f4>)
 8007620:	0112      	lsls	r2, r2, #4
 8007622:	440a      	add	r2, r1
 8007624:	4413      	add	r3, r2
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	81bb      	strh	r3, [r7, #12]
 800762a:	e002      	b.n	8007632 <compareStep+0x25a>
		} else {
			left_StepNumber = 65535;
 800762c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007630:	81bb      	strh	r3, [r7, #12]
		}
		if (judgeWall(X, Y, 2) == 0) { //右壁がなければ
 8007632:	79b9      	ldrb	r1, [r7, #6]
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	2202      	movs	r2, #2
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fc8d 	bl	8006f58 <judgeWall>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10d      	bne.n	8007660 <compareStep+0x288>
			if (Y - 1 >= 0) {
 8007644:	79bb      	ldrb	r3, [r7, #6]
 8007646:	3b01      	subs	r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	db0c      	blt.n	8007666 <compareStep+0x28e>
				right_StepNumber = g_stepNumber[X][Y - 1];
 800764c:	79fa      	ldrb	r2, [r7, #7]
 800764e:	79bb      	ldrb	r3, [r7, #6]
 8007650:	3b01      	subs	r3, #1
 8007652:	491e      	ldr	r1, [pc, #120]	; (80076cc <compareStep+0x2f4>)
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	440a      	add	r2, r1
 8007658:	4413      	add	r3, r2
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	817b      	strh	r3, [r7, #10]
 800765e:	e002      	b.n	8007666 <compareStep+0x28e>
			}
		} else {
			right_StepNumber = 65535;
 8007660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007664:	817b      	strh	r3, [r7, #10]
		}
	}

	if (front_StepNumber < right_StepNumber
 8007666:	89fa      	ldrh	r2, [r7, #14]
 8007668:	897b      	ldrh	r3, [r7, #10]
 800766a:	429a      	cmp	r2, r3
 800766c:	d206      	bcs.n	800767c <compareStep+0x2a4>
			&& front_StepNumber < left_StepNumber) { //前が一番小さい
 800766e:	89fa      	ldrh	r2, [r7, #14]
 8007670:	89bb      	ldrh	r3, [r7, #12]
 8007672:	429a      	cmp	r2, r3
 8007674:	d202      	bcs.n	800767c <compareStep+0x2a4>
		minStepNumberDir = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	727b      	strb	r3, [r7, #9]
 800767a:	e032      	b.n	80076e2 <compareStep+0x30a>
	} else if (left_StepNumber < right_StepNumber
 800767c:	89ba      	ldrh	r2, [r7, #12]
 800767e:	897b      	ldrh	r3, [r7, #10]
 8007680:	429a      	cmp	r2, r3
 8007682:	d206      	bcs.n	8007692 <compareStep+0x2ba>
			&& left_StepNumber < front_StepNumber) { //左が一番小さい
 8007684:	89ba      	ldrh	r2, [r7, #12]
 8007686:	89fb      	ldrh	r3, [r7, #14]
 8007688:	429a      	cmp	r2, r3
 800768a:	d202      	bcs.n	8007692 <compareStep+0x2ba>
		minStepNumberDir = 1;
 800768c:	2301      	movs	r3, #1
 800768e:	727b      	strb	r3, [r7, #9]
 8007690:	e027      	b.n	80076e2 <compareStep+0x30a>
	} else if (right_StepNumber < left_StepNumber
 8007692:	897a      	ldrh	r2, [r7, #10]
 8007694:	89bb      	ldrh	r3, [r7, #12]
 8007696:	429a      	cmp	r2, r3
 8007698:	d206      	bcs.n	80076a8 <compareStep+0x2d0>
			&& right_StepNumber < front_StepNumber) { //右が一番小さい
 800769a:	897a      	ldrh	r2, [r7, #10]
 800769c:	89fb      	ldrh	r3, [r7, #14]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d202      	bcs.n	80076a8 <compareStep+0x2d0>
		minStepNumberDir = 2;
 80076a2:	2302      	movs	r3, #2
 80076a4:	727b      	strb	r3, [r7, #9]
 80076a6:	e01c      	b.n	80076e2 <compareStep+0x30a>
	} else if (left_StepNumber == right_StepNumber
 80076a8:	89ba      	ldrh	r2, [r7, #12]
 80076aa:	897b      	ldrh	r3, [r7, #10]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d106      	bne.n	80076be <compareStep+0x2e6>
			&& left_StepNumber == front_StepNumber) { //全方向同じだった場合
 80076b0:	89ba      	ldrh	r2, [r7, #12]
 80076b2:	89fb      	ldrh	r3, [r7, #14]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d102      	bne.n	80076be <compareStep+0x2e6>
		minStepNumberDir = 3;
 80076b8:	2303      	movs	r3, #3
 80076ba:	727b      	strb	r3, [r7, #9]
 80076bc:	e011      	b.n	80076e2 <compareStep+0x30a>
	} else if (right_StepNumber == front_StepNumber) { //前と右が同じ
 80076be:	897a      	ldrh	r2, [r7, #10]
 80076c0:	89fb      	ldrh	r3, [r7, #14]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d104      	bne.n	80076d0 <compareStep+0x2f8>
		minStepNumberDir = 4;
 80076c6:	2304      	movs	r3, #4
 80076c8:	727b      	strb	r3, [r7, #9]
 80076ca:	e00a      	b.n	80076e2 <compareStep+0x30a>
 80076cc:	200001c4 	.word	0x200001c4
	} else if (left_StepNumber == front_StepNumber) { //前と左が同じ
 80076d0:	89ba      	ldrh	r2, [r7, #12]
 80076d2:	89fb      	ldrh	r3, [r7, #14]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d102      	bne.n	80076de <compareStep+0x306>
		minStepNumberDir = 5;
 80076d8:	2305      	movs	r3, #5
 80076da:	727b      	strb	r3, [r7, #9]
 80076dc:	e001      	b.n	80076e2 <compareStep+0x30a>
	} else { //右と左が同じ
		minStepNumberDir = 6;
 80076de:	2306      	movs	r3, #6
 80076e0:	727b      	strb	r3, [r7, #9]
	}
	return minStepNumberDir;
 80076e2:	7a7b      	ldrb	r3, [r7, #9]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <saveMapFlash>:

void saveMapFlash(uint32_t addr) {
 80076ec:	b590      	push	{r4, r7, lr}
 80076ee:	b089      	sub	sp, #36	; 0x24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef r;

	int i;
	const uint8_t MAZESIZEMAX = 17;
 80076f8:	2311      	movs	r3, #17
 80076fa:	76fb      	strb	r3, [r7, #27]

	//FLASH Unlock
	HAL_FLASH_Unlock();
 80076fc:	f7fa fd42 	bl	8002184 <HAL_FLASH_Unlock>

	//Page Erase
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8007700:	2300      	movs	r3, #0
 8007702:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.PageAddress = addr;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]

	r = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800770c:	f107 0208 	add.w	r2, r7, #8
 8007710:	f107 030c 	add.w	r3, r7, #12
 8007714:	4611      	mov	r1, r2
 8007716:	4618      	mov	r0, r3
 8007718:	f7fa fdf8 	bl	800230c <HAL_FLASHEx_Erase>
 800771c:	4603      	mov	r3, r0
 800771e:	76bb      	strb	r3, [r7, #26]

	if (r == HAL_OK) {
 8007720:	7ebb      	ldrb	r3, [r7, #26]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d108      	bne.n	8007738 <saveMapFlash+0x4c>
		printf("Page Erase OK\r\n");
 8007726:	482f      	ldr	r0, [pc, #188]	; (80077e4 <saveMapFlash+0xf8>)
 8007728:	f001 ff6e 	bl	8009608 <puts>
		HAL_FLASH_Lock();

		return;
	}

	printf("Write SN Wall\r\n");
 800772c:	482e      	ldr	r0, [pc, #184]	; (80077e8 <saveMapFlash+0xfc>)
 800772e:	f001 ff6b 	bl	8009608 <puts>
	for (i = 0; i < MAZESIZEMAX; i++) {
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	e021      	b.n	800777c <saveMapFlash+0x90>
		HAL_FLASH_Lock();
 8007738:	f7fa fd4a 	bl	80021d0 <HAL_FLASH_Lock>
 800773c:	e04e      	b.n	80077dc <saveMapFlash+0xf0>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
				(uint16_t) (addr + sizeof(uint16_t) * i),
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	b29a      	uxth	r2, r3
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	b29b      	uxth	r3, r3
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	b29b      	uxth	r3, r3
 800774a:	4413      	add	r3, r2
 800774c:	b29b      	uxth	r3, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800774e:	4618      	mov	r0, r3
				(uint16_t) g_WallSN[(i % MAZESIZEMAX)]);
 8007750:	7efa      	ldrb	r2, [r7, #27]
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	fb93 f1f2 	sdiv	r1, r3, r2
 8007758:	fb02 f201 	mul.w	r2, r2, r1
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	4a23      	ldr	r2, [pc, #140]	; (80077ec <saveMapFlash+0x100>)
 8007760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8007764:	b29b      	uxth	r3, r3
 8007766:	f04f 0400 	mov.w	r4, #0
 800776a:	461a      	mov	r2, r3
 800776c:	4623      	mov	r3, r4
 800776e:	4601      	mov	r1, r0
 8007770:	2001      	movs	r0, #1
 8007772:	f7fa fc97 	bl	80020a4 <HAL_FLASH_Program>
	for (i = 0; i < MAZESIZEMAX; i++) {
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	3301      	adds	r3, #1
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	7efb      	ldrb	r3, [r7, #27]
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	429a      	cmp	r2, r3
 8007782:	dbdc      	blt.n	800773e <saveMapFlash+0x52>
	}

	printf("Write EW Wall\n");
 8007784:	481a      	ldr	r0, [pc, #104]	; (80077f0 <saveMapFlash+0x104>)
 8007786:	f001 ff3f 	bl	8009608 <puts>
	for (i = MAZESIZEMAX; i < 2 * MAZESIZEMAX; i++) {
 800778a:	7efb      	ldrb	r3, [r7, #27]
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	e01e      	b.n	80077ce <saveMapFlash+0xe2>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
				(uint16_t) (addr + sizeof(uint16_t) * i),
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	b29a      	uxth	r2, r3
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	b29b      	uxth	r3, r3
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	b29b      	uxth	r3, r3
 800779c:	4413      	add	r3, r2
 800779e:	b29b      	uxth	r3, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80077a0:	4618      	mov	r0, r3
				(uint16_t) g_WallEW[(i % MAZESIZEMAX)]);
 80077a2:	7efa      	ldrb	r2, [r7, #27]
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80077aa:	fb02 f201 	mul.w	r2, r2, r1
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	4a10      	ldr	r2, [pc, #64]	; (80077f4 <saveMapFlash+0x108>)
 80077b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f04f 0400 	mov.w	r4, #0
 80077bc:	461a      	mov	r2, r3
 80077be:	4623      	mov	r3, r4
 80077c0:	4601      	mov	r1, r0
 80077c2:	2001      	movs	r0, #1
 80077c4:	f7fa fc6e 	bl	80020a4 <HAL_FLASH_Program>
	for (i = MAZESIZEMAX; i < 2 * MAZESIZEMAX; i++) {
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	3301      	adds	r3, #1
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	7efb      	ldrb	r3, [r7, #27]
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	dbdb      	blt.n	8007790 <saveMapFlash+0xa4>
	}

//FLASH Lock
	HAL_FLASH_Lock();
 80077d8:	f7fa fcfa 	bl	80021d0 <HAL_FLASH_Lock>

} //フラッシュに書き込み
 80077dc:	3724      	adds	r7, #36	; 0x24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd90      	pop	{r4, r7, pc}
 80077e2:	bf00      	nop
 80077e4:	0800a8b0 	.word	0x0800a8b0
 80077e8:	0800a8c0 	.word	0x0800a8c0
 80077ec:	200001a0 	.word	0x200001a0
 80077f0:	0800a8d0 	.word	0x0800a8d0
 80077f4:	200002c4 	.word	0x200002c4

080077f8 <loadMapFlash>:

void loadMapFlash(uint32_t addr) {
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
	uint32_t add;
	uint16_t* p;
	uint32_t i = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
	i = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]
	for (add = addr; add < (addr + sizeof(g_WallSN)); add += 2) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	e00d      	b.n	800782a <loadMapFlash+0x32>
		p = (uint16_t*) add;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	60fb      	str	r3, [r7, #12]
		g_WallSN[i] = *p;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8819      	ldrh	r1, [r3, #0]
 8007816:	4a17      	ldr	r2, [pc, #92]	; (8007874 <loadMapFlash+0x7c>)
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i++;  // add data pointer
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3301      	adds	r3, #1
 8007822:	613b      	str	r3, [r7, #16]
	for (add = addr; add < (addr + sizeof(g_WallSN)); add += 2) {
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	3302      	adds	r3, #2
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3322      	adds	r3, #34	; 0x22
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	429a      	cmp	r2, r3
 8007832:	d3ec      	bcc.n	800780e <loadMapFlash+0x16>

	}
	i = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	613b      	str	r3, [r7, #16]
	for (add = (addr + sizeof(g_WallSN)); add < (addr + 2 * sizeof(g_WallSN));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3322      	adds	r3, #34	; 0x22
 800783c:	617b      	str	r3, [r7, #20]
 800783e:	e00d      	b.n	800785c <loadMapFlash+0x64>
			add += 2) {
		p = (uint16_t*) add;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	60fb      	str	r3, [r7, #12]
		g_WallEW[i] = *p;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8819      	ldrh	r1, [r3, #0]
 8007848:	4a0b      	ldr	r2, [pc, #44]	; (8007878 <loadMapFlash+0x80>)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i++;  // add data pointer
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3301      	adds	r3, #1
 8007854:	613b      	str	r3, [r7, #16]
			add += 2) {
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	3302      	adds	r3, #2
 800785a:	617b      	str	r3, [r7, #20]
	for (add = (addr + sizeof(g_WallSN)); add < (addr + 2 * sizeof(g_WallSN));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3344      	adds	r3, #68	; 0x44
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	429a      	cmp	r2, r3
 8007864:	d3ec      	bcc.n	8007840 <loadMapFlash+0x48>
	}
}  //フラッシュ読み出し
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	200001a0 	.word	0x200001a0
 8007878:	200002c4 	.word	0x200002c4

0800787c <modeSelect>:
#include "adachiMethod.h"
#include "map.h"
#include "ad.h"
#include <stdint.h>

void modeSelect(void) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
	uint8_t mode;
	uint8_t select;
	for (uint8_t i = 0; i <= 3; i++) {
 8007882:	2300      	movs	r3, #0
 8007884:	717b      	strb	r3, [r7, #5]
 8007886:	e0c6      	b.n	8007a16 <modeSelect+0x19a>
		select = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	71bb      	strb	r3, [r7, #6]
		if (i == 0) { //モードセレクト
 800788c:	797b      	ldrb	r3, [r7, #5]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d133      	bne.n	80078fa <modeSelect+0x7e>
			printfLCD(0, 0, BLACK, "           ");
 8007892:	4b8f      	ldr	r3, [pc, #572]	; (8007ad0 <modeSelect+0x254>)
 8007894:	2201      	movs	r2, #1
 8007896:	2100      	movs	r1, #0
 8007898:	2000      	movs	r0, #0
 800789a:	f7ff f845 	bl	8006928 <printfLCD>
			printfLCD(1, 0, WHITE, "MODE SELECT");
 800789e:	4b8d      	ldr	r3, [pc, #564]	; (8007ad4 <modeSelect+0x258>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	2100      	movs	r1, #0
 80078a4:	2001      	movs	r0, #1
 80078a6:	f7ff f83f 	bl	8006928 <printfLCD>
			printfLCD(2, 0, BLACK, "           ");
 80078aa:	4b89      	ldr	r3, [pc, #548]	; (8007ad0 <modeSelect+0x254>)
 80078ac:	2201      	movs	r2, #1
 80078ae:	2100      	movs	r1, #0
 80078b0:	2002      	movs	r0, #2
 80078b2:	f7ff f839 	bl	8006928 <printfLCD>
			while (select == 0) {
 80078b6:	e01c      	b.n	80078f2 <modeSelect+0x76>
				if (HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_12) == 0) { //次のモード画面に LOW
 80078b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80078bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078c0:	f7fa ff3e 	bl	8002740 <HAL_GPIO_ReadPin>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <modeSelect+0x5c>
					HAL_Delay(300);
 80078ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80078ce:	f7f9 f9fb 	bl	8000cc8 <HAL_Delay>
					select = 1;
 80078d2:	2301      	movs	r3, #1
 80078d4:	71bb      	strb	r3, [r7, #6]
 80078d6:	e00c      	b.n	80078f2 <modeSelect+0x76>
				} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0) { //次のモード画面に LOW
 80078d8:	2101      	movs	r1, #1
 80078da:	487f      	ldr	r0, [pc, #508]	; (8007ad8 <modeSelect+0x25c>)
 80078dc:	f7fa ff30 	bl	8002740 <HAL_GPIO_ReadPin>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d105      	bne.n	80078f2 <modeSelect+0x76>
					HAL_Delay(300);
 80078e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80078ea:	f7f9 f9ed 	bl	8000cc8 <HAL_Delay>
					select = 1;
 80078ee:	2301      	movs	r3, #1
 80078f0:	71bb      	strb	r3, [r7, #6]
			while (select == 0) {
 80078f2:	79bb      	ldrb	r3, [r7, #6]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0df      	beq.n	80078b8 <modeSelect+0x3c>
 80078f8:	e08a      	b.n	8007a10 <modeSelect+0x194>
				} else {

				}
			}
		} else if (i == 1) { //足立法
 80078fa:	797b      	ldrb	r3, [r7, #5]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d12b      	bne.n	8007958 <modeSelect+0xdc>
			printfLCD(1, 0, WHITE, "!  ADCHI  !");
 8007900:	4b76      	ldr	r3, [pc, #472]	; (8007adc <modeSelect+0x260>)
 8007902:	2200      	movs	r2, #0
 8007904:	2100      	movs	r1, #0
 8007906:	2001      	movs	r0, #1
 8007908:	f7ff f80e 	bl	8006928 <printfLCD>

			while (select == 0) {
 800790c:	e020      	b.n	8007950 <modeSelect+0xd4>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0) { //次のモード画面に LOW
 800790e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007916:	f7fa ff13 	bl	8002740 <HAL_GPIO_ReadPin>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d106      	bne.n	800792e <modeSelect+0xb2>
					HAL_Delay(300);
 8007920:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007924:	f7f9 f9d0 	bl	8000cc8 <HAL_Delay>
					select = 1;
 8007928:	2301      	movs	r3, #1
 800792a:	71bb      	strb	r3, [r7, #6]
 800792c:	e010      	b.n	8007950 <modeSelect+0xd4>
				} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0) { //足立法スタート LOW
 800792e:	2101      	movs	r1, #1
 8007930:	4869      	ldr	r0, [pc, #420]	; (8007ad8 <modeSelect+0x25c>)
 8007932:	f7fa ff05 	bl	8002740 <HAL_GPIO_ReadPin>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d109      	bne.n	8007950 <modeSelect+0xd4>
					HAL_Delay(300);
 800793c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007940:	f7f9 f9c2 	bl	8000cc8 <HAL_Delay>
					mode = 1;
 8007944:	2301      	movs	r3, #1
 8007946:	71fb      	strb	r3, [r7, #7]
					i = 3;
 8007948:	2303      	movs	r3, #3
 800794a:	717b      	strb	r3, [r7, #5]
					select = 1;
 800794c:	2301      	movs	r3, #1
 800794e:	71bb      	strb	r3, [r7, #6]
			while (select == 0) {
 8007950:	79bb      	ldrb	r3, [r7, #6]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0db      	beq.n	800790e <modeSelect+0x92>
 8007956:	e05b      	b.n	8007a10 <modeSelect+0x194>
				} else {
				}
			}

		} else if (i == 2) {
 8007958:	797b      	ldrb	r3, [r7, #5]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d12b      	bne.n	80079b6 <modeSelect+0x13a>
			printfLCD(1, 0, WHITE, "!   MAP   !");
 800795e:	4b60      	ldr	r3, [pc, #384]	; (8007ae0 <modeSelect+0x264>)
 8007960:	2200      	movs	r2, #0
 8007962:	2100      	movs	r1, #0
 8007964:	2001      	movs	r0, #1
 8007966:	f7fe ffdf 	bl	8006928 <printfLCD>
			while (select == 0) {
 800796a:	e020      	b.n	80079ae <modeSelect+0x132>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0) { //次のモード画面に LOW
 800796c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007974:	f7fa fee4 	bl	8002740 <HAL_GPIO_ReadPin>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <modeSelect+0x110>
					HAL_Delay(300);
 800797e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007982:	f7f9 f9a1 	bl	8000cc8 <HAL_Delay>
					select = 1;
 8007986:	2301      	movs	r3, #1
 8007988:	71bb      	strb	r3, [r7, #6]
 800798a:	e010      	b.n	80079ae <modeSelect+0x132>
				} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0) { //マップ表示 LOW
 800798c:	2101      	movs	r1, #1
 800798e:	4852      	ldr	r0, [pc, #328]	; (8007ad8 <modeSelect+0x25c>)
 8007990:	f7fa fed6 	bl	8002740 <HAL_GPIO_ReadPin>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d109      	bne.n	80079ae <modeSelect+0x132>
					HAL_Delay(300);
 800799a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800799e:	f7f9 f993 	bl	8000cc8 <HAL_Delay>
					mode = 2;
 80079a2:	2302      	movs	r3, #2
 80079a4:	71fb      	strb	r3, [r7, #7]
					i = 3;
 80079a6:	2303      	movs	r3, #3
 80079a8:	717b      	strb	r3, [r7, #5]
					select = 1;
 80079aa:	2301      	movs	r3, #1
 80079ac:	71bb      	strb	r3, [r7, #6]
			while (select == 0) {
 80079ae:	79bb      	ldrb	r3, [r7, #6]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0db      	beq.n	800796c <modeSelect+0xf0>
 80079b4:	e02c      	b.n	8007a10 <modeSelect+0x194>
				} else {
				}
			}

		} else { //左手法
			printfLCD(1, 0, WHITE, "! HIDARTE !");
 80079b6:	4b4b      	ldr	r3, [pc, #300]	; (8007ae4 <modeSelect+0x268>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	2100      	movs	r1, #0
 80079bc:	2001      	movs	r0, #1
 80079be:	f7fe ffb3 	bl	8006928 <printfLCD>
			while (select == 0) {
 80079c2:	e022      	b.n	8007a0a <modeSelect+0x18e>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0) { //次のモード画面に LOW
 80079c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079cc:	f7fa feb8 	bl	8002740 <HAL_GPIO_ReadPin>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d108      	bne.n	80079e8 <modeSelect+0x16c>
					HAL_Delay(300);
 80079d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80079da:	f7f9 f975 	bl	8000cc8 <HAL_Delay>
					i = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	717b      	strb	r3, [r7, #5]
					select = 1;
 80079e2:	2301      	movs	r3, #1
 80079e4:	71bb      	strb	r3, [r7, #6]
 80079e6:	e010      	b.n	8007a0a <modeSelect+0x18e>
				} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0) { //マップ表示 LOW
 80079e8:	2101      	movs	r1, #1
 80079ea:	483b      	ldr	r0, [pc, #236]	; (8007ad8 <modeSelect+0x25c>)
 80079ec:	f7fa fea8 	bl	8002740 <HAL_GPIO_ReadPin>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <modeSelect+0x18e>
					HAL_Delay(300);
 80079f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80079fa:	f7f9 f965 	bl	8000cc8 <HAL_Delay>
					mode = 3;
 80079fe:	2303      	movs	r3, #3
 8007a00:	71fb      	strb	r3, [r7, #7]
					i = 3;
 8007a02:	2303      	movs	r3, #3
 8007a04:	717b      	strb	r3, [r7, #5]
					select = 1;
 8007a06:	2301      	movs	r3, #1
 8007a08:	71bb      	strb	r3, [r7, #6]
			while (select == 0) {
 8007a0a:	79bb      	ldrb	r3, [r7, #6]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0d9      	beq.n	80079c4 <modeSelect+0x148>
	for (uint8_t i = 0; i <= 3; i++) {
 8007a10:	797b      	ldrb	r3, [r7, #5]
 8007a12:	3301      	adds	r3, #1
 8007a14:	717b      	strb	r3, [r7, #5]
 8007a16:	797b      	ldrb	r3, [r7, #5]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	f67f af35 	bls.w	8007888 <modeSelect+0xc>
				}
			}
		}
	}

	if (mode == 1) { //ADACH
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d11a      	bne.n	8007a5a <modeSelect+0x1de>
		printfLCD(1, 0, WHITE, "!  ADACHI !");
 8007a24:	4b30      	ldr	r3, [pc, #192]	; (8007ae8 <modeSelect+0x26c>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	2100      	movs	r1, #0
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	f7fe ff7c 	bl	8006928 <printfLCD>
		printfLCD(2, 0, BLACK, "   START!   ");
 8007a30:	4b2e      	ldr	r3, [pc, #184]	; (8007aec <modeSelect+0x270>)
 8007a32:	2201      	movs	r2, #1
 8007a34:	2100      	movs	r1, #0
 8007a36:	2002      	movs	r0, #2
 8007a38:	f7fe ff76 	bl	8006928 <printfLCD>
		g_sensorLEDFlag = 1;
 8007a3c:	4b2c      	ldr	r3, [pc, #176]	; (8007af0 <modeSelect+0x274>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 8007a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a46:	f7f9 f93f 	bl	8000cc8 <HAL_Delay>
		initWall();
 8007a4a:	f7ff f995 	bl	8006d78 <initWall>
		adachi();
 8007a4e:	f7fe faed 	bl	800602c <adachi>
		saveMapFlash(0x0800f800);
 8007a52:	4828      	ldr	r0, [pc, #160]	; (8007af4 <modeSelect+0x278>)
 8007a54:	f7ff fe4a 	bl	80076ec <saveMapFlash>
		initWall();
		leftHandMethod();
		saveMapFlash(0x0800f800);
	}

}
 8007a58:	e036      	b.n	8007ac8 <modeSelect+0x24c>
	} else if (mode == 2) { //MAP
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d119      	bne.n	8007a94 <modeSelect+0x218>
		printfLCD(1, 0, WHITE, "!   MAP   !");
 8007a60:	4b1f      	ldr	r3, [pc, #124]	; (8007ae0 <modeSelect+0x264>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	2100      	movs	r1, #0
 8007a66:	2001      	movs	r0, #1
 8007a68:	f7fe ff5e 	bl	8006928 <printfLCD>
		printfLCD(2, 0, BLACK, "   START!   ");
 8007a6c:	4b1f      	ldr	r3, [pc, #124]	; (8007aec <modeSelect+0x270>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	2100      	movs	r1, #0
 8007a72:	2002      	movs	r0, #2
 8007a74:	f7fe ff58 	bl	8006928 <printfLCD>
		HAL_Delay(500);
 8007a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a7c:	f7f9 f924 	bl	8000cc8 <HAL_Delay>
		loadMapFlash(0x0800f800);
 8007a80:	481c      	ldr	r0, [pc, #112]	; (8007af4 <modeSelect+0x278>)
 8007a82:	f7ff feb9 	bl	80077f8 <loadMapFlash>
		initStepMap();
 8007a86:	f7ff fbb7 	bl	80071f8 <initStepMap>
		StepMapforAdachi();
 8007a8a:	f7ff fbdb 	bl	8007244 <StepMapforAdachi>
		printWall();
 8007a8e:	f7ff fab5 	bl	8006ffc <printWall>
}
 8007a92:	e019      	b.n	8007ac8 <modeSelect+0x24c>
		printfLCD(1, 0, WHITE, "! HIDARTE !");
 8007a94:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <modeSelect+0x268>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	2100      	movs	r1, #0
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	f7fe ff44 	bl	8006928 <printfLCD>
		printfLCD(2, 0, BLACK, "   START!   ");
 8007aa0:	4b12      	ldr	r3, [pc, #72]	; (8007aec <modeSelect+0x270>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	2002      	movs	r0, #2
 8007aa8:	f7fe ff3e 	bl	8006928 <printfLCD>
		g_sensorLEDFlag = 1;
 8007aac:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <modeSelect+0x274>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 8007ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ab6:	f7f9 f907 	bl	8000cc8 <HAL_Delay>
		initWall();
 8007aba:	f7ff f95d 	bl	8006d78 <initWall>
		leftHandMethod();
 8007abe:	f7ff f831 	bl	8006b24 <leftHandMethod>
		saveMapFlash(0x0800f800);
 8007ac2:	480c      	ldr	r0, [pc, #48]	; (8007af4 <modeSelect+0x278>)
 8007ac4:	f7ff fe12 	bl	80076ec <saveMapFlash>
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	0800a8e0 	.word	0x0800a8e0
 8007ad4:	0800a8ec 	.word	0x0800a8ec
 8007ad8:	48000400 	.word	0x48000400
 8007adc:	0800a8f8 	.word	0x0800a8f8
 8007ae0:	0800a904 	.word	0x0800a904
 8007ae4:	0800a910 	.word	0x0800a910
 8007ae8:	0800a91c 	.word	0x0800a91c
 8007aec:	0800a928 	.word	0x0800a928
 8007af0:	200000ec 	.word	0x200000ec
 8007af4:	0800f800 	.word	0x0800f800

08007af8 <rightcalPWMCount>:

const uint8_t tireDia = 52; //定数
const float dT = 0.001;
tarparameter g_targetTrans;

uint16_t rightcalPWMCount(float wvel_r) {
 8007af8:	b5b0      	push	{r4, r5, r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t PWMCount;
	if ((fabs(g_targetTrans.wvel_r) > 0.0)
 8007b02:	4b37      	ldr	r3, [pc, #220]	; (8007be0 <rightcalPWMCount+0xe8>)
 8007b04:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b08:	eef0 7ae7 	vabs.f32	s15, s15
 8007b0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b14:	dd52      	ble.n	8007bbc <rightcalPWMCount+0xc4>
			&& ((8000000 * 0.9 * (3.141592653 / 180) * (tireDia / 2))
 8007b16:	2334      	movs	r3, #52	; 0x34
 8007b18:	085b      	lsrs	r3, r3, #1
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7f8 fcf9 	bl	8000514 <__aeabi_i2d>
 8007b22:	a32b      	add	r3, pc, #172	; (adr r3, 8007bd0 <rightcalPWMCount+0xd8>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f7f8 fd5e 	bl	80005e8 <__aeabi_dmul>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	4625      	mov	r5, r4
 8007b32:	461c      	mov	r4, r3
					/ fabs(g_targetTrans.wvel_r) < UINT16_MAX)) {
 8007b34:	4b2a      	ldr	r3, [pc, #168]	; (8007be0 <rightcalPWMCount+0xe8>)
 8007b36:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b3a:	eef0 7ae7 	vabs.f32	s15, s15
 8007b3e:	ee17 0a90 	vmov	r0, s15
 8007b42:	f7f8 fcf9 	bl	8000538 <__aeabi_f2d>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f7f8 fe75 	bl	800083c <__aeabi_ddiv>
 8007b52:	4603      	mov	r3, r0
 8007b54:	460c      	mov	r4, r1
 8007b56:	4618      	mov	r0, r3
 8007b58:	4621      	mov	r1, r4
			&& ((8000000 * 0.9 * (3.141592653 / 180) * (tireDia / 2))
 8007b5a:	a31f      	add	r3, pc, #124	; (adr r3, 8007bd8 <rightcalPWMCount+0xe0>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 ffb4 	bl	8000acc <__aeabi_dcmplt>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d028      	beq.n	8007bbc <rightcalPWMCount+0xc4>
		PWMCount = (uint16_t) ((8000000 * 0.9 * (3.141592653 / 180)
				* (tireDia / 2)) / fabs(g_targetTrans.wvel_r)) - 1;
 8007b6a:	2334      	movs	r3, #52	; 0x34
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7f8 fccf 	bl	8000514 <__aeabi_i2d>
 8007b76:	a316      	add	r3, pc, #88	; (adr r3, 8007bd0 <rightcalPWMCount+0xd8>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f7f8 fd34 	bl	80005e8 <__aeabi_dmul>
 8007b80:	4603      	mov	r3, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	4625      	mov	r5, r4
 8007b86:	461c      	mov	r4, r3
 8007b88:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <rightcalPWMCount+0xe8>)
 8007b8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b8e:	eef0 7ae7 	vabs.f32	s15, s15
 8007b92:	ee17 0a90 	vmov	r0, s15
 8007b96:	f7f8 fccf 	bl	8000538 <__aeabi_f2d>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 fe4b 	bl	800083c <__aeabi_ddiv>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	460c      	mov	r4, r1
		PWMCount = (uint16_t) ((8000000 * 0.9 * (3.141592653 / 180)
 8007baa:	4618      	mov	r0, r3
 8007bac:	4621      	mov	r1, r4
 8007bae:	f7f8 ffb5 	bl	8000b1c <__aeabi_d2uiz>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	81fb      	strh	r3, [r7, #14]
 8007bba:	e002      	b.n	8007bc2 <rightcalPWMCount+0xca>
	} else {
		PWMCount = UINT16_MAX - 1;
 8007bbc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007bc0:	81fb      	strh	r3, [r7, #14]
	}
	return PWMCount;
 8007bc2:	89fb      	ldrh	r3, [r7, #14]
} //SOKUDO_MIGI
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bdb0      	pop	{r4, r5, r7, pc}
 8007bcc:	f3af 8000 	nop.w
 8007bd0:	4c447c31 	.word	0x4c447c31
 8007bd4:	40feadfb 	.word	0x40feadfb
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	40efffe0 	.word	0x40efffe0
 8007be0:	200002e8 	.word	0x200002e8
 8007be4:	00000000 	.word	0x00000000

08007be8 <leftcalPWMCount>:

uint16_t leftcalPWMCount(float wvel_l) {
 8007be8:	b5b0      	push	{r4, r5, r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t PWMCount;
	if ((fabs(g_targetTrans.wvel_l) > 0.0)
 8007bf2:	4b37      	ldr	r3, [pc, #220]	; (8007cd0 <leftcalPWMCount+0xe8>)
 8007bf4:	edd3 7a04 	vldr	s15, [r3, #16]
 8007bf8:	eef0 7ae7 	vabs.f32	s15, s15
 8007bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c04:	dd52      	ble.n	8007cac <leftcalPWMCount+0xc4>
			&& ((8000000 * 0.9 * (3.141592653 / 180) * (tireDia / 2))
 8007c06:	2334      	movs	r3, #52	; 0x34
 8007c08:	085b      	lsrs	r3, r3, #1
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f8 fc81 	bl	8000514 <__aeabi_i2d>
 8007c12:	a32b      	add	r3, pc, #172	; (adr r3, 8007cc0 <leftcalPWMCount+0xd8>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fce6 	bl	80005e8 <__aeabi_dmul>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	4625      	mov	r5, r4
 8007c22:	461c      	mov	r4, r3
					/ fabs(g_targetTrans.wvel_l) < UINT16_MAX)) {
 8007c24:	4b2a      	ldr	r3, [pc, #168]	; (8007cd0 <leftcalPWMCount+0xe8>)
 8007c26:	edd3 7a04 	vldr	s15, [r3, #16]
 8007c2a:	eef0 7ae7 	vabs.f32	s15, s15
 8007c2e:	ee17 0a90 	vmov	r0, s15
 8007c32:	f7f8 fc81 	bl	8000538 <__aeabi_f2d>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7f8 fdfd 	bl	800083c <__aeabi_ddiv>
 8007c42:	4603      	mov	r3, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	4618      	mov	r0, r3
 8007c48:	4621      	mov	r1, r4
			&& ((8000000 * 0.9 * (3.141592653 / 180) * (tireDia / 2))
 8007c4a:	a31f      	add	r3, pc, #124	; (adr r3, 8007cc8 <leftcalPWMCount+0xe0>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 ff3c 	bl	8000acc <__aeabi_dcmplt>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d028      	beq.n	8007cac <leftcalPWMCount+0xc4>
		PWMCount = (uint16_t) ((8000000 * 0.9 * (3.141592653 / 180)
				* (tireDia / 2)) / fabs(g_targetTrans.wvel_l)) - 1;
 8007c5a:	2334      	movs	r3, #52	; 0x34
 8007c5c:	085b      	lsrs	r3, r3, #1
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7f8 fc57 	bl	8000514 <__aeabi_i2d>
 8007c66:	a316      	add	r3, pc, #88	; (adr r3, 8007cc0 <leftcalPWMCount+0xd8>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f7f8 fcbc 	bl	80005e8 <__aeabi_dmul>
 8007c70:	4603      	mov	r3, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	4625      	mov	r5, r4
 8007c76:	461c      	mov	r4, r3
 8007c78:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <leftcalPWMCount+0xe8>)
 8007c7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8007c7e:	eef0 7ae7 	vabs.f32	s15, s15
 8007c82:	ee17 0a90 	vmov	r0, s15
 8007c86:	f7f8 fc57 	bl	8000538 <__aeabi_f2d>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 fdd3 	bl	800083c <__aeabi_ddiv>
 8007c96:	4603      	mov	r3, r0
 8007c98:	460c      	mov	r4, r1
		PWMCount = (uint16_t) ((8000000 * 0.9 * (3.141592653 / 180)
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	f7f8 ff3d 	bl	8000b1c <__aeabi_d2uiz>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	81fb      	strh	r3, [r7, #14]
 8007caa:	e002      	b.n	8007cb2 <leftcalPWMCount+0xca>
	} else {
		PWMCount = UINT16_MAX - 1;
 8007cac:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007cb0:	81fb      	strh	r3, [r7, #14]
	}
	return PWMCount;
 8007cb2:	89fb      	ldrh	r3, [r7, #14]
} //SOKUDO_HIDARI
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bdb0      	pop	{r4, r5, r7, pc}
 8007cbc:	f3af 8000 	nop.w
 8007cc0:	4c447c31 	.word	0x4c447c31
 8007cc4:	40feadfb 	.word	0x40feadfb
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	40efffe0 	.word	0x40efffe0
 8007cd0:	200002e8 	.word	0x200002e8

08007cd4 <rightCWCCW>:

void rightCWCCW(float wvel_r) {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	ed87 0a01 	vstr	s0, [r7, #4]
	if (g_targetTrans.wvel_r > 0.0) {
 8007cde:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <rightCWCCW+0x40>)
 8007ce0:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cec:	dd07      	ble.n	8007cfe <rightCWCCW+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, HIGH);
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cf8:	f7fa fd3a 	bl	8002770 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LOW);
	}
} //MAEUSHIRO_MIGI
 8007cfc:	e006      	b.n	8007d0c <rightCWCCW+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LOW);
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d08:	f7fa fd32 	bl	8002770 <HAL_GPIO_WritePin>
} //MAEUSHIRO_MIGI
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	200002e8 	.word	0x200002e8

08007d18 <leftCWCCW>:

void leftCWCCW(float wvel_l) {
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (g_targetTrans.wvel_l > 0.0) {
 8007d22:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <leftCWCCW+0x40>)
 8007d24:	edd3 7a04 	vldr	s15, [r3, #16]
 8007d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d30:	dd07      	ble.n	8007d42 <leftCWCCW+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LOW);
 8007d32:	2200      	movs	r2, #0
 8007d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d3c:	f7fa fd18 	bl	8002770 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, HIGH);
	}
} //MAEUSHIRO_HIDARI
 8007d40:	e006      	b.n	8007d50 <leftCWCCW+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, HIGH);
 8007d42:	2201      	movs	r2, #1
 8007d44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d4c:	f7fa fd10 	bl	8002770 <HAL_GPIO_WritePin>
} //MAEUSHIRO_HIDARI
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	200002e8 	.word	0x200002e8

08007d5c <discalPara>:

//xxx
void discalPara(tarparameter *para) { //関数名
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	para->dis += para->vel_r * dT;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	ed93 7a00 	vldr	s14, [r3]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d70:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007d90 <discalPara+0x34>
 8007d74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	edc3 7a00 	vstr	s15, [r3]
} //SEKIBUNKANSUU
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	3a83126f 	.word	0x3a83126f

08007d94 <motorEnable>:

void motorEnable(uint8_t onoff) {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	71fb      	strb	r3, [r7, #7]
	if (onoff == 1) {
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d112      	bne.n	8007dca <motorEnable+0x36>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, HIGH);
 8007da4:	2201      	movs	r2, #1
 8007da6:	2140      	movs	r1, #64	; 0x40
 8007da8:	480c      	ldr	r0, [pc, #48]	; (8007ddc <motorEnable+0x48>)
 8007daa:	f7fa fce1 	bl	8002770 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8007dae:	2201      	movs	r2, #1
 8007db0:	2180      	movs	r1, #128	; 0x80
 8007db2:	480a      	ldr	r0, [pc, #40]	; (8007ddc <motorEnable+0x48>)
 8007db4:	f7fa fcdc 	bl	8002770 <HAL_GPIO_WritePin>
		HAL_Delay(3);
 8007db8:	2003      	movs	r0, #3
 8007dba:	f7f8 ff85 	bl	8000cc8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2180      	movs	r1, #128	; 0x80
 8007dc2:	4806      	ldr	r0, [pc, #24]	; (8007ddc <motorEnable+0x48>)
 8007dc4:	f7fa fcd4 	bl	8002770 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, LOW);
	}
}
 8007dc8:	e004      	b.n	8007dd4 <motorEnable+0x40>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, LOW);
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2140      	movs	r1, #64	; 0x40
 8007dce:	4803      	ldr	r0, [pc, #12]	; (8007ddc <motorEnable+0x48>)
 8007dd0:	f7fa fcce 	bl	8002770 <HAL_GPIO_WritePin>
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	48000400 	.word	0x48000400

08007de0 <Traacc>:
float control;
traaccelerationparameter g_traAcceleration;
turnparameter g_turn;
wallcontrolparameter g_wallControl;

void Traacc(void) {
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim1);
 8007de4:	4877      	ldr	r0, [pc, #476]	; (8007fc4 <Traacc+0x1e4>)
 8007de6:	f7fc fa69 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8007dea:	2100      	movs	r1, #0
 8007dec:	4875      	ldr	r0, [pc, #468]	; (8007fc4 <Traacc+0x1e4>)
 8007dee:	f7fc fbeb 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 8007df2:	4875      	ldr	r0, [pc, #468]	; (8007fc8 <Traacc+0x1e8>)
 8007df4:	f7fc fa62 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_3);
 8007df8:	2108      	movs	r1, #8
 8007dfa:	4873      	ldr	r0, [pc, #460]	; (8007fc8 <Traacc+0x1e8>)
 8007dfc:	f7fc fbe4 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>

	g_traAcceleration.a = 1400.0;
 8007e00:	4b72      	ldr	r3, [pc, #456]	; (8007fcc <Traacc+0x1ec>)
 8007e02:	4a73      	ldr	r2, [pc, #460]	; (8007fd0 <Traacc+0x1f0>)
 8007e04:	601a      	str	r2, [r3, #0]
	g_traAcceleration.v_start = 200.0;
 8007e06:	4b71      	ldr	r3, [pc, #452]	; (8007fcc <Traacc+0x1ec>)
 8007e08:	4a72      	ldr	r2, [pc, #456]	; (8007fd4 <Traacc+0x1f4>)
 8007e0a:	605a      	str	r2, [r3, #4]
	g_traAcceleration.v_max = 1500.0;
 8007e0c:	4b6f      	ldr	r3, [pc, #444]	; (8007fcc <Traacc+0x1ec>)
 8007e0e:	4a72      	ldr	r2, [pc, #456]	; (8007fd8 <Traacc+0x1f8>)
 8007e10:	609a      	str	r2, [r3, #8]
	g_traAcceleration.v_end = 200.0;
 8007e12:	4b6e      	ldr	r3, [pc, #440]	; (8007fcc <Traacc+0x1ec>)
 8007e14:	4a6f      	ldr	r2, [pc, #444]	; (8007fd4 <Traacc+0x1f4>)
 8007e16:	60da      	str	r2, [r3, #12]

	g_traAcceleration.x_acc = (g_traAcceleration.v_max * g_traAcceleration.v_max
 8007e18:	4b6c      	ldr	r3, [pc, #432]	; (8007fcc <Traacc+0x1ec>)
 8007e1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e1e:	4b6b      	ldr	r3, [pc, #428]	; (8007fcc <Traacc+0x1ec>)
 8007e20:	edd3 7a02 	vldr	s15, [r3, #8]
 8007e24:	ee27 7a27 	vmul.f32	s14, s14, s15
			- g_traAcceleration.v_start * g_traAcceleration.v_start)
 8007e28:	4b68      	ldr	r3, [pc, #416]	; (8007fcc <Traacc+0x1ec>)
 8007e2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8007e2e:	4b67      	ldr	r3, [pc, #412]	; (8007fcc <Traacc+0x1ec>)
 8007e30:	edd3 7a01 	vldr	s15, [r3, #4]
 8007e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e38:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (2 * g_traAcceleration.a);
 8007e3c:	4b63      	ldr	r3, [pc, #396]	; (8007fcc <Traacc+0x1ec>)
 8007e3e:	edd3 7a00 	vldr	s15, [r3]
 8007e42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
	g_traAcceleration.x_acc = (g_traAcceleration.v_max * g_traAcceleration.v_max
 8007e4a:	4b60      	ldr	r3, [pc, #384]	; (8007fcc <Traacc+0x1ec>)
 8007e4c:	edc3 7a05 	vstr	s15, [r3, #20]
	g_traAcceleration.x_dec = (g_traAcceleration.v_max * g_traAcceleration.v_max
 8007e50:	4b5e      	ldr	r3, [pc, #376]	; (8007fcc <Traacc+0x1ec>)
 8007e52:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e56:	4b5d      	ldr	r3, [pc, #372]	; (8007fcc <Traacc+0x1ec>)
 8007e58:	edd3 7a02 	vldr	s15, [r3, #8]
 8007e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
			- g_traAcceleration.v_end * g_traAcceleration.v_end)
 8007e60:	4b5a      	ldr	r3, [pc, #360]	; (8007fcc <Traacc+0x1ec>)
 8007e62:	edd3 6a03 	vldr	s13, [r3, #12]
 8007e66:	4b59      	ldr	r3, [pc, #356]	; (8007fcc <Traacc+0x1ec>)
 8007e68:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007e70:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (2 * g_traAcceleration.a);
 8007e74:	4b55      	ldr	r3, [pc, #340]	; (8007fcc <Traacc+0x1ec>)
 8007e76:	edd3 7a00 	vldr	s15, [r3]
 8007e7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	g_traAcceleration.x_dec = (g_traAcceleration.v_max * g_traAcceleration.v_max
 8007e82:	4b52      	ldr	r3, [pc, #328]	; (8007fcc <Traacc+0x1ec>)
 8007e84:	edc3 7a06 	vstr	s15, [r3, #24]
	if ((g_traAcceleration.x_acc + g_traAcceleration.x_dec)
 8007e88:	4b50      	ldr	r3, [pc, #320]	; (8007fcc <Traacc+0x1ec>)
 8007e8a:	ed93 7a05 	vldr	s14, [r3, #20]
 8007e8e:	4b4f      	ldr	r3, [pc, #316]	; (8007fcc <Traacc+0x1ec>)
 8007e90:	edd3 7a06 	vldr	s15, [r3, #24]
 8007e94:	ee37 7a27 	vadd.f32	s14, s14, s15
			> g_traAcceleration.x) {
 8007e98:	4b4c      	ldr	r3, [pc, #304]	; (8007fcc <Traacc+0x1ec>)
 8007e9a:	edd3 7a04 	vldr	s15, [r3, #16]
	if ((g_traAcceleration.x_acc + g_traAcceleration.x_dec)
 8007e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea6:	dd4d      	ble.n	8007f44 <Traacc+0x164>
		g_traAcceleration.x_acc = g_traAcceleration.x / 2
 8007ea8:	4b48      	ldr	r3, [pc, #288]	; (8007fcc <Traacc+0x1ec>)
 8007eaa:	edd3 7a04 	vldr	s15, [r3, #16]
 8007eae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007eb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
				+ (g_traAcceleration.v_end * g_traAcceleration.v_end
 8007eb6:	4b45      	ldr	r3, [pc, #276]	; (8007fcc <Traacc+0x1ec>)
 8007eb8:	edd3 6a03 	vldr	s13, [r3, #12]
 8007ebc:	4b43      	ldr	r3, [pc, #268]	; (8007fcc <Traacc+0x1ec>)
 8007ebe:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ec2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						- g_traAcceleration.v_start * g_traAcceleration.v_start)
 8007ec6:	4b41      	ldr	r3, [pc, #260]	; (8007fcc <Traacc+0x1ec>)
 8007ec8:	ed93 6a01 	vldr	s12, [r3, #4]
 8007ecc:	4b3f      	ldr	r3, [pc, #252]	; (8007fcc <Traacc+0x1ec>)
 8007ece:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ed2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007ed6:	ee36 6ae7 	vsub.f32	s12, s13, s15
						/ (4 * g_traAcceleration.a);
 8007eda:	4b3c      	ldr	r3, [pc, #240]	; (8007fcc <Traacc+0x1ec>)
 8007edc:	edd3 7a00 	vldr	s15, [r3]
 8007ee0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007ee4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007ee8:	eec6 7a26 	vdiv.f32	s15, s12, s13
				+ (g_traAcceleration.v_end * g_traAcceleration.v_end
 8007eec:	ee77 7a27 	vadd.f32	s15, s14, s15
		g_traAcceleration.x_acc = g_traAcceleration.x / 2
 8007ef0:	4b36      	ldr	r3, [pc, #216]	; (8007fcc <Traacc+0x1ec>)
 8007ef2:	edc3 7a05 	vstr	s15, [r3, #20]
		g_traAcceleration.x_dec = g_traAcceleration.x / 2
 8007ef6:	4b35      	ldr	r3, [pc, #212]	; (8007fcc <Traacc+0x1ec>)
 8007ef8:	edd3 7a04 	vldr	s15, [r3, #16]
 8007efc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007f00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
				+ (g_traAcceleration.v_start * g_traAcceleration.v_start
 8007f04:	4b31      	ldr	r3, [pc, #196]	; (8007fcc <Traacc+0x1ec>)
 8007f06:	edd3 6a01 	vldr	s13, [r3, #4]
 8007f0a:	4b30      	ldr	r3, [pc, #192]	; (8007fcc <Traacc+0x1ec>)
 8007f0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007f10:	ee66 6aa7 	vmul.f32	s13, s13, s15
						- g_traAcceleration.v_end * g_traAcceleration.v_end)
 8007f14:	4b2d      	ldr	r3, [pc, #180]	; (8007fcc <Traacc+0x1ec>)
 8007f16:	ed93 6a03 	vldr	s12, [r3, #12]
 8007f1a:	4b2c      	ldr	r3, [pc, #176]	; (8007fcc <Traacc+0x1ec>)
 8007f1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007f20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007f24:	ee36 6ae7 	vsub.f32	s12, s13, s15
						/ (4 * g_traAcceleration.a);
 8007f28:	4b28      	ldr	r3, [pc, #160]	; (8007fcc <Traacc+0x1ec>)
 8007f2a:	edd3 7a00 	vldr	s15, [r3]
 8007f2e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007f32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007f36:	eec6 7a26 	vdiv.f32	s15, s12, s13
				+ (g_traAcceleration.v_start * g_traAcceleration.v_start
 8007f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
		g_traAcceleration.x_dec = g_traAcceleration.x / 2
 8007f3e:	4b23      	ldr	r3, [pc, #140]	; (8007fcc <Traacc+0x1ec>)
 8007f40:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	g_targetTrans.vel_r = g_traAcceleration.v_start;
 8007f44:	4b21      	ldr	r3, [pc, #132]	; (8007fcc <Traacc+0x1ec>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	4a24      	ldr	r2, [pc, #144]	; (8007fdc <Traacc+0x1fc>)
 8007f4a:	6053      	str	r3, [r2, #4]
	g_targetTrans.vel_l = g_traAcceleration.v_start;
 8007f4c:	4b1f      	ldr	r3, [pc, #124]	; (8007fcc <Traacc+0x1ec>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4a22      	ldr	r2, [pc, #136]	; (8007fdc <Traacc+0x1fc>)
 8007f52:	6093      	str	r3, [r2, #8]
	g_targetTrans.dis = 0;
 8007f54:	4b21      	ldr	r3, [pc, #132]	; (8007fdc <Traacc+0x1fc>)
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
	g_targetTrans.acc = g_traAcceleration.a;
 8007f5c:	4b1b      	ldr	r3, [pc, #108]	; (8007fcc <Traacc+0x1ec>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a1e      	ldr	r2, [pc, #120]	; (8007fdc <Traacc+0x1fc>)
 8007f62:	6153      	str	r3, [r2, #20]

	HAL_TIM_Base_Start_IT(&htim1);
 8007f64:	4817      	ldr	r0, [pc, #92]	; (8007fc4 <Traacc+0x1e4>)
 8007f66:	f7fc f98e 	bl	8004286 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4815      	ldr	r0, [pc, #84]	; (8007fc4 <Traacc+0x1e4>)
 8007f6e:	f7fc faa3 	bl	80044b8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8007f72:	4815      	ldr	r0, [pc, #84]	; (8007fc8 <Traacc+0x1e8>)
 8007f74:	f7fc f987 	bl	8004286 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8007f78:	2108      	movs	r1, #8
 8007f7a:	4813      	ldr	r0, [pc, #76]	; (8007fc8 <Traacc+0x1e8>)
 8007f7c:	f7fc fa9c 	bl	80044b8 <HAL_TIM_PWM_Start_IT>
	g_traAcceleration.Tra = 1;
 8007f80:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <Traacc+0x1ec>)
 8007f82:	2201      	movs	r2, #1
 8007f84:	771a      	strb	r2, [r3, #28]
	while (g_targetTrans.dis < g_traAcceleration.x) {
 8007f86:	bf00      	nop
 8007f88:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <Traacc+0x1fc>)
 8007f8a:	ed93 7a00 	vldr	s14, [r3]
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <Traacc+0x1ec>)
 8007f90:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9c:	d4f4      	bmi.n	8007f88 <Traacc+0x1a8>
	}
	HAL_TIM_Base_Stop_IT(&htim1);
 8007f9e:	4809      	ldr	r0, [pc, #36]	; (8007fc4 <Traacc+0x1e4>)
 8007fa0:	f7fc f98c 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	4807      	ldr	r0, [pc, #28]	; (8007fc4 <Traacc+0x1e4>)
 8007fa8:	f7fc fb0e 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 8007fac:	4806      	ldr	r0, [pc, #24]	; (8007fc8 <Traacc+0x1e8>)
 8007fae:	f7fc f985 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_3);
 8007fb2:	2108      	movs	r1, #8
 8007fb4:	4804      	ldr	r0, [pc, #16]	; (8007fc8 <Traacc+0x1e8>)
 8007fb6:	f7fc fb07 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>
	g_traAcceleration.Tra = 0;
 8007fba:	4b04      	ldr	r3, [pc, #16]	; (8007fcc <Traacc+0x1ec>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	771a      	strb	r2, [r3, #28]
}
 8007fc0:	bf00      	nop
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000440 	.word	0x20000440
 8007fc8:	20000484 	.word	0x20000484
 8007fcc:	2000031c 	.word	0x2000031c
 8007fd0:	44af0000 	.word	0x44af0000
 8007fd4:	43480000 	.word	0x43480000
 8007fd8:	44bb8000 	.word	0x44bb8000
 8007fdc:	200002e8 	.word	0x200002e8

08007fe0 <turn>:

void turn(void) {
 8007fe0:	b598      	push	{r3, r4, r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim1);
 8007fe4:	485e      	ldr	r0, [pc, #376]	; (8008160 <turn+0x180>)
 8007fe6:	f7fc f969 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8007fea:	2100      	movs	r1, #0
 8007fec:	485c      	ldr	r0, [pc, #368]	; (8008160 <turn+0x180>)
 8007fee:	f7fc faeb 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 8007ff2:	485c      	ldr	r0, [pc, #368]	; (8008164 <turn+0x184>)
 8007ff4:	f7fc f962 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_3);
 8007ff8:	2108      	movs	r1, #8
 8007ffa:	485a      	ldr	r0, [pc, #360]	; (8008164 <turn+0x184>)
 8007ffc:	f7fc fae4 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>

	g_turn.v = 0;
 8008000:	4b59      	ldr	r3, [pc, #356]	; (8008168 <turn+0x188>)
 8008002:	f04f 0200 	mov.w	r2, #0
 8008006:	609a      	str	r2, [r3, #8]
	g_turn.ome = (270.00 / 180.00) * 3.14159265;
 8008008:	4b57      	ldr	r3, [pc, #348]	; (8008168 <turn+0x188>)
 800800a:	4a58      	ldr	r2, [pc, #352]	; (800816c <turn+0x18c>)
 800800c:	60da      	str	r2, [r3, #12]
	g_turn.r = 47.0;
 800800e:	4b56      	ldr	r3, [pc, #344]	; (8008168 <turn+0x188>)
 8008010:	4a57      	ldr	r2, [pc, #348]	; (8008170 <turn+0x190>)
 8008012:	611a      	str	r2, [r3, #16]
	g_turn.th_rad = (fabsf(g_turn.th) / 180.00) * 3.14159265;
 8008014:	4b54      	ldr	r3, [pc, #336]	; (8008168 <turn+0x188>)
 8008016:	edd3 7a05 	vldr	s15, [r3, #20]
 800801a:	eef0 7ae7 	vabs.f32	s15, s15
 800801e:	ee17 0a90 	vmov	r0, s15
 8008022:	f7f8 fa89 	bl	8000538 <__aeabi_f2d>
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	4b52      	ldr	r3, [pc, #328]	; (8008174 <turn+0x194>)
 800802c:	f7f8 fc06 	bl	800083c <__aeabi_ddiv>
 8008030:	4603      	mov	r3, r0
 8008032:	460c      	mov	r4, r1
 8008034:	4618      	mov	r0, r3
 8008036:	4621      	mov	r1, r4
 8008038:	a347      	add	r3, pc, #284	; (adr r3, 8008158 <turn+0x178>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 fad3 	bl	80005e8 <__aeabi_dmul>
 8008042:	4603      	mov	r3, r0
 8008044:	460c      	mov	r4, r1
 8008046:	4618      	mov	r0, r3
 8008048:	4621      	mov	r1, r4
 800804a:	f7f8 fd87 	bl	8000b5c <__aeabi_d2f>
 800804e:	4602      	mov	r2, r0
 8008050:	4b45      	ldr	r3, [pc, #276]	; (8008168 <turn+0x188>)
 8008052:	619a      	str	r2, [r3, #24]

	if (g_turn.th > 0) {
 8008054:	4b44      	ldr	r3, [pc, #272]	; (8008168 <turn+0x188>)
 8008056:	edd3 7a05 	vldr	s15, [r3, #20]
 800805a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800805e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008062:	dd18      	ble.n	8008096 <turn+0xb6>
		g_turn.v_R = g_turn.ome * g_turn.r;
 8008064:	4b40      	ldr	r3, [pc, #256]	; (8008168 <turn+0x188>)
 8008066:	ed93 7a03 	vldr	s14, [r3, #12]
 800806a:	4b3f      	ldr	r3, [pc, #252]	; (8008168 <turn+0x188>)
 800806c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008074:	4b3c      	ldr	r3, [pc, #240]	; (8008168 <turn+0x188>)
 8008076:	edc3 7a00 	vstr	s15, [r3]
		g_turn.v_L = -g_turn.ome * g_turn.r;
 800807a:	4b3b      	ldr	r3, [pc, #236]	; (8008168 <turn+0x188>)
 800807c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008080:	eeb1 7a67 	vneg.f32	s14, s15
 8008084:	4b38      	ldr	r3, [pc, #224]	; (8008168 <turn+0x188>)
 8008086:	edd3 7a04 	vldr	s15, [r3, #16]
 800808a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808e:	4b36      	ldr	r3, [pc, #216]	; (8008168 <turn+0x188>)
 8008090:	edc3 7a01 	vstr	s15, [r3, #4]
 8008094:	e017      	b.n	80080c6 <turn+0xe6>
	} else {
		g_turn.v_R = -g_turn.ome * g_turn.r;
 8008096:	4b34      	ldr	r3, [pc, #208]	; (8008168 <turn+0x188>)
 8008098:	edd3 7a03 	vldr	s15, [r3, #12]
 800809c:	eeb1 7a67 	vneg.f32	s14, s15
 80080a0:	4b31      	ldr	r3, [pc, #196]	; (8008168 <turn+0x188>)
 80080a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80080a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080aa:	4b2f      	ldr	r3, [pc, #188]	; (8008168 <turn+0x188>)
 80080ac:	edc3 7a00 	vstr	s15, [r3]
		g_turn.v_L = g_turn.ome * g_turn.r;
 80080b0:	4b2d      	ldr	r3, [pc, #180]	; (8008168 <turn+0x188>)
 80080b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80080b6:	4b2c      	ldr	r3, [pc, #176]	; (8008168 <turn+0x188>)
 80080b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80080bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c0:	4b29      	ldr	r3, [pc, #164]	; (8008168 <turn+0x188>)
 80080c2:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	g_targetTrans.wvel_r = g_turn.v_R;
 80080c6:	4b28      	ldr	r3, [pc, #160]	; (8008168 <turn+0x188>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a2b      	ldr	r2, [pc, #172]	; (8008178 <turn+0x198>)
 80080cc:	60d3      	str	r3, [r2, #12]
	g_targetTrans.wvel_l = g_turn.v_L;
 80080ce:	4b26      	ldr	r3, [pc, #152]	; (8008168 <turn+0x188>)
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	4a29      	ldr	r2, [pc, #164]	; (8008178 <turn+0x198>)
 80080d4:	6113      	str	r3, [r2, #16]

	HAL_TIM_Base_Start_IT(&htim1);
 80080d6:	4822      	ldr	r0, [pc, #136]	; (8008160 <turn+0x180>)
 80080d8:	f7fc f8d5 	bl	8004286 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80080dc:	2100      	movs	r1, #0
 80080de:	4820      	ldr	r0, [pc, #128]	; (8008160 <turn+0x180>)
 80080e0:	f7fc f9ea 	bl	80044b8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80080e4:	481f      	ldr	r0, [pc, #124]	; (8008164 <turn+0x184>)
 80080e6:	f7fc f8ce 	bl	8004286 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80080ea:	2108      	movs	r1, #8
 80080ec:	481d      	ldr	r0, [pc, #116]	; (8008164 <turn+0x184>)
 80080ee:	f7fc f9e3 	bl	80044b8 <HAL_TIM_PWM_Start_IT>

	g_turn.count = 0;
 80080f2:	4b1d      	ldr	r3, [pc, #116]	; (8008168 <turn+0x188>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	83da      	strh	r2, [r3, #30]
	g_turn.tur = 1;
 80080f8:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <turn+0x188>)
 80080fa:	2201      	movs	r2, #1
 80080fc:	771a      	strb	r2, [r3, #28]
	while (g_turn.count < (g_turn.th_rad / g_turn.ome) * 1000) {
 80080fe:	bf00      	nop
 8008100:	4b19      	ldr	r3, [pc, #100]	; (8008168 <turn+0x188>)
 8008102:	8bdb      	ldrh	r3, [r3, #30]
 8008104:	ee07 3a90 	vmov	s15, r3
 8008108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800810c:	4b16      	ldr	r3, [pc, #88]	; (8008168 <turn+0x188>)
 800810e:	ed93 6a06 	vldr	s12, [r3, #24]
 8008112:	4b15      	ldr	r3, [pc, #84]	; (8008168 <turn+0x188>)
 8008114:	edd3 6a03 	vldr	s13, [r3, #12]
 8008118:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800811c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800817c <turn+0x19c>
 8008120:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800812c:	d4e8      	bmi.n	8008100 <turn+0x120>
	}
	HAL_TIM_Base_Stop_IT(&htim1);
 800812e:	480c      	ldr	r0, [pc, #48]	; (8008160 <turn+0x180>)
 8008130:	f7fc f8c4 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8008134:	2100      	movs	r1, #0
 8008136:	480a      	ldr	r0, [pc, #40]	; (8008160 <turn+0x180>)
 8008138:	f7fc fa46 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim2);
 800813c:	4809      	ldr	r0, [pc, #36]	; (8008164 <turn+0x184>)
 800813e:	f7fc f8bd 	bl	80042bc <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_3);
 8008142:	2108      	movs	r1, #8
 8008144:	4807      	ldr	r0, [pc, #28]	; (8008164 <turn+0x184>)
 8008146:	f7fc fa3f 	bl	80045c8 <HAL_TIM_PWM_Stop_IT>
	g_turn.tur = 0;
 800814a:	4b07      	ldr	r3, [pc, #28]	; (8008168 <turn+0x188>)
 800814c:	2200      	movs	r2, #0
 800814e:	771a      	strb	r2, [r3, #28]

}
 8008150:	bf00      	nop
 8008152:	bd98      	pop	{r3, r4, r7, pc}
 8008154:	f3af 8000 	nop.w
 8008158:	53c8d4f1 	.word	0x53c8d4f1
 800815c:	400921fb 	.word	0x400921fb
 8008160:	20000440 	.word	0x20000440
 8008164:	20000484 	.word	0x20000484
 8008168:	2000033c 	.word	0x2000033c
 800816c:	4096cbe4 	.word	0x4096cbe4
 8008170:	423c0000 	.word	0x423c0000
 8008174:	40668000 	.word	0x40668000
 8008178:	200002e8 	.word	0x200002e8
 800817c:	447a0000 	.word	0x447a0000

08008180 <wallControl>:

void wallControl(void) {
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
	const float Kp = 0.5;
 8008186:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800818a:	60bb      	str	r3, [r7, #8]
	const float DIFF_THRESHOLD = 30;
 800818c:	4b70      	ldr	r3, [pc, #448]	; (8008350 <wallControl+0x1d0>)
 800818e:	607b      	str	r3, [r7, #4]
	float Error;
	g_wallControl.r_Threadhold = 77;
 8008190:	4b70      	ldr	r3, [pc, #448]	; (8008354 <wallControl+0x1d4>)
 8008192:	4a71      	ldr	r2, [pc, #452]	; (8008358 <wallControl+0x1d8>)
 8008194:	601a      	str	r2, [r3, #0]
	g_wallControl.l_Threadhold = 41;
 8008196:	4b6f      	ldr	r3, [pc, #444]	; (8008354 <wallControl+0x1d4>)
 8008198:	4a70      	ldr	r2, [pc, #448]	; (800835c <wallControl+0x1dc>)
 800819a:	605a      	str	r2, [r3, #4]
	g_wallControl.r_ref = 270;
 800819c:	4b6d      	ldr	r3, [pc, #436]	; (8008354 <wallControl+0x1d4>)
 800819e:	4a70      	ldr	r2, [pc, #448]	; (8008360 <wallControl+0x1e0>)
 80081a0:	609a      	str	r2, [r3, #8]
	g_wallControl.l_ref = 82;
 80081a2:	4b6c      	ldr	r3, [pc, #432]	; (8008354 <wallControl+0x1d4>)
 80081a4:	4a6f      	ldr	r2, [pc, #444]	; (8008364 <wallControl+0x1e4>)
 80081a6:	60da      	str	r2, [r3, #12]

	if (abs(g_wallControl.r_diff) > DIFF_THRESHOLD) {
 80081a8:	4b6a      	ldr	r3, [pc, #424]	; (8008354 <wallControl+0x1d4>)
 80081aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80081ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081b2:	ee17 3a90 	vmov	r3, s15
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfb8      	it	lt
 80081ba:	425b      	neglt	r3, r3
 80081bc:	ee07 3a90 	vmov	s15, r3
 80081c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80081c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80081cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d0:	d509      	bpl.n	80081e6 <wallControl+0x66>
		g_wallControl.r_Threadhold = g_wallControl.r_ref + 10;  //変化量が一定以上なら、閾値を引き上げる
 80081d2:	4b60      	ldr	r3, [pc, #384]	; (8008354 <wallControl+0x1d4>)
 80081d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80081d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80081dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081e0:	4b5c      	ldr	r3, [pc, #368]	; (8008354 <wallControl+0x1d4>)
 80081e2:	edc3 7a00 	vstr	s15, [r3]
	}
	if (abs(g_wallControl.l_diff) > DIFF_THRESHOLD) {
 80081e6:	4b5b      	ldr	r3, [pc, #364]	; (8008354 <wallControl+0x1d4>)
 80081e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80081ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081f0:	ee17 3a90 	vmov	r3, s15
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfb8      	it	lt
 80081f8:	425b      	neglt	r3, r3
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008202:	ed97 7a01 	vldr	s14, [r7, #4]
 8008206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800820a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820e:	d509      	bpl.n	8008224 <wallControl+0xa4>
		g_wallControl.r_Threadhold = g_wallControl.l_ref + 10;  //変化量が一定以上なら、閾値を引き上げる
 8008210:	4b50      	ldr	r3, [pc, #320]	; (8008354 <wallControl+0x1d4>)
 8008212:	edd3 7a03 	vldr	s15, [r3, #12]
 8008216:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800821a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800821e:	4b4d      	ldr	r3, [pc, #308]	; (8008354 <wallControl+0x1d4>)
 8008220:	edc3 7a00 	vstr	s15, [r3]
	}//壁切れ対策　本当にできてる？

	if ((g_nowWallSensorValue.right > g_wallControl.r_Threadhold) && (g_nowWallSensorValue.left > g_wallControl.r_Threadhold)) {
 8008224:	4b50      	ldr	r3, [pc, #320]	; (8008368 <wallControl+0x1e8>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	ee07 3a90 	vmov	s15, r3
 800822c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008230:	4b48      	ldr	r3, [pc, #288]	; (8008354 <wallControl+0x1d4>)
 8008232:	edd3 7a00 	vldr	s15, [r3]
 8008236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800823a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800823e:	dd28      	ble.n	8008292 <wallControl+0x112>
 8008240:	4b49      	ldr	r3, [pc, #292]	; (8008368 <wallControl+0x1e8>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800824c:	4b41      	ldr	r3, [pc, #260]	; (8008354 <wallControl+0x1d4>)
 800824e:	edd3 7a00 	vldr	s15, [r3]
 8008252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825a:	dd1a      	ble.n	8008292 <wallControl+0x112>
		//両壁あり
		Error = (g_nowWallSensorValue.left - g_wallControl.l_ref) - (g_nowWallSensorValue.right - g_wallControl.r_ref); //右に寄ってたらマイナス
 800825c:	4b42      	ldr	r3, [pc, #264]	; (8008368 <wallControl+0x1e8>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008268:	4b3a      	ldr	r3, [pc, #232]	; (8008354 <wallControl+0x1d4>)
 800826a:	edd3 7a03 	vldr	s15, [r3, #12]
 800826e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008272:	4b3d      	ldr	r3, [pc, #244]	; (8008368 <wallControl+0x1e8>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800827e:	4b35      	ldr	r3, [pc, #212]	; (8008354 <wallControl+0x1d4>)
 8008280:	edd3 7a02 	vldr	s15, [r3, #8]
 8008284:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800828c:	edc7 7a03 	vstr	s15, [r7, #12]
 8008290:	e04e      	b.n	8008330 <wallControl+0x1b0>
	} else if ((g_nowWallSensorValue.right <= g_wallControl.r_Threadhold) && (g_nowWallSensorValue.left < g_wallControl.r_Threadhold)) {
 8008292:	4b35      	ldr	r3, [pc, #212]	; (8008368 <wallControl+0x1e8>)
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800829e:	4b2d      	ldr	r3, [pc, #180]	; (8008354 <wallControl+0x1d4>)
 80082a0:	edd3 7a00 	vldr	s15, [r3]
 80082a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ac:	d811      	bhi.n	80082d2 <wallControl+0x152>
 80082ae:	4b2e      	ldr	r3, [pc, #184]	; (8008368 <wallControl+0x1e8>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082ba:	4b26      	ldr	r3, [pc, #152]	; (8008354 <wallControl+0x1d4>)
 80082bc:	edd3 7a00 	vldr	s15, [r3]
 80082c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c8:	d503      	bpl.n	80082d2 <wallControl+0x152>
		//両壁なし
		Error = 0;
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	e02e      	b.n	8008330 <wallControl+0x1b0>
	} else if (g_nowWallSensorValue.right > g_wallControl.r_Threadhold) {
 80082d2:	4b25      	ldr	r3, [pc, #148]	; (8008368 <wallControl+0x1e8>)
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082de:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <wallControl+0x1d4>)
 80082e0:	edd3 7a00 	vldr	s15, [r3]
 80082e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ec:	dd11      	ble.n	8008312 <wallControl+0x192>
		//右壁のみあり
		Error = -2.0 * (g_nowWallSensorValue.right - g_wallControl.r_ref); //右に寄ってたらマイナス
 80082ee:	4b1e      	ldr	r3, [pc, #120]	; (8008368 <wallControl+0x1e8>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082fa:	4b16      	ldr	r3, [pc, #88]	; (8008354 <wallControl+0x1d4>)
 80082fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8008300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008304:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8008308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800830c:	edc7 7a03 	vstr	s15, [r7, #12]
 8008310:	e00e      	b.n	8008330 <wallControl+0x1b0>
	} else {
		//左壁のみあり
		Error = 2.0 * (g_nowWallSensorValue.left - g_wallControl.l_ref); //左に寄ってたらプラス
 8008312:	4b15      	ldr	r3, [pc, #84]	; (8008368 <wallControl+0x1e8>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800831e:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <wallControl+0x1d4>)
 8008320:	edd3 7a03 	vldr	s15, [r3, #12]
 8008324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008328:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800832c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	control = Kp * Error;
 8008330:	ed97 7a02 	vldr	s14, [r7, #8]
 8008334:	edd7 7a03 	vldr	s15, [r7, #12]
 8008338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833c:	4b0b      	ldr	r3, [pc, #44]	; (800836c <wallControl+0x1ec>)
 800833e:	edc3 7a00 	vstr	s15, [r3]
}
 8008342:	bf00      	nop
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	41f00000 	.word	0x41f00000
 8008354:	20000304 	.word	0x20000304
 8008358:	429a0000 	.word	0x429a0000
 800835c:	42240000 	.word	0x42240000
 8008360:	43870000 	.word	0x43870000
 8008364:	42a40000 	.word	0x42a40000
 8008368:	200000c0 	.word	0x200000c0
 800836c:	20000300 	.word	0x20000300

08008370 <goAhead>:


void goAhead(void) {
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
	g_traAcceleration.x = 181;
 8008374:	4b1b      	ldr	r3, [pc, #108]	; (80083e4 <goAhead+0x74>)
 8008376:	4a1c      	ldr	r2, [pc, #112]	; (80083e8 <goAhead+0x78>)
 8008378:	611a      	str	r2, [r3, #16]
	Traacc();
 800837a:	f7ff fd31 	bl	8007de0 <Traacc>
	if (g_location.Direction % 4 == 0) { //北を向いていたら
 800837e:	4b1b      	ldr	r3, [pc, #108]	; (80083ec <goAhead+0x7c>)
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d106      	bne.n	800839a <goAhead+0x2a>
		g_location.y += 1;
 800838c:	4b17      	ldr	r3, [pc, #92]	; (80083ec <goAhead+0x7c>)
 800838e:	78db      	ldrb	r3, [r3, #3]
 8008390:	3301      	adds	r3, #1
 8008392:	b2da      	uxtb	r2, r3
 8008394:	4b15      	ldr	r3, [pc, #84]	; (80083ec <goAhead+0x7c>)
 8008396:	70da      	strb	r2, [r3, #3]
		g_location.y -= 1;
	} else {
		g_location.x += 1;
	}

}
 8008398:	e021      	b.n	80083de <goAhead+0x6e>
	} else if (g_location.Direction % 4 == 1) { //西を向いていたら
 800839a:	4b14      	ldr	r3, [pc, #80]	; (80083ec <goAhead+0x7c>)
 800839c:	791b      	ldrb	r3, [r3, #4]
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d106      	bne.n	80083b6 <goAhead+0x46>
		g_location.x -= 1;
 80083a8:	4b10      	ldr	r3, [pc, #64]	; (80083ec <goAhead+0x7c>)
 80083aa:	789b      	ldrb	r3, [r3, #2]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	4b0e      	ldr	r3, [pc, #56]	; (80083ec <goAhead+0x7c>)
 80083b2:	709a      	strb	r2, [r3, #2]
}
 80083b4:	e013      	b.n	80083de <goAhead+0x6e>
	} else if (g_location.Direction % 4 == 2) { //南を向いていたら
 80083b6:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <goAhead+0x7c>)
 80083b8:	791b      	ldrb	r3, [r3, #4]
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d106      	bne.n	80083d2 <goAhead+0x62>
		g_location.y -= 1;
 80083c4:	4b09      	ldr	r3, [pc, #36]	; (80083ec <goAhead+0x7c>)
 80083c6:	78db      	ldrb	r3, [r3, #3]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	4b07      	ldr	r3, [pc, #28]	; (80083ec <goAhead+0x7c>)
 80083ce:	70da      	strb	r2, [r3, #3]
}
 80083d0:	e005      	b.n	80083de <goAhead+0x6e>
		g_location.x += 1;
 80083d2:	4b06      	ldr	r3, [pc, #24]	; (80083ec <goAhead+0x7c>)
 80083d4:	789b      	ldrb	r3, [r3, #2]
 80083d6:	3301      	adds	r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	4b04      	ldr	r3, [pc, #16]	; (80083ec <goAhead+0x7c>)
 80083dc:	709a      	strb	r2, [r3, #2]
}
 80083de:	bf00      	nop
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	2000031c 	.word	0x2000031c
 80083e8:	43350000 	.word	0x43350000
 80083ec:	20000190 	.word	0x20000190

080083f0 <turnLeft>:

void turnLeft(void) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
	g_turn.th = -90;
 80083f4:	4b22      	ldr	r3, [pc, #136]	; (8008480 <turnLeft+0x90>)
 80083f6:	4a23      	ldr	r2, [pc, #140]	; (8008484 <turnLeft+0x94>)
 80083f8:	615a      	str	r2, [r3, #20]
	turn();
 80083fa:	f7ff fdf1 	bl	8007fe0 <turn>
	g_location.Direction += 1;
 80083fe:	4b22      	ldr	r3, [pc, #136]	; (8008488 <turnLeft+0x98>)
 8008400:	791b      	ldrb	r3, [r3, #4]
 8008402:	3301      	adds	r3, #1
 8008404:	b2da      	uxtb	r2, r3
 8008406:	4b20      	ldr	r3, [pc, #128]	; (8008488 <turnLeft+0x98>)
 8008408:	711a      	strb	r2, [r3, #4]
	HAL_Delay(500);
 800840a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800840e:	f7f8 fc5b 	bl	8000cc8 <HAL_Delay>
	g_traAcceleration.x = 181;
 8008412:	4b1e      	ldr	r3, [pc, #120]	; (800848c <turnLeft+0x9c>)
 8008414:	4a1e      	ldr	r2, [pc, #120]	; (8008490 <turnLeft+0xa0>)
 8008416:	611a      	str	r2, [r3, #16]
	Traacc();
 8008418:	f7ff fce2 	bl	8007de0 <Traacc>
	if (g_location.Direction % 4 == 0) { //北を向いていたら
 800841c:	4b1a      	ldr	r3, [pc, #104]	; (8008488 <turnLeft+0x98>)
 800841e:	791b      	ldrb	r3, [r3, #4]
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <turnLeft+0x48>
		g_location.y += 1;
 800842a:	4b17      	ldr	r3, [pc, #92]	; (8008488 <turnLeft+0x98>)
 800842c:	78db      	ldrb	r3, [r3, #3]
 800842e:	3301      	adds	r3, #1
 8008430:	b2da      	uxtb	r2, r3
 8008432:	4b15      	ldr	r3, [pc, #84]	; (8008488 <turnLeft+0x98>)
 8008434:	70da      	strb	r2, [r3, #3]
	} else if (g_location.Direction % 4 == 2) { //南を向いていたら
		g_location.y -= 1;
	} else {
		g_location.x += 1;
	}
}
 8008436:	e021      	b.n	800847c <turnLeft+0x8c>
	} else if (g_location.Direction % 4 == 1) { //西を向いていたら
 8008438:	4b13      	ldr	r3, [pc, #76]	; (8008488 <turnLeft+0x98>)
 800843a:	791b      	ldrb	r3, [r3, #4]
 800843c:	f003 0303 	and.w	r3, r3, #3
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b01      	cmp	r3, #1
 8008444:	d106      	bne.n	8008454 <turnLeft+0x64>
		g_location.x -= 1;
 8008446:	4b10      	ldr	r3, [pc, #64]	; (8008488 <turnLeft+0x98>)
 8008448:	789b      	ldrb	r3, [r3, #2]
 800844a:	3b01      	subs	r3, #1
 800844c:	b2da      	uxtb	r2, r3
 800844e:	4b0e      	ldr	r3, [pc, #56]	; (8008488 <turnLeft+0x98>)
 8008450:	709a      	strb	r2, [r3, #2]
}
 8008452:	e013      	b.n	800847c <turnLeft+0x8c>
	} else if (g_location.Direction % 4 == 2) { //南を向いていたら
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <turnLeft+0x98>)
 8008456:	791b      	ldrb	r3, [r3, #4]
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b02      	cmp	r3, #2
 8008460:	d106      	bne.n	8008470 <turnLeft+0x80>
		g_location.y -= 1;
 8008462:	4b09      	ldr	r3, [pc, #36]	; (8008488 <turnLeft+0x98>)
 8008464:	78db      	ldrb	r3, [r3, #3]
 8008466:	3b01      	subs	r3, #1
 8008468:	b2da      	uxtb	r2, r3
 800846a:	4b07      	ldr	r3, [pc, #28]	; (8008488 <turnLeft+0x98>)
 800846c:	70da      	strb	r2, [r3, #3]
}
 800846e:	e005      	b.n	800847c <turnLeft+0x8c>
		g_location.x += 1;
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <turnLeft+0x98>)
 8008472:	789b      	ldrb	r3, [r3, #2]
 8008474:	3301      	adds	r3, #1
 8008476:	b2da      	uxtb	r2, r3
 8008478:	4b03      	ldr	r3, [pc, #12]	; (8008488 <turnLeft+0x98>)
 800847a:	709a      	strb	r2, [r3, #2]
}
 800847c:	bf00      	nop
 800847e:	bd80      	pop	{r7, pc}
 8008480:	2000033c 	.word	0x2000033c
 8008484:	c2b40000 	.word	0xc2b40000
 8008488:	20000190 	.word	0x20000190
 800848c:	2000031c 	.word	0x2000031c
 8008490:	43350000 	.word	0x43350000

08008494 <turnRight>:

void turnRight(void) {
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
	g_turn.th = 90;
 8008498:	4b22      	ldr	r3, [pc, #136]	; (8008524 <turnRight+0x90>)
 800849a:	4a23      	ldr	r2, [pc, #140]	; (8008528 <turnRight+0x94>)
 800849c:	615a      	str	r2, [r3, #20]
	turn();
 800849e:	f7ff fd9f 	bl	8007fe0 <turn>
	g_location.Direction += 3;
 80084a2:	4b22      	ldr	r3, [pc, #136]	; (800852c <turnRight+0x98>)
 80084a4:	791b      	ldrb	r3, [r3, #4]
 80084a6:	3303      	adds	r3, #3
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	4b20      	ldr	r3, [pc, #128]	; (800852c <turnRight+0x98>)
 80084ac:	711a      	strb	r2, [r3, #4]
	HAL_Delay(500);
 80084ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80084b2:	f7f8 fc09 	bl	8000cc8 <HAL_Delay>
	g_traAcceleration.x = 181;
 80084b6:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <turnRight+0x9c>)
 80084b8:	4a1e      	ldr	r2, [pc, #120]	; (8008534 <turnRight+0xa0>)
 80084ba:	611a      	str	r2, [r3, #16]
	Traacc();
 80084bc:	f7ff fc90 	bl	8007de0 <Traacc>
	if (g_location.Direction % 4 == 0) { //北を向いていたら
 80084c0:	4b1a      	ldr	r3, [pc, #104]	; (800852c <turnRight+0x98>)
 80084c2:	791b      	ldrb	r3, [r3, #4]
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d106      	bne.n	80084dc <turnRight+0x48>
		g_location.y += 1;
 80084ce:	4b17      	ldr	r3, [pc, #92]	; (800852c <turnRight+0x98>)
 80084d0:	78db      	ldrb	r3, [r3, #3]
 80084d2:	3301      	adds	r3, #1
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	4b15      	ldr	r3, [pc, #84]	; (800852c <turnRight+0x98>)
 80084d8:	70da      	strb	r2, [r3, #3]
	} else if (g_location.Direction % 4 == 2) { //南を向いていたら
		g_location.y -= 1;
	} else {
		g_location.x += 1;
	}
}
 80084da:	e021      	b.n	8008520 <turnRight+0x8c>
	} else if (g_location.Direction % 4 == 1) { //西を向いていたら
 80084dc:	4b13      	ldr	r3, [pc, #76]	; (800852c <turnRight+0x98>)
 80084de:	791b      	ldrb	r3, [r3, #4]
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d106      	bne.n	80084f8 <turnRight+0x64>
		g_location.x -= 1;
 80084ea:	4b10      	ldr	r3, [pc, #64]	; (800852c <turnRight+0x98>)
 80084ec:	789b      	ldrb	r3, [r3, #2]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	4b0e      	ldr	r3, [pc, #56]	; (800852c <turnRight+0x98>)
 80084f4:	709a      	strb	r2, [r3, #2]
}
 80084f6:	e013      	b.n	8008520 <turnRight+0x8c>
	} else if (g_location.Direction % 4 == 2) { //南を向いていたら
 80084f8:	4b0c      	ldr	r3, [pc, #48]	; (800852c <turnRight+0x98>)
 80084fa:	791b      	ldrb	r3, [r3, #4]
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b02      	cmp	r3, #2
 8008504:	d106      	bne.n	8008514 <turnRight+0x80>
		g_location.y -= 1;
 8008506:	4b09      	ldr	r3, [pc, #36]	; (800852c <turnRight+0x98>)
 8008508:	78db      	ldrb	r3, [r3, #3]
 800850a:	3b01      	subs	r3, #1
 800850c:	b2da      	uxtb	r2, r3
 800850e:	4b07      	ldr	r3, [pc, #28]	; (800852c <turnRight+0x98>)
 8008510:	70da      	strb	r2, [r3, #3]
}
 8008512:	e005      	b.n	8008520 <turnRight+0x8c>
		g_location.x += 1;
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <turnRight+0x98>)
 8008516:	789b      	ldrb	r3, [r3, #2]
 8008518:	3301      	adds	r3, #1
 800851a:	b2da      	uxtb	r2, r3
 800851c:	4b03      	ldr	r3, [pc, #12]	; (800852c <turnRight+0x98>)
 800851e:	709a      	strb	r2, [r3, #2]
}
 8008520:	bf00      	nop
 8008522:	bd80      	pop	{r7, pc}
 8008524:	2000033c 	.word	0x2000033c
 8008528:	42b40000 	.word	0x42b40000
 800852c:	20000190 	.word	0x20000190
 8008530:	2000031c 	.word	0x2000031c
 8008534:	43350000 	.word	0x43350000

08008538 <goBack>:

void goBack(void) {
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
	g_turn.th = 180;
 800853c:	4b22      	ldr	r3, [pc, #136]	; (80085c8 <goBack+0x90>)
 800853e:	4a23      	ldr	r2, [pc, #140]	; (80085cc <goBack+0x94>)
 8008540:	615a      	str	r2, [r3, #20]
	turn();
 8008542:	f7ff fd4d 	bl	8007fe0 <turn>
	g_location.Direction += 2;
 8008546:	4b22      	ldr	r3, [pc, #136]	; (80085d0 <goBack+0x98>)
 8008548:	791b      	ldrb	r3, [r3, #4]
 800854a:	3302      	adds	r3, #2
 800854c:	b2da      	uxtb	r2, r3
 800854e:	4b20      	ldr	r3, [pc, #128]	; (80085d0 <goBack+0x98>)
 8008550:	711a      	strb	r2, [r3, #4]
	HAL_Delay(500);
 8008552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008556:	f7f8 fbb7 	bl	8000cc8 <HAL_Delay>
	g_traAcceleration.x = 181;
 800855a:	4b1e      	ldr	r3, [pc, #120]	; (80085d4 <goBack+0x9c>)
 800855c:	4a1e      	ldr	r2, [pc, #120]	; (80085d8 <goBack+0xa0>)
 800855e:	611a      	str	r2, [r3, #16]
	Traacc();
 8008560:	f7ff fc3e 	bl	8007de0 <Traacc>
	if (g_location.Direction % 4 == 0) { //北を向いていたら
 8008564:	4b1a      	ldr	r3, [pc, #104]	; (80085d0 <goBack+0x98>)
 8008566:	791b      	ldrb	r3, [r3, #4]
 8008568:	f003 0303 	and.w	r3, r3, #3
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d106      	bne.n	8008580 <goBack+0x48>
		g_location.y += 1;
 8008572:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <goBack+0x98>)
 8008574:	78db      	ldrb	r3, [r3, #3]
 8008576:	3301      	adds	r3, #1
 8008578:	b2da      	uxtb	r2, r3
 800857a:	4b15      	ldr	r3, [pc, #84]	; (80085d0 <goBack+0x98>)
 800857c:	70da      	strb	r2, [r3, #3]
	} else if (g_location.Direction % 4 == 2) { //南を向いていたら
		g_location.y -= 1;
	} else {
		g_location.x += 1;
	}
}
 800857e:	e021      	b.n	80085c4 <goBack+0x8c>
	} else if (g_location.Direction % 4 == 1) { //西を向いていたら
 8008580:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <goBack+0x98>)
 8008582:	791b      	ldrb	r3, [r3, #4]
 8008584:	f003 0303 	and.w	r3, r3, #3
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b01      	cmp	r3, #1
 800858c:	d106      	bne.n	800859c <goBack+0x64>
		g_location.x -= 1;
 800858e:	4b10      	ldr	r3, [pc, #64]	; (80085d0 <goBack+0x98>)
 8008590:	789b      	ldrb	r3, [r3, #2]
 8008592:	3b01      	subs	r3, #1
 8008594:	b2da      	uxtb	r2, r3
 8008596:	4b0e      	ldr	r3, [pc, #56]	; (80085d0 <goBack+0x98>)
 8008598:	709a      	strb	r2, [r3, #2]
}
 800859a:	e013      	b.n	80085c4 <goBack+0x8c>
	} else if (g_location.Direction % 4 == 2) { //南を向いていたら
 800859c:	4b0c      	ldr	r3, [pc, #48]	; (80085d0 <goBack+0x98>)
 800859e:	791b      	ldrb	r3, [r3, #4]
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d106      	bne.n	80085b8 <goBack+0x80>
		g_location.y -= 1;
 80085aa:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <goBack+0x98>)
 80085ac:	78db      	ldrb	r3, [r3, #3]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <goBack+0x98>)
 80085b4:	70da      	strb	r2, [r3, #3]
}
 80085b6:	e005      	b.n	80085c4 <goBack+0x8c>
		g_location.x += 1;
 80085b8:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <goBack+0x98>)
 80085ba:	789b      	ldrb	r3, [r3, #2]
 80085bc:	3301      	adds	r3, #1
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	4b03      	ldr	r3, [pc, #12]	; (80085d0 <goBack+0x98>)
 80085c2:	709a      	strb	r2, [r3, #2]
}
 80085c4:	bf00      	nop
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	2000033c 	.word	0x2000033c
 80085cc:	43340000 	.word	0x43340000
 80085d0:	20000190 	.word	0x20000190
 80085d4:	2000031c 	.word	0x2000031c
 80085d8:	43350000 	.word	0x43350000

080085dc <lcdRS>:
#include "stm32f3xx_hal.h"
#include "gpio.h"
#include "myassign.h"

//Output
void lcdRS(uint8_t onOff) {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, onOff);
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	461a      	mov	r2, r3
 80085ea:	2110      	movs	r1, #16
 80085ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085f0:	f7fa f8be 	bl	8002770 <HAL_GPIO_WritePin>
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <lcdCS>:
void lcdCS(uint8_t onOff) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, onOff);
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	461a      	mov	r2, r3
 800860a:	2140      	movs	r1, #64	; 0x40
 800860c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008610:	f7fa f8ae 	bl	8002770 <HAL_GPIO_WritePin>
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <sensorFrontLED>:

//Input

void sensorFrontLED(uint8_t highlow) {
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, highlow);
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	461a      	mov	r2, r3
 800862a:	2110      	movs	r1, #16
 800862c:	4803      	ldr	r0, [pc, #12]	; (800863c <sensorFrontLED+0x20>)
 800862e:	f7fa f89f 	bl	8002770 <HAL_GPIO_WritePin>
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	48000400 	.word	0x48000400

08008640 <sensorSideLED>:

void sensorSideLED(uint8_t highlow) {
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, highlow);
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	461a      	mov	r2, r3
 800864e:	2120      	movs	r1, #32
 8008650:	4803      	ldr	r0, [pc, #12]	; (8008660 <sensorSideLED+0x20>)
 8008652:	f7fa f88d 	bl	8002770 <HAL_GPIO_WritePin>
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	48000400 	.word	0x48000400

08008664 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008668:	4b1b      	ldr	r3, [pc, #108]	; (80086d8 <MX_SPI1_Init+0x74>)
 800866a:	4a1c      	ldr	r2, [pc, #112]	; (80086dc <MX_SPI1_Init+0x78>)
 800866c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800866e:	4b1a      	ldr	r3, [pc, #104]	; (80086d8 <MX_SPI1_Init+0x74>)
 8008670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008676:	4b18      	ldr	r3, [pc, #96]	; (80086d8 <MX_SPI1_Init+0x74>)
 8008678:	2200      	movs	r2, #0
 800867a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800867c:	4b16      	ldr	r3, [pc, #88]	; (80086d8 <MX_SPI1_Init+0x74>)
 800867e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008682:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008684:	4b14      	ldr	r3, [pc, #80]	; (80086d8 <MX_SPI1_Init+0x74>)
 8008686:	2202      	movs	r2, #2
 8008688:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800868a:	4b13      	ldr	r3, [pc, #76]	; (80086d8 <MX_SPI1_Init+0x74>)
 800868c:	2201      	movs	r2, #1
 800868e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008690:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <MX_SPI1_Init+0x74>)
 8008692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008696:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008698:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <MX_SPI1_Init+0x74>)
 800869a:	2210      	movs	r2, #16
 800869c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800869e:	4b0e      	ldr	r3, [pc, #56]	; (80086d8 <MX_SPI1_Init+0x74>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80086a4:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <MX_SPI1_Init+0x74>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086aa:	4b0b      	ldr	r3, [pc, #44]	; (80086d8 <MX_SPI1_Init+0x74>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80086b0:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <MX_SPI1_Init+0x74>)
 80086b2:	2207      	movs	r2, #7
 80086b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80086b6:	4b08      	ldr	r3, [pc, #32]	; (80086d8 <MX_SPI1_Init+0x74>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80086bc:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <MX_SPI1_Init+0x74>)
 80086be:	2200      	movs	r2, #0
 80086c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80086c2:	4805      	ldr	r0, [pc, #20]	; (80086d8 <MX_SPI1_Init+0x74>)
 80086c4:	f7fb fab6 	bl	8003c34 <HAL_SPI_Init>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80086ce:	f7fe fb4c 	bl	8006d6a <Error_Handler>
  }

}
 80086d2:	bf00      	nop
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	2000035c 	.word	0x2000035c
 80086dc:	40013000 	.word	0x40013000

080086e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08a      	sub	sp, #40	; 0x28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086e8:	f107 0314 	add.w	r3, r7, #20
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	605a      	str	r2, [r3, #4]
 80086f2:	609a      	str	r2, [r3, #8]
 80086f4:	60da      	str	r2, [r3, #12]
 80086f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a17      	ldr	r2, [pc, #92]	; (800875c <HAL_SPI_MspInit+0x7c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d128      	bne.n	8008754 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008702:	4b17      	ldr	r3, [pc, #92]	; (8008760 <HAL_SPI_MspInit+0x80>)
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	4a16      	ldr	r2, [pc, #88]	; (8008760 <HAL_SPI_MspInit+0x80>)
 8008708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800870c:	6193      	str	r3, [r2, #24]
 800870e:	4b14      	ldr	r3, [pc, #80]	; (8008760 <HAL_SPI_MspInit+0x80>)
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800871a:	4b11      	ldr	r3, [pc, #68]	; (8008760 <HAL_SPI_MspInit+0x80>)
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	4a10      	ldr	r2, [pc, #64]	; (8008760 <HAL_SPI_MspInit+0x80>)
 8008720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008724:	6153      	str	r3, [r2, #20]
 8008726:	4b0e      	ldr	r3, [pc, #56]	; (8008760 <HAL_SPI_MspInit+0x80>)
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8008732:	23a0      	movs	r3, #160	; 0xa0
 8008734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008736:	2302      	movs	r3, #2
 8008738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800873a:	2301      	movs	r3, #1
 800873c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800873e:	2303      	movs	r3, #3
 8008740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008742:	2305      	movs	r3, #5
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008746:	f107 0314 	add.w	r3, r7, #20
 800874a:	4619      	mov	r1, r3
 800874c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008750:	f7f9 fe80 	bl	8002454 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8008754:	bf00      	nop
 8008756:	3728      	adds	r7, #40	; 0x28
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	40013000 	.word	0x40013000
 8008760:	40021000 	.word	0x40021000

08008764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800876a:	4b0f      	ldr	r3, [pc, #60]	; (80087a8 <HAL_MspInit+0x44>)
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	4a0e      	ldr	r2, [pc, #56]	; (80087a8 <HAL_MspInit+0x44>)
 8008770:	f043 0301 	orr.w	r3, r3, #1
 8008774:	6193      	str	r3, [r2, #24]
 8008776:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <HAL_MspInit+0x44>)
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	607b      	str	r3, [r7, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008782:	4b09      	ldr	r3, [pc, #36]	; (80087a8 <HAL_MspInit+0x44>)
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	4a08      	ldr	r2, [pc, #32]	; (80087a8 <HAL_MspInit+0x44>)
 8008788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800878c:	61d3      	str	r3, [r2, #28]
 800878e:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <HAL_MspInit+0x44>)
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008796:	603b      	str	r3, [r7, #0]
 8008798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40021000 	.word	0x40021000

080087ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80087b0:	bf00      	nop
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80087ba:	b480      	push	{r7}
 80087bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80087be:	e7fe      	b.n	80087be <HardFault_Handler+0x4>

080087c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80087c4:	e7fe      	b.n	80087c4 <MemManage_Handler+0x4>

080087c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80087c6:	b480      	push	{r7}
 80087c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80087ca:	e7fe      	b.n	80087ca <BusFault_Handler+0x4>

080087cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80087d0:	e7fe      	b.n	80087d0 <UsageFault_Handler+0x4>

080087d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80087d2:	b480      	push	{r7}
 80087d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80087d6:	bf00      	nop
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80087e4:	bf00      	nop
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80087ee:	b480      	push	{r7}
 80087f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80087f2:	bf00      	nop
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008800:	f7f8 fa42 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008804:	bf00      	nop
 8008806:	bd80      	pop	{r7, pc}

08008808 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800880c:	4802      	ldr	r0, [pc, #8]	; (8008818 <DMA1_Channel1_IRQHandler+0x10>)
 800880e:	f7f9 fb58 	bl	8001ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008812:	bf00      	nop
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	2000014c 	.word	0x2000014c

0800881c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008820:	4802      	ldr	r0, [pc, #8]	; (800882c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8008822:	f7fb ff79 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008826:	bf00      	nop
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000440 	.word	0x20000440

08008830 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008834:	4802      	ldr	r0, [pc, #8]	; (8008840 <TIM1_CC_IRQHandler+0x10>)
 8008836:	f7fb ff6f 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800883a:	bf00      	nop
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000440 	.word	0x20000440

08008844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008848:	4802      	ldr	r0, [pc, #8]	; (8008854 <TIM2_IRQHandler+0x10>)
 800884a:	f7fb ff65 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800884e:	bf00      	nop
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000484 	.word	0x20000484

08008858 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800885c:	4802      	ldr	r0, [pc, #8]	; (8008868 <TIM3_IRQHandler+0x10>)
 800885e:	f7fb ff5b 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008862:	bf00      	nop
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	200003c0 	.word	0x200003c0
 800886c:	00000000 	.word	0x00000000

08008870 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8008870:	b5b0      	push	{r4, r5, r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008876:	48b6      	ldr	r0, [pc, #728]	; (8008b50 <TIM6_DAC1_IRQHandler+0x2e0>)
 8008878:	f7fb ff4e 	bl	8004718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
  g_timCount++;
 800887c:	4bb5      	ldr	r3, [pc, #724]	; (8008b54 <TIM6_DAC1_IRQHandler+0x2e4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3301      	adds	r3, #1
 8008882:	4ab4      	ldr	r2, [pc, #720]	; (8008b54 <TIM6_DAC1_IRQHandler+0x2e4>)
 8008884:	6013      	str	r3, [r2, #0]
  	g_turn.count++;
 8008886:	4bb4      	ldr	r3, [pc, #720]	; (8008b58 <TIM6_DAC1_IRQHandler+0x2e8>)
 8008888:	8bdb      	ldrh	r3, [r3, #30]
 800888a:	3301      	adds	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	4bb2      	ldr	r3, [pc, #712]	; (8008b58 <TIM6_DAC1_IRQHandler+0x2e8>)
 8008890:	83da      	strh	r2, [r3, #30]
  	getWallSensorValue();
 8008892:	f7fd fb2f 	bl	8005ef4 <getWallSensorValue>
  	if (g_traAcceleration.Tra == 1) {
 8008896:	4bb1      	ldr	r3, [pc, #708]	; (8008b5c <TIM6_DAC1_IRQHandler+0x2ec>)
 8008898:	7f1b      	ldrb	r3, [r3, #28]
 800889a:	2b01      	cmp	r3, #1
 800889c:	f040 81ca 	bne.w	8008c34 <TIM6_DAC1_IRQHandler+0x3c4>
  		wallControl();
 80088a0:	f7ff fc6e 	bl	8008180 <wallControl>
  		discalPara(&g_targetTrans);
 80088a4:	48ae      	ldr	r0, [pc, #696]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80088a6:	f7ff fa59 	bl	8007d5c <discalPara>
  		if (g_targetTrans.dis < g_traAcceleration.x_acc) {
 80088aa:	4bad      	ldr	r3, [pc, #692]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80088ac:	ed93 7a00 	vldr	s14, [r3]
 80088b0:	4baa      	ldr	r3, [pc, #680]	; (8008b5c <TIM6_DAC1_IRQHandler+0x2ec>)
 80088b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80088b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088be:	d57d      	bpl.n	80089bc <TIM6_DAC1_IRQHandler+0x14c>
  			g_targetTrans.vel_r += g_targetTrans.acc * 0.001;
 80088c0:	4ba7      	ldr	r3, [pc, #668]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7f7 fe37 	bl	8000538 <__aeabi_f2d>
 80088ca:	4604      	mov	r4, r0
 80088cc:	460d      	mov	r5, r1
 80088ce:	4ba4      	ldr	r3, [pc, #656]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f7 fe30 	bl	8000538 <__aeabi_f2d>
 80088d8:	a39b      	add	r3, pc, #620	; (adr r3, 8008b48 <TIM6_DAC1_IRQHandler+0x2d8>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fe83 	bl	80005e8 <__aeabi_dmul>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4620      	mov	r0, r4
 80088e8:	4629      	mov	r1, r5
 80088ea:	f7f7 fcc7 	bl	800027c <__adddf3>
 80088ee:	4603      	mov	r3, r0
 80088f0:	460c      	mov	r4, r1
 80088f2:	4618      	mov	r0, r3
 80088f4:	4621      	mov	r1, r4
 80088f6:	f7f8 f931 	bl	8000b5c <__aeabi_d2f>
 80088fa:	4602      	mov	r2, r0
 80088fc:	4b98      	ldr	r3, [pc, #608]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80088fe:	605a      	str	r2, [r3, #4]
  			g_targetTrans.vel_l += g_targetTrans.acc * 0.001;
 8008900:	4b97      	ldr	r3, [pc, #604]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	4618      	mov	r0, r3
 8008906:	f7f7 fe17 	bl	8000538 <__aeabi_f2d>
 800890a:	4604      	mov	r4, r0
 800890c:	460d      	mov	r5, r1
 800890e:	4b94      	ldr	r3, [pc, #592]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	4618      	mov	r0, r3
 8008914:	f7f7 fe10 	bl	8000538 <__aeabi_f2d>
 8008918:	a38b      	add	r3, pc, #556	; (adr r3, 8008b48 <TIM6_DAC1_IRQHandler+0x2d8>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f7f7 fe63 	bl	80005e8 <__aeabi_dmul>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4620      	mov	r0, r4
 8008928:	4629      	mov	r1, r5
 800892a:	f7f7 fca7 	bl	800027c <__adddf3>
 800892e:	4603      	mov	r3, r0
 8008930:	460c      	mov	r4, r1
 8008932:	4618      	mov	r0, r3
 8008934:	4621      	mov	r1, r4
 8008936:	f7f8 f911 	bl	8000b5c <__aeabi_d2f>
 800893a:	4602      	mov	r2, r0
 800893c:	4b88      	ldr	r3, [pc, #544]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 800893e:	609a      	str	r2, [r3, #8]
  			if (control < 0) { //右に寄ってる時
 8008940:	4b88      	ldr	r3, [pc, #544]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008942:	edd3 7a00 	vldr	s15, [r3]
 8008946:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800894a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800894e:	d51a      	bpl.n	8008986 <TIM6_DAC1_IRQHandler+0x116>
  				g_targetTrans.wvel_r = g_targetTrans.vel_r + fabsf(control);
 8008950:	4b83      	ldr	r3, [pc, #524]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008952:	ed93 7a01 	vldr	s14, [r3, #4]
 8008956:	4b83      	ldr	r3, [pc, #524]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008958:	edd3 7a00 	vldr	s15, [r3]
 800895c:	eef0 7ae7 	vabs.f32	s15, s15
 8008960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008964:	4b7e      	ldr	r3, [pc, #504]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008966:	edc3 7a03 	vstr	s15, [r3, #12]
  				g_targetTrans.wvel_l = g_targetTrans.vel_l - fabsf(control);
 800896a:	4b7d      	ldr	r3, [pc, #500]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 800896c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008970:	4b7c      	ldr	r3, [pc, #496]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008972:	edd3 7a00 	vldr	s15, [r3]
 8008976:	eef0 7ae7 	vabs.f32	s15, s15
 800897a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800897e:	4b78      	ldr	r3, [pc, #480]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008980:	edc3 7a04 	vstr	s15, [r3, #16]
 8008984:	e10c      	b.n	8008ba0 <TIM6_DAC1_IRQHandler+0x330>
  			} else { //左に寄ってる時
  				g_targetTrans.wvel_r = g_targetTrans.vel_r - fabsf(control);
 8008986:	4b76      	ldr	r3, [pc, #472]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008988:	ed93 7a01 	vldr	s14, [r3, #4]
 800898c:	4b75      	ldr	r3, [pc, #468]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 800898e:	edd3 7a00 	vldr	s15, [r3]
 8008992:	eef0 7ae7 	vabs.f32	s15, s15
 8008996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800899a:	4b71      	ldr	r3, [pc, #452]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 800899c:	edc3 7a03 	vstr	s15, [r3, #12]
  				g_targetTrans.wvel_l = g_targetTrans.vel_l + fabsf(control);
 80089a0:	4b6f      	ldr	r3, [pc, #444]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80089a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80089a6:	4b6f      	ldr	r3, [pc, #444]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 80089a8:	edd3 7a00 	vldr	s15, [r3]
 80089ac:	eef0 7ae7 	vabs.f32	s15, s15
 80089b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089b4:	4b6a      	ldr	r3, [pc, #424]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80089b6:	edc3 7a04 	vstr	s15, [r3, #16]
 80089ba:	e0f1      	b.n	8008ba0 <TIM6_DAC1_IRQHandler+0x330>
  			}
  		} else if (g_targetTrans.dis < (g_traAcceleration.x - g_traAcceleration.x_dec)) {
 80089bc:	4b68      	ldr	r3, [pc, #416]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80089be:	ed93 7a00 	vldr	s14, [r3]
 80089c2:	4b66      	ldr	r3, [pc, #408]	; (8008b5c <TIM6_DAC1_IRQHandler+0x2ec>)
 80089c4:	edd3 6a04 	vldr	s13, [r3, #16]
 80089c8:	4b64      	ldr	r3, [pc, #400]	; (8008b5c <TIM6_DAC1_IRQHandler+0x2ec>)
 80089ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80089ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80089d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089da:	d551      	bpl.n	8008a80 <TIM6_DAC1_IRQHandler+0x210>
  			g_targetTrans.vel_r += 0 * 0.001;
 80089dc:	4b60      	ldr	r3, [pc, #384]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80089de:	edd3 7a01 	vldr	s15, [r3, #4]
 80089e2:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8008b68 <TIM6_DAC1_IRQHandler+0x2f8>
 80089e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089ea:	4b5d      	ldr	r3, [pc, #372]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80089ec:	edc3 7a01 	vstr	s15, [r3, #4]
  			g_targetTrans.vel_l += 0 * 0.001;
 80089f0:	4b5b      	ldr	r3, [pc, #364]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 80089f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80089f6:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8008b68 <TIM6_DAC1_IRQHandler+0x2f8>
 80089fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089fe:	4b58      	ldr	r3, [pc, #352]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a00:	edc3 7a02 	vstr	s15, [r3, #8]
  			if (control < 0) { //右に寄ってる時
 8008a04:	4b57      	ldr	r3, [pc, #348]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008a06:	edd3 7a00 	vldr	s15, [r3]
 8008a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a12:	d51a      	bpl.n	8008a4a <TIM6_DAC1_IRQHandler+0x1da>
  				g_targetTrans.wvel_r = g_targetTrans.vel_r + fabsf(control);
 8008a14:	4b52      	ldr	r3, [pc, #328]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a16:	ed93 7a01 	vldr	s14, [r3, #4]
 8008a1a:	4b52      	ldr	r3, [pc, #328]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008a1c:	edd3 7a00 	vldr	s15, [r3]
 8008a20:	eef0 7ae7 	vabs.f32	s15, s15
 8008a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a28:	4b4d      	ldr	r3, [pc, #308]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a2a:	edc3 7a03 	vstr	s15, [r3, #12]
  				g_targetTrans.wvel_l = g_targetTrans.vel_l - fabsf(control);
 8008a2e:	4b4c      	ldr	r3, [pc, #304]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a30:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a34:	4b4b      	ldr	r3, [pc, #300]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008a36:	edd3 7a00 	vldr	s15, [r3]
 8008a3a:	eef0 7ae7 	vabs.f32	s15, s15
 8008a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a42:	4b47      	ldr	r3, [pc, #284]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a44:	edc3 7a04 	vstr	s15, [r3, #16]
 8008a48:	e0aa      	b.n	8008ba0 <TIM6_DAC1_IRQHandler+0x330>
  			} else { //左に寄ってる時
  				g_targetTrans.wvel_r = g_targetTrans.vel_r - fabsf(control);
 8008a4a:	4b45      	ldr	r3, [pc, #276]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008a50:	4b44      	ldr	r3, [pc, #272]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008a52:	edd3 7a00 	vldr	s15, [r3]
 8008a56:	eef0 7ae7 	vabs.f32	s15, s15
 8008a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a5e:	4b40      	ldr	r3, [pc, #256]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a60:	edc3 7a03 	vstr	s15, [r3, #12]
  				g_targetTrans.wvel_l = g_targetTrans.vel_l + fabsf(control);
 8008a64:	4b3e      	ldr	r3, [pc, #248]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a66:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a6a:	4b3e      	ldr	r3, [pc, #248]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008a6c:	edd3 7a00 	vldr	s15, [r3]
 8008a70:	eef0 7ae7 	vabs.f32	s15, s15
 8008a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a78:	4b39      	ldr	r3, [pc, #228]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a7a:	edc3 7a04 	vstr	s15, [r3, #16]
 8008a7e:	e08f      	b.n	8008ba0 <TIM6_DAC1_IRQHandler+0x330>
  			}
  		} else {
  			g_targetTrans.vel_r -= g_targetTrans.acc * 0.001;
 8008a80:	4b37      	ldr	r3, [pc, #220]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7f7 fd57 	bl	8000538 <__aeabi_f2d>
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	4b34      	ldr	r3, [pc, #208]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7f7 fd50 	bl	8000538 <__aeabi_f2d>
 8008a98:	a32b      	add	r3, pc, #172	; (adr r3, 8008b48 <TIM6_DAC1_IRQHandler+0x2d8>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fda3 	bl	80005e8 <__aeabi_dmul>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f7 fbe5 	bl	8000278 <__aeabi_dsub>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f7f8 f851 	bl	8000b5c <__aeabi_d2f>
 8008aba:	4602      	mov	r2, r0
 8008abc:	4b28      	ldr	r3, [pc, #160]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008abe:	605a      	str	r2, [r3, #4]
  			g_targetTrans.vel_l -= g_targetTrans.acc * 0.001;
 8008ac0:	4b27      	ldr	r3, [pc, #156]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f7 fd37 	bl	8000538 <__aeabi_f2d>
 8008aca:	4604      	mov	r4, r0
 8008acc:	460d      	mov	r5, r1
 8008ace:	4b24      	ldr	r3, [pc, #144]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f7 fd30 	bl	8000538 <__aeabi_f2d>
 8008ad8:	a31b      	add	r3, pc, #108	; (adr r3, 8008b48 <TIM6_DAC1_IRQHandler+0x2d8>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f7f7 fd83 	bl	80005e8 <__aeabi_dmul>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	4629      	mov	r1, r5
 8008aea:	f7f7 fbc5 	bl	8000278 <__aeabi_dsub>
 8008aee:	4603      	mov	r3, r0
 8008af0:	460c      	mov	r4, r1
 8008af2:	4618      	mov	r0, r3
 8008af4:	4621      	mov	r1, r4
 8008af6:	f7f8 f831 	bl	8000b5c <__aeabi_d2f>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b18      	ldr	r3, [pc, #96]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008afe:	609a      	str	r2, [r3, #8]
  			if (control < 0) { //右に寄ってる時
 8008b00:	4b18      	ldr	r3, [pc, #96]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008b02:	edd3 7a00 	vldr	s15, [r3]
 8008b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b0e:	d52d      	bpl.n	8008b6c <TIM6_DAC1_IRQHandler+0x2fc>
  				g_targetTrans.wvel_r = g_targetTrans.vel_r + fabsf(control);
 8008b10:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008b12:	ed93 7a01 	vldr	s14, [r3, #4]
 8008b16:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008b18:	edd3 7a00 	vldr	s15, [r3]
 8008b1c:	eef0 7ae7 	vabs.f32	s15, s15
 8008b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b24:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008b26:	edc3 7a03 	vstr	s15, [r3, #12]
  				g_targetTrans.wvel_l = g_targetTrans.vel_l - fabsf(control);
 8008b2a:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008b2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008b30:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <TIM6_DAC1_IRQHandler+0x2f4>)
 8008b32:	edd3 7a00 	vldr	s15, [r3]
 8008b36:	eef0 7ae7 	vabs.f32	s15, s15
 8008b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b3e:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <TIM6_DAC1_IRQHandler+0x2f0>)
 8008b40:	edc3 7a04 	vstr	s15, [r3, #16]
 8008b44:	e02c      	b.n	8008ba0 <TIM6_DAC1_IRQHandler+0x330>
 8008b46:	bf00      	nop
 8008b48:	d2f1a9fc 	.word	0xd2f1a9fc
 8008b4c:	3f50624d 	.word	0x3f50624d
 8008b50:	20000400 	.word	0x20000400
 8008b54:	20000480 	.word	0x20000480
 8008b58:	2000033c 	.word	0x2000033c
 8008b5c:	2000031c 	.word	0x2000031c
 8008b60:	200002e8 	.word	0x200002e8
 8008b64:	20000300 	.word	0x20000300
 8008b68:	00000000 	.word	0x00000000
  			} else { //左に寄ってる時
  				g_targetTrans.wvel_r = g_targetTrans.vel_r - fabsf(control);
 8008b6c:	4b58      	ldr	r3, [pc, #352]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008b6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008b72:	4b58      	ldr	r3, [pc, #352]	; (8008cd4 <TIM6_DAC1_IRQHandler+0x464>)
 8008b74:	edd3 7a00 	vldr	s15, [r3]
 8008b78:	eef0 7ae7 	vabs.f32	s15, s15
 8008b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b80:	4b53      	ldr	r3, [pc, #332]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008b82:	edc3 7a03 	vstr	s15, [r3, #12]
  				g_targetTrans.wvel_l = g_targetTrans.vel_l + fabsf(control);
 8008b86:	4b52      	ldr	r3, [pc, #328]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008b88:	ed93 7a02 	vldr	s14, [r3, #8]
 8008b8c:	4b51      	ldr	r3, [pc, #324]	; (8008cd4 <TIM6_DAC1_IRQHandler+0x464>)
 8008b8e:	edd3 7a00 	vldr	s15, [r3]
 8008b92:	eef0 7ae7 	vabs.f32	s15, s15
 8008b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b9a:	4b4d      	ldr	r3, [pc, #308]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008b9c:	edc3 7a04 	vstr	s15, [r3, #16]
  			}
  		}

  		uint16_t leftCount, rightCount;

  		if (g_targetTrans.dis < g_traAcceleration.x) {
 8008ba0:	4b4b      	ldr	r3, [pc, #300]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008ba2:	ed93 7a00 	vldr	s14, [r3]
 8008ba6:	4b4c      	ldr	r3, [pc, #304]	; (8008cd8 <TIM6_DAC1_IRQHandler+0x468>)
 8008ba8:	edd3 7a04 	vldr	s15, [r3, #16]
 8008bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb4:	d536      	bpl.n	8008c24 <TIM6_DAC1_IRQHandler+0x3b4>
  			//	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
  			rightCount = rightcalPWMCount(g_targetTrans.wvel_r);
 8008bb6:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008bb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8008bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc0:	f7fe ff9a 	bl	8007af8 <rightcalPWMCount>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	80fb      	strh	r3, [r7, #6]
  			__HAL_TIM_SET_AUTORELOAD(&htim1, rightCount);
 8008bc8:	4b44      	ldr	r3, [pc, #272]	; (8008cdc <TIM6_DAC1_IRQHandler+0x46c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	88fa      	ldrh	r2, [r7, #6]
 8008bce:	62da      	str	r2, [r3, #44]	; 0x2c
 8008bd0:	88fb      	ldrh	r3, [r7, #6]
 8008bd2:	4a42      	ldr	r2, [pc, #264]	; (8008cdc <TIM6_DAC1_IRQHandler+0x46c>)
 8008bd4:	60d3      	str	r3, [r2, #12]
  			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 8008bd6:	4b41      	ldr	r3, [pc, #260]	; (8008cdc <TIM6_DAC1_IRQHandler+0x46c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2232      	movs	r2, #50	; 0x32
 8008bdc:	635a      	str	r2, [r3, #52]	; 0x34
  			rightCWCCW(g_targetTrans.wvel_r);
 8008bde:	4b3c      	ldr	r3, [pc, #240]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008be0:	edd3 7a03 	vldr	s15, [r3, #12]
 8008be4:	eeb0 0a67 	vmov.f32	s0, s15
 8008be8:	f7ff f874 	bl	8007cd4 <rightCWCCW>
  			//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

  			//	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
  			leftCount = leftcalPWMCount(g_targetTrans.wvel_l);
 8008bec:	4b38      	ldr	r3, [pc, #224]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008bee:	edd3 7a04 	vldr	s15, [r3, #16]
 8008bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bf6:	f7fe fff7 	bl	8007be8 <leftcalPWMCount>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	80bb      	strh	r3, [r7, #4]
  			__HAL_TIM_SET_AUTORELOAD(&htim2, leftCount);
 8008bfe:	4b38      	ldr	r3, [pc, #224]	; (8008ce0 <TIM6_DAC1_IRQHandler+0x470>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	88ba      	ldrh	r2, [r7, #4]
 8008c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8008c06:	88bb      	ldrh	r3, [r7, #4]
 8008c08:	4a35      	ldr	r2, [pc, #212]	; (8008ce0 <TIM6_DAC1_IRQHandler+0x470>)
 8008c0a:	60d3      	str	r3, [r2, #12]
  			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 50);
 8008c0c:	4b34      	ldr	r3, [pc, #208]	; (8008ce0 <TIM6_DAC1_IRQHandler+0x470>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2232      	movs	r2, #50	; 0x32
 8008c12:	63da      	str	r2, [r3, #60]	; 0x3c
  			leftCWCCW(g_targetTrans.wvel_l);
 8008c14:	4b2e      	ldr	r3, [pc, #184]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008c16:	edd3 7a04 	vldr	s15, [r3, #16]
 8008c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c1e:	f7ff f87b 	bl	8007d18 <leftCWCCW>
 8008c22:	e007      	b.n	8008c34 <TIM6_DAC1_IRQHandler+0x3c4>
  			//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);

  		} else {
  			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8008c24:	2100      	movs	r1, #0
 8008c26:	482d      	ldr	r0, [pc, #180]	; (8008cdc <TIM6_DAC1_IRQHandler+0x46c>)
 8008c28:	f7fb fbe0 	bl	80043ec <HAL_TIM_PWM_Stop>
  			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8008c2c:	2108      	movs	r1, #8
 8008c2e:	482c      	ldr	r0, [pc, #176]	; (8008ce0 <TIM6_DAC1_IRQHandler+0x470>)
 8008c30:	f7fb fbdc 	bl	80043ec <HAL_TIM_PWM_Stop>
  		}
  	}

  	if (g_turn.tur == 1) {
 8008c34:	4b2b      	ldr	r3, [pc, #172]	; (8008ce4 <TIM6_DAC1_IRQHandler+0x474>)
 8008c36:	7f1b      	ldrb	r3, [r3, #28]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d145      	bne.n	8008cc8 <TIM6_DAC1_IRQHandler+0x458>
  //		g_targetTrans.wvel_r = g_targetTrans.vel_r;
  //		g_targetTrans.wvel_l = g_targetTrans.vel_l;
  		uint16_t leftCount, rightCount;

  		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4827      	ldr	r0, [pc, #156]	; (8008cdc <TIM6_DAC1_IRQHandler+0x46c>)
 8008c40:	f7fb fbd4 	bl	80043ec <HAL_TIM_PWM_Stop>
  		rightCount = rightcalPWMCount(g_targetTrans.wvel_r);
 8008c44:	4b22      	ldr	r3, [pc, #136]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008c46:	edd3 7a03 	vldr	s15, [r3, #12]
 8008c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c4e:	f7fe ff53 	bl	8007af8 <rightcalPWMCount>
 8008c52:	4603      	mov	r3, r0
 8008c54:	807b      	strh	r3, [r7, #2]
  		__HAL_TIM_SET_AUTORELOAD(&htim1, rightCount);
 8008c56:	4b21      	ldr	r3, [pc, #132]	; (8008cdc <TIM6_DAC1_IRQHandler+0x46c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	887a      	ldrh	r2, [r7, #2]
 8008c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008c5e:	887b      	ldrh	r3, [r7, #2]
 8008c60:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <TIM6_DAC1_IRQHandler+0x46c>)
 8008c62:	60d3      	str	r3, [r2, #12]
  		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 8008c64:	4b1d      	ldr	r3, [pc, #116]	; (8008cdc <TIM6_DAC1_IRQHandler+0x46c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2232      	movs	r2, #50	; 0x32
 8008c6a:	635a      	str	r2, [r3, #52]	; 0x34
  		rightCWCCW(g_targetTrans.wvel_r);
 8008c6c:	4b18      	ldr	r3, [pc, #96]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008c6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008c72:	eeb0 0a67 	vmov.f32	s0, s15
 8008c76:	f7ff f82d 	bl	8007cd4 <rightCWCCW>
  		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4817      	ldr	r0, [pc, #92]	; (8008cdc <TIM6_DAC1_IRQHandler+0x46c>)
 8008c7e:	f7fb fb73 	bl	8004368 <HAL_TIM_PWM_Start>

  		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8008c82:	2108      	movs	r1, #8
 8008c84:	4816      	ldr	r0, [pc, #88]	; (8008ce0 <TIM6_DAC1_IRQHandler+0x470>)
 8008c86:	f7fb fbb1 	bl	80043ec <HAL_TIM_PWM_Stop>
  		leftCount = leftcalPWMCount(g_targetTrans.wvel_l);
 8008c8a:	4b11      	ldr	r3, [pc, #68]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008c8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008c90:	eeb0 0a67 	vmov.f32	s0, s15
 8008c94:	f7fe ffa8 	bl	8007be8 <leftcalPWMCount>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	803b      	strh	r3, [r7, #0]
  		__HAL_TIM_SET_AUTORELOAD(&htim2, leftCount);
 8008c9c:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <TIM6_DAC1_IRQHandler+0x470>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	883a      	ldrh	r2, [r7, #0]
 8008ca2:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ca4:	883b      	ldrh	r3, [r7, #0]
 8008ca6:	4a0e      	ldr	r2, [pc, #56]	; (8008ce0 <TIM6_DAC1_IRQHandler+0x470>)
 8008ca8:	60d3      	str	r3, [r2, #12]
  		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 50);
 8008caa:	4b0d      	ldr	r3, [pc, #52]	; (8008ce0 <TIM6_DAC1_IRQHandler+0x470>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2232      	movs	r2, #50	; 0x32
 8008cb0:	63da      	str	r2, [r3, #60]	; 0x3c
  		leftCWCCW(g_targetTrans.wvel_l);
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <TIM6_DAC1_IRQHandler+0x460>)
 8008cb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8008cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8008cbc:	f7ff f82c 	bl	8007d18 <leftCWCCW>
  		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8008cc0:	2108      	movs	r1, #8
 8008cc2:	4807      	ldr	r0, [pc, #28]	; (8008ce0 <TIM6_DAC1_IRQHandler+0x470>)
 8008cc4:	f7fb fb50 	bl	8004368 <HAL_TIM_PWM_Start>
  	}
  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bdb0      	pop	{r4, r5, r7, pc}
 8008cd0:	200002e8 	.word	0x200002e8
 8008cd4:	20000300 	.word	0x20000300
 8008cd8:	2000031c 	.word	0x2000031c
 8008cdc:	20000440 	.word	0x20000440
 8008ce0:	20000484 	.word	0x20000484
 8008ce4:	2000033c 	.word	0x2000033c

08008ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	e00a      	b.n	8008d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008cfa:	f3af 8000 	nop.w
 8008cfe:	4601      	mov	r1, r0
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	60ba      	str	r2, [r7, #8]
 8008d06:	b2ca      	uxtb	r2, r1
 8008d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	617b      	str	r3, [r7, #20]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	dbf0      	blt.n	8008cfa <_read+0x12>
	}

return len;
 8008d18:	687b      	ldr	r3, [r7, #4]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b086      	sub	sp, #24
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	e009      	b.n	8008d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	60ba      	str	r2, [r7, #8]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	3301      	adds	r3, #1
 8008d46:	617b      	str	r3, [r7, #20]
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	dbf1      	blt.n	8008d34 <_write+0x12>
	}
	return len;
 8008d50:	687b      	ldr	r3, [r7, #4]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <_close>:

int _close(int file)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
	return -1;
 8008d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d82:	605a      	str	r2, [r3, #4]
	return 0;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <_isatty>:

int _isatty(int file)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
	return 1;
 8008d9a:	2301      	movs	r3, #1
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
	return 0;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
	...

08008dc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008dcc:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <_sbrk+0x50>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <_sbrk+0x16>
		heap_end = &end;
 8008dd4:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <_sbrk+0x50>)
 8008dd6:	4a10      	ldr	r2, [pc, #64]	; (8008e18 <_sbrk+0x54>)
 8008dd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008dda:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <_sbrk+0x50>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008de0:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <_sbrk+0x50>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4413      	add	r3, r2
 8008de8:	466a      	mov	r2, sp
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d907      	bls.n	8008dfe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008dee:	f000 fb51 	bl	8009494 <__errno>
 8008df2:	4602      	mov	r2, r0
 8008df4:	230c      	movs	r3, #12
 8008df6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dfc:	e006      	b.n	8008e0c <_sbrk+0x48>
	}

	heap_end += incr;
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <_sbrk+0x50>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	4a03      	ldr	r2, [pc, #12]	; (8008e14 <_sbrk+0x50>)
 8008e08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	2000008c 	.word	0x2000008c
 8008e18:	20000538 	.word	0x20000538

08008e1c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008e20:	4b1f      	ldr	r3, [pc, #124]	; (8008ea0 <SystemInit+0x84>)
 8008e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e26:	4a1e      	ldr	r2, [pc, #120]	; (8008ea0 <SystemInit+0x84>)
 8008e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008e30:	4b1c      	ldr	r3, [pc, #112]	; (8008ea4 <SystemInit+0x88>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a1b      	ldr	r2, [pc, #108]	; (8008ea4 <SystemInit+0x88>)
 8008e36:	f043 0301 	orr.w	r3, r3, #1
 8008e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8008e3c:	4b19      	ldr	r3, [pc, #100]	; (8008ea4 <SystemInit+0x88>)
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	4918      	ldr	r1, [pc, #96]	; (8008ea4 <SystemInit+0x88>)
 8008e42:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <SystemInit+0x8c>)
 8008e44:	4013      	ands	r3, r2
 8008e46:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008e48:	4b16      	ldr	r3, [pc, #88]	; (8008ea4 <SystemInit+0x88>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a15      	ldr	r2, [pc, #84]	; (8008ea4 <SystemInit+0x88>)
 8008e4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008e58:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <SystemInit+0x88>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a11      	ldr	r2, [pc, #68]	; (8008ea4 <SystemInit+0x88>)
 8008e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008e64:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <SystemInit+0x88>)
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	4a0e      	ldr	r2, [pc, #56]	; (8008ea4 <SystemInit+0x88>)
 8008e6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008e6e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8008e70:	4b0c      	ldr	r3, [pc, #48]	; (8008ea4 <SystemInit+0x88>)
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	4a0b      	ldr	r2, [pc, #44]	; (8008ea4 <SystemInit+0x88>)
 8008e76:	f023 030f 	bic.w	r3, r3, #15
 8008e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <SystemInit+0x88>)
 8008e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e80:	4908      	ldr	r1, [pc, #32]	; (8008ea4 <SystemInit+0x88>)
 8008e82:	4b0a      	ldr	r3, [pc, #40]	; (8008eac <SystemInit+0x90>)
 8008e84:	4013      	ands	r3, r2
 8008e86:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8008e88:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <SystemInit+0x88>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008e8e:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <SystemInit+0x84>)
 8008e90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008e94:	609a      	str	r2, [r3, #8]
#endif
}
 8008e96:	bf00      	nop
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	e000ed00 	.word	0xe000ed00
 8008ea4:	40021000 	.word	0x40021000
 8008ea8:	f87fc00c 	.word	0xf87fc00c
 8008eac:	ff00fccc 	.word	0xff00fccc

08008eb0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b096      	sub	sp, #88	; 0x58
 8008eb4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008eb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	605a      	str	r2, [r3, #4]
 8008ec0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ec2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	605a      	str	r2, [r3, #4]
 8008ecc:	609a      	str	r2, [r3, #8]
 8008ece:	60da      	str	r2, [r3, #12]
 8008ed0:	611a      	str	r2, [r3, #16]
 8008ed2:	615a      	str	r2, [r3, #20]
 8008ed4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008ed6:	1d3b      	adds	r3, r7, #4
 8008ed8:	222c      	movs	r2, #44	; 0x2c
 8008eda:	2100      	movs	r1, #0
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fb03 	bl	80094e8 <memset>

  htim1.Instance = TIM1;
 8008ee2:	4b39      	ldr	r3, [pc, #228]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008ee4:	4a39      	ldr	r2, [pc, #228]	; (8008fcc <MX_TIM1_Init+0x11c>)
 8008ee6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8008ee8:	4b37      	ldr	r3, [pc, #220]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008eea:	2207      	movs	r2, #7
 8008eec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008eee:	4b36      	ldr	r3, [pc, #216]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8008ef4:	4b34      	ldr	r3, [pc, #208]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008ef6:	f242 720f 	movw	r2, #9999	; 0x270f
 8008efa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008efc:	4b32      	ldr	r3, [pc, #200]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008f02:	4b31      	ldr	r3, [pc, #196]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008f08:	4b2f      	ldr	r3, [pc, #188]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008f0a:	2280      	movs	r2, #128	; 0x80
 8008f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008f0e:	482e      	ldr	r0, [pc, #184]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008f10:	f7fb f9ff 	bl	8004312 <HAL_TIM_PWM_Init>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8008f1a:	f7fd ff26 	bl	8006d6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008f22:	2300      	movs	r3, #0
 8008f24:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008f2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4825      	ldr	r0, [pc, #148]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008f32:	f7fc fa83 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8008f3c:	f7fd ff15 	bl	8006d6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f40:	2360      	movs	r3, #96	; 0x60
 8008f42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 5000-1;
 8008f44:	f241 3387 	movw	r3, #4999	; 0x1387
 8008f48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008f56:	2300      	movs	r3, #0
 8008f58:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f62:	2200      	movs	r2, #0
 8008f64:	4619      	mov	r1, r3
 8008f66:	4818      	ldr	r0, [pc, #96]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008f68:	f7fc f950 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008f72:	f7fd fefa 	bl	8006d6a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008f94:	2300      	movs	r3, #0
 8008f96:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008f98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4807      	ldr	r0, [pc, #28]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008fac:	f7fc fa94 	bl	80054d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8008fb6:	f7fd fed8 	bl	8006d6a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8008fba:	4803      	ldr	r0, [pc, #12]	; (8008fc8 <MX_TIM1_Init+0x118>)
 8008fbc:	f000 f970 	bl	80092a0 <HAL_TIM_MspPostInit>

}
 8008fc0:	bf00      	nop
 8008fc2:	3758      	adds	r7, #88	; 0x58
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20000440 	.word	0x20000440
 8008fcc:	40012c00 	.word	0x40012c00

08008fd0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fd6:	f107 031c 	add.w	r3, r7, #28
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	605a      	str	r2, [r3, #4]
 8008fe0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	605a      	str	r2, [r3, #4]
 8008fea:	609a      	str	r2, [r3, #8]
 8008fec:	60da      	str	r2, [r3, #12]
 8008fee:	611a      	str	r2, [r3, #16]
 8008ff0:	615a      	str	r2, [r3, #20]
 8008ff2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8008ff4:	4b22      	ldr	r3, [pc, #136]	; (8009080 <MX_TIM2_Init+0xb0>)
 8008ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8008ffc:	4b20      	ldr	r3, [pc, #128]	; (8009080 <MX_TIM2_Init+0xb0>)
 8008ffe:	2207      	movs	r2, #7
 8009000:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009002:	4b1f      	ldr	r3, [pc, #124]	; (8009080 <MX_TIM2_Init+0xb0>)
 8009004:	2200      	movs	r2, #0
 8009006:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8009008:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <MX_TIM2_Init+0xb0>)
 800900a:	f242 720f 	movw	r2, #9999	; 0x270f
 800900e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009010:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <MX_TIM2_Init+0xb0>)
 8009012:	2200      	movs	r2, #0
 8009014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009016:	4b1a      	ldr	r3, [pc, #104]	; (8009080 <MX_TIM2_Init+0xb0>)
 8009018:	2200      	movs	r2, #0
 800901a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800901c:	4818      	ldr	r0, [pc, #96]	; (8009080 <MX_TIM2_Init+0xb0>)
 800901e:	f7fb f978 	bl	8004312 <HAL_TIM_PWM_Init>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8009028:	f7fd fe9f 	bl	8006d6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800902c:	2300      	movs	r3, #0
 800902e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009030:	2300      	movs	r3, #0
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009034:	f107 031c 	add.w	r3, r7, #28
 8009038:	4619      	mov	r1, r3
 800903a:	4811      	ldr	r0, [pc, #68]	; (8009080 <MX_TIM2_Init+0xb0>)
 800903c:	f7fc f9fe 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8009046:	f7fd fe90 	bl	8006d6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800904a:	2360      	movs	r3, #96	; 0x60
 800904c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 800904e:	f241 3387 	movw	r3, #4999	; 0x1387
 8009052:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009054:	2300      	movs	r3, #0
 8009056:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009058:	2300      	movs	r3, #0
 800905a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800905c:	463b      	mov	r3, r7
 800905e:	2208      	movs	r2, #8
 8009060:	4619      	mov	r1, r3
 8009062:	4807      	ldr	r0, [pc, #28]	; (8009080 <MX_TIM2_Init+0xb0>)
 8009064:	f7fc f8d2 	bl	800520c <HAL_TIM_PWM_ConfigChannel>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800906e:	f7fd fe7c 	bl	8006d6a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8009072:	4803      	ldr	r0, [pc, #12]	; (8009080 <MX_TIM2_Init+0xb0>)
 8009074:	f000 f914 	bl	80092a0 <HAL_TIM_MspPostInit>

}
 8009078:	bf00      	nop
 800907a:	3728      	adds	r7, #40	; 0x28
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20000484 	.word	0x20000484

08009084 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800908a:	f107 0310 	add.w	r3, r7, #16
 800908e:	2200      	movs	r2, #0
 8009090:	601a      	str	r2, [r3, #0]
 8009092:	605a      	str	r2, [r3, #4]
 8009094:	609a      	str	r2, [r3, #8]
 8009096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009098:	1d3b      	adds	r3, r7, #4
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	605a      	str	r2, [r3, #4]
 80090a0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80090a2:	4b1d      	ldr	r3, [pc, #116]	; (8009118 <MX_TIM3_Init+0x94>)
 80090a4:	4a1d      	ldr	r2, [pc, #116]	; (800911c <MX_TIM3_Init+0x98>)
 80090a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80090a8:	4b1b      	ldr	r3, [pc, #108]	; (8009118 <MX_TIM3_Init+0x94>)
 80090aa:	2247      	movs	r2, #71	; 0x47
 80090ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090ae:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <MX_TIM3_Init+0x94>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2273-1;
 80090b4:	4b18      	ldr	r3, [pc, #96]	; (8009118 <MX_TIM3_Init+0x94>)
 80090b6:	f44f 620e 	mov.w	r2, #2272	; 0x8e0
 80090ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090bc:	4b16      	ldr	r3, [pc, #88]	; (8009118 <MX_TIM3_Init+0x94>)
 80090be:	2200      	movs	r2, #0
 80090c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80090c2:	4b15      	ldr	r3, [pc, #84]	; (8009118 <MX_TIM3_Init+0x94>)
 80090c4:	2280      	movs	r2, #128	; 0x80
 80090c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80090c8:	4813      	ldr	r0, [pc, #76]	; (8009118 <MX_TIM3_Init+0x94>)
 80090ca:	f7fb f8b1 	bl	8004230 <HAL_TIM_Base_Init>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80090d4:	f7fd fe49 	bl	8006d6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80090de:	f107 0310 	add.w	r3, r7, #16
 80090e2:	4619      	mov	r1, r3
 80090e4:	480c      	ldr	r0, [pc, #48]	; (8009118 <MX_TIM3_Init+0x94>)
 80090e6:	f7fb fc36 	bl	8004956 <HAL_TIM_ConfigClockSource>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80090f0:	f7fd fe3b 	bl	8006d6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090f4:	2300      	movs	r3, #0
 80090f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090f8:	2300      	movs	r3, #0
 80090fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80090fc:	1d3b      	adds	r3, r7, #4
 80090fe:	4619      	mov	r1, r3
 8009100:	4805      	ldr	r0, [pc, #20]	; (8009118 <MX_TIM3_Init+0x94>)
 8009102:	f7fc f99b 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800910c:	f7fd fe2d 	bl	8006d6a <Error_Handler>
  }

}
 8009110:	bf00      	nop
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	200003c0 	.word	0x200003c0
 800911c:	40000400 	.word	0x40000400

08009120 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009126:	1d3b      	adds	r3, r7, #4
 8009128:	2200      	movs	r2, #0
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	605a      	str	r2, [r3, #4]
 800912e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8009130:	4b14      	ldr	r3, [pc, #80]	; (8009184 <MX_TIM6_Init+0x64>)
 8009132:	4a15      	ldr	r2, [pc, #84]	; (8009188 <MX_TIM6_Init+0x68>)
 8009134:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 8009136:	4b13      	ldr	r3, [pc, #76]	; (8009184 <MX_TIM6_Init+0x64>)
 8009138:	223f      	movs	r2, #63	; 0x3f
 800913a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800913c:	4b11      	ldr	r3, [pc, #68]	; (8009184 <MX_TIM6_Init+0x64>)
 800913e:	2200      	movs	r2, #0
 8009140:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8009142:	4b10      	ldr	r3, [pc, #64]	; (8009184 <MX_TIM6_Init+0x64>)
 8009144:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009148:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800914a:	4b0e      	ldr	r3, [pc, #56]	; (8009184 <MX_TIM6_Init+0x64>)
 800914c:	2280      	movs	r2, #128	; 0x80
 800914e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009150:	480c      	ldr	r0, [pc, #48]	; (8009184 <MX_TIM6_Init+0x64>)
 8009152:	f7fb f86d 	bl	8004230 <HAL_TIM_Base_Init>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800915c:	f7fd fe05 	bl	8006d6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009160:	2300      	movs	r3, #0
 8009162:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009168:	1d3b      	adds	r3, r7, #4
 800916a:	4619      	mov	r1, r3
 800916c:	4805      	ldr	r0, [pc, #20]	; (8009184 <MX_TIM6_Init+0x64>)
 800916e:	f7fc f965 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8009178:	f7fd fdf7 	bl	8006d6a <Error_Handler>
  }

}
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000400 	.word	0x20000400
 8009188:	40001000 	.word	0x40001000

0800918c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1e      	ldr	r2, [pc, #120]	; (8009214 <HAL_TIM_PWM_MspInit+0x88>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d11c      	bne.n	80091d8 <HAL_TIM_PWM_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800919e:	4b1e      	ldr	r3, [pc, #120]	; (8009218 <HAL_TIM_PWM_MspInit+0x8c>)
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	4a1d      	ldr	r2, [pc, #116]	; (8009218 <HAL_TIM_PWM_MspInit+0x8c>)
 80091a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80091a8:	6193      	str	r3, [r2, #24]
 80091aa:	4b1b      	ldr	r3, [pc, #108]	; (8009218 <HAL_TIM_PWM_MspInit+0x8c>)
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80091b6:	2200      	movs	r2, #0
 80091b8:	2101      	movs	r1, #1
 80091ba:	2019      	movs	r0, #25
 80091bc:	f7f8 fda5 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80091c0:	2019      	movs	r0, #25
 80091c2:	f7f8 fdbe 	bl	8001d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80091c6:	2200      	movs	r2, #0
 80091c8:	2100      	movs	r1, #0
 80091ca:	201b      	movs	r0, #27
 80091cc:	f7f8 fd9d 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80091d0:	201b      	movs	r0, #27
 80091d2:	f7f8 fdb6 	bl	8001d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80091d6:	e018      	b.n	800920a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM2)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e0:	d113      	bne.n	800920a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80091e2:	4b0d      	ldr	r3, [pc, #52]	; (8009218 <HAL_TIM_PWM_MspInit+0x8c>)
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	4a0c      	ldr	r2, [pc, #48]	; (8009218 <HAL_TIM_PWM_MspInit+0x8c>)
 80091e8:	f043 0301 	orr.w	r3, r3, #1
 80091ec:	61d3      	str	r3, [r2, #28]
 80091ee:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <HAL_TIM_PWM_MspInit+0x8c>)
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	60bb      	str	r3, [r7, #8]
 80091f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80091fa:	2200      	movs	r2, #0
 80091fc:	2102      	movs	r1, #2
 80091fe:	201c      	movs	r0, #28
 8009200:	f7f8 fd83 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009204:	201c      	movs	r0, #28
 8009206:	f7f8 fd9c 	bl	8001d42 <HAL_NVIC_EnableIRQ>
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	40012c00 	.word	0x40012c00
 8009218:	40021000 	.word	0x40021000

0800921c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1a      	ldr	r2, [pc, #104]	; (8009294 <HAL_TIM_Base_MspInit+0x78>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d114      	bne.n	8009258 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800922e:	4b1a      	ldr	r3, [pc, #104]	; (8009298 <HAL_TIM_Base_MspInit+0x7c>)
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	4a19      	ldr	r2, [pc, #100]	; (8009298 <HAL_TIM_Base_MspInit+0x7c>)
 8009234:	f043 0302 	orr.w	r3, r3, #2
 8009238:	61d3      	str	r3, [r2, #28]
 800923a:	4b17      	ldr	r3, [pc, #92]	; (8009298 <HAL_TIM_Base_MspInit+0x7c>)
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009246:	2200      	movs	r2, #0
 8009248:	2100      	movs	r1, #0
 800924a:	201d      	movs	r0, #29
 800924c:	f7f8 fd5d 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009250:	201d      	movs	r0, #29
 8009252:	f7f8 fd76 	bl	8001d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8009256:	e018      	b.n	800928a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a0f      	ldr	r2, [pc, #60]	; (800929c <HAL_TIM_Base_MspInit+0x80>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d113      	bne.n	800928a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009262:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <HAL_TIM_Base_MspInit+0x7c>)
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	4a0c      	ldr	r2, [pc, #48]	; (8009298 <HAL_TIM_Base_MspInit+0x7c>)
 8009268:	f043 0310 	orr.w	r3, r3, #16
 800926c:	61d3      	str	r3, [r2, #28]
 800926e:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <HAL_TIM_Base_MspInit+0x7c>)
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	60bb      	str	r3, [r7, #8]
 8009278:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 3, 0);
 800927a:	2200      	movs	r2, #0
 800927c:	2103      	movs	r1, #3
 800927e:	2036      	movs	r0, #54	; 0x36
 8009280:	f7f8 fd43 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8009284:	2036      	movs	r0, #54	; 0x36
 8009286:	f7f8 fd5c 	bl	8001d42 <HAL_NVIC_EnableIRQ>
}
 800928a:	bf00      	nop
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	40000400 	.word	0x40000400
 8009298:	40021000 	.word	0x40021000
 800929c:	40001000 	.word	0x40001000

080092a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08a      	sub	sp, #40	; 0x28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092a8:	f107 0314 	add.w	r3, r7, #20
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	605a      	str	r2, [r3, #4]
 80092b2:	609a      	str	r2, [r3, #8]
 80092b4:	60da      	str	r2, [r3, #12]
 80092b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a24      	ldr	r2, [pc, #144]	; (8009350 <HAL_TIM_MspPostInit+0xb0>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d11e      	bne.n	8009300 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092c2:	4b24      	ldr	r3, [pc, #144]	; (8009354 <HAL_TIM_MspPostInit+0xb4>)
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	4a23      	ldr	r2, [pc, #140]	; (8009354 <HAL_TIM_MspPostInit+0xb4>)
 80092c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092cc:	6153      	str	r3, [r2, #20]
 80092ce:	4b21      	ldr	r3, [pc, #132]	; (8009354 <HAL_TIM_MspPostInit+0xb4>)
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d6:	613b      	str	r3, [r7, #16]
 80092d8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = R_motor_Pin;
 80092da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092e0:	2302      	movs	r3, #2
 80092e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092e8:	2300      	movs	r3, #0
 80092ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80092ec:	2306      	movs	r3, #6
 80092ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(R_motor_GPIO_Port, &GPIO_InitStruct);
 80092f0:	f107 0314 	add.w	r3, r7, #20
 80092f4:	4619      	mov	r1, r3
 80092f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80092fa:	f7f9 f8ab 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80092fe:	e022      	b.n	8009346 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM2)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009308:	d11d      	bne.n	8009346 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800930a:	4b12      	ldr	r3, [pc, #72]	; (8009354 <HAL_TIM_MspPostInit+0xb4>)
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	4a11      	ldr	r2, [pc, #68]	; (8009354 <HAL_TIM_MspPostInit+0xb4>)
 8009310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009314:	6153      	str	r3, [r2, #20]
 8009316:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <HAL_TIM_MspPostInit+0xb4>)
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_motor_Pin;
 8009322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009328:	2302      	movs	r3, #2
 800932a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800932c:	2300      	movs	r3, #0
 800932e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009330:	2300      	movs	r3, #0
 8009332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8009334:	230a      	movs	r3, #10
 8009336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(L_motor_GPIO_Port, &GPIO_InitStruct);
 8009338:	f107 0314 	add.w	r3, r7, #20
 800933c:	4619      	mov	r1, r3
 800933e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009342:	f7f9 f887 	bl	8002454 <HAL_GPIO_Init>
}
 8009346:	bf00      	nop
 8009348:	3728      	adds	r7, #40	; 0x28
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	40012c00 	.word	0x40012c00
 8009354:	40021000 	.word	0x40021000

08009358 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800935c:	4b14      	ldr	r3, [pc, #80]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 800935e:	4a15      	ldr	r2, [pc, #84]	; (80093b4 <MX_USART2_UART_Init+0x5c>)
 8009360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009362:	4b13      	ldr	r3, [pc, #76]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 8009364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800936a:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 800936c:	2200      	movs	r2, #0
 800936e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009370:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 8009372:	2200      	movs	r2, #0
 8009374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009376:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 8009378:	2200      	movs	r2, #0
 800937a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800937c:	4b0c      	ldr	r3, [pc, #48]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 800937e:	220c      	movs	r2, #12
 8009380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009382:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 8009384:	2200      	movs	r2, #0
 8009386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009388:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 800938a:	2200      	movs	r2, #0
 800938c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800938e:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 8009390:	2200      	movs	r2, #0
 8009392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009394:	4b06      	ldr	r3, [pc, #24]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 8009396:	2200      	movs	r2, #0
 8009398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800939a:	4805      	ldr	r0, [pc, #20]	; (80093b0 <MX_USART2_UART_Init+0x58>)
 800939c:	f7fc fa02 	bl	80057a4 <HAL_UART_Init>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80093a6:	f7fd fce0 	bl	8006d6a <Error_Handler>
  }

}
 80093aa:	bf00      	nop
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200004c4 	.word	0x200004c4
 80093b4:	40004400 	.word	0x40004400

080093b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08a      	sub	sp, #40	; 0x28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093c0:	f107 0314 	add.w	r3, r7, #20
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	605a      	str	r2, [r3, #4]
 80093ca:	609a      	str	r2, [r3, #8]
 80093cc:	60da      	str	r2, [r3, #12]
 80093ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a18      	ldr	r2, [pc, #96]	; (8009438 <HAL_UART_MspInit+0x80>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d129      	bne.n	800942e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80093da:	4b18      	ldr	r3, [pc, #96]	; (800943c <HAL_UART_MspInit+0x84>)
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	4a17      	ldr	r2, [pc, #92]	; (800943c <HAL_UART_MspInit+0x84>)
 80093e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093e4:	61d3      	str	r3, [r2, #28]
 80093e6:	4b15      	ldr	r3, [pc, #84]	; (800943c <HAL_UART_MspInit+0x84>)
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ee:	613b      	str	r3, [r7, #16]
 80093f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <HAL_UART_MspInit+0x84>)
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	4a11      	ldr	r2, [pc, #68]	; (800943c <HAL_UART_MspInit+0x84>)
 80093f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093fc:	6153      	str	r3, [r2, #20]
 80093fe:	4b0f      	ldr	r3, [pc, #60]	; (800943c <HAL_UART_MspInit+0x84>)
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800940a:	f248 0304 	movw	r3, #32772	; 0x8004
 800940e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009410:	2302      	movs	r3, #2
 8009412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009414:	2300      	movs	r3, #0
 8009416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009418:	2303      	movs	r3, #3
 800941a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800941c:	2307      	movs	r3, #7
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009420:	f107 0314 	add.w	r3, r7, #20
 8009424:	4619      	mov	r1, r3
 8009426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800942a:	f7f9 f813 	bl	8002454 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800942e:	bf00      	nop
 8009430:	3728      	adds	r7, #40	; 0x28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	40004400 	.word	0x40004400
 800943c:	40021000 	.word	0x40021000

08009440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009478 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009444:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009446:	e003      	b.n	8009450 <LoopCopyDataInit>

08009448 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009448:	4b0c      	ldr	r3, [pc, #48]	; (800947c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800944a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800944c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800944e:	3104      	adds	r1, #4

08009450 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009450:	480b      	ldr	r0, [pc, #44]	; (8009480 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009452:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009454:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009456:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009458:	d3f6      	bcc.n	8009448 <CopyDataInit>
	ldr	r2, =_sbss
 800945a:	4a0b      	ldr	r2, [pc, #44]	; (8009488 <LoopForever+0x12>)
	b	LoopFillZerobss
 800945c:	e002      	b.n	8009464 <LoopFillZerobss>

0800945e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800945e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009460:	f842 3b04 	str.w	r3, [r2], #4

08009464 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009464:	4b09      	ldr	r3, [pc, #36]	; (800948c <LoopForever+0x16>)
	cmp	r2, r3
 8009466:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009468:	d3f9      	bcc.n	800945e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800946a:	f7ff fcd7 	bl	8008e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800946e:	f000 f817 	bl	80094a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009472:	f7fd fbbb 	bl	8006bec <main>

08009476 <LoopForever>:

LoopForever:
    b LoopForever
 8009476:	e7fe      	b.n	8009476 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009478:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800947c:	0800add0 	.word	0x0800add0
	ldr	r0, =_sdata
 8009480:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009484:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8009488:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800948c:	20000538 	.word	0x20000538

08009490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009490:	e7fe      	b.n	8009490 <ADC1_2_IRQHandler>
	...

08009494 <__errno>:
 8009494:	4b01      	ldr	r3, [pc, #4]	; (800949c <__errno+0x8>)
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	2000000c 	.word	0x2000000c

080094a0 <__libc_init_array>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	4e0d      	ldr	r6, [pc, #52]	; (80094d8 <__libc_init_array+0x38>)
 80094a4:	4c0d      	ldr	r4, [pc, #52]	; (80094dc <__libc_init_array+0x3c>)
 80094a6:	1ba4      	subs	r4, r4, r6
 80094a8:	10a4      	asrs	r4, r4, #2
 80094aa:	2500      	movs	r5, #0
 80094ac:	42a5      	cmp	r5, r4
 80094ae:	d109      	bne.n	80094c4 <__libc_init_array+0x24>
 80094b0:	4e0b      	ldr	r6, [pc, #44]	; (80094e0 <__libc_init_array+0x40>)
 80094b2:	4c0c      	ldr	r4, [pc, #48]	; (80094e4 <__libc_init_array+0x44>)
 80094b4:	f001 f976 	bl	800a7a4 <_init>
 80094b8:	1ba4      	subs	r4, r4, r6
 80094ba:	10a4      	asrs	r4, r4, #2
 80094bc:	2500      	movs	r5, #0
 80094be:	42a5      	cmp	r5, r4
 80094c0:	d105      	bne.n	80094ce <__libc_init_array+0x2e>
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094c8:	4798      	blx	r3
 80094ca:	3501      	adds	r5, #1
 80094cc:	e7ee      	b.n	80094ac <__libc_init_array+0xc>
 80094ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094d2:	4798      	blx	r3
 80094d4:	3501      	adds	r5, #1
 80094d6:	e7f2      	b.n	80094be <__libc_init_array+0x1e>
 80094d8:	0800adc8 	.word	0x0800adc8
 80094dc:	0800adc8 	.word	0x0800adc8
 80094e0:	0800adc8 	.word	0x0800adc8
 80094e4:	0800adcc 	.word	0x0800adcc

080094e8 <memset>:
 80094e8:	4402      	add	r2, r0
 80094ea:	4603      	mov	r3, r0
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d100      	bne.n	80094f2 <memset+0xa>
 80094f0:	4770      	bx	lr
 80094f2:	f803 1b01 	strb.w	r1, [r3], #1
 80094f6:	e7f9      	b.n	80094ec <memset+0x4>

080094f8 <iprintf>:
 80094f8:	b40f      	push	{r0, r1, r2, r3}
 80094fa:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <iprintf+0x2c>)
 80094fc:	b513      	push	{r0, r1, r4, lr}
 80094fe:	681c      	ldr	r4, [r3, #0]
 8009500:	b124      	cbz	r4, 800950c <iprintf+0x14>
 8009502:	69a3      	ldr	r3, [r4, #24]
 8009504:	b913      	cbnz	r3, 800950c <iprintf+0x14>
 8009506:	4620      	mov	r0, r4
 8009508:	f000 fa56 	bl	80099b8 <__sinit>
 800950c:	ab05      	add	r3, sp, #20
 800950e:	9a04      	ldr	r2, [sp, #16]
 8009510:	68a1      	ldr	r1, [r4, #8]
 8009512:	9301      	str	r3, [sp, #4]
 8009514:	4620      	mov	r0, r4
 8009516:	f000 fd61 	bl	8009fdc <_vfiprintf_r>
 800951a:	b002      	add	sp, #8
 800951c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009520:	b004      	add	sp, #16
 8009522:	4770      	bx	lr
 8009524:	2000000c 	.word	0x2000000c

08009528 <putchar>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4b08      	ldr	r3, [pc, #32]	; (800954c <putchar+0x24>)
 800952c:	681c      	ldr	r4, [r3, #0]
 800952e:	4605      	mov	r5, r0
 8009530:	b124      	cbz	r4, 800953c <putchar+0x14>
 8009532:	69a3      	ldr	r3, [r4, #24]
 8009534:	b913      	cbnz	r3, 800953c <putchar+0x14>
 8009536:	4620      	mov	r0, r4
 8009538:	f000 fa3e 	bl	80099b8 <__sinit>
 800953c:	68a2      	ldr	r2, [r4, #8]
 800953e:	4629      	mov	r1, r5
 8009540:	4620      	mov	r0, r4
 8009542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009546:	f000 bfe7 	b.w	800a518 <_putc_r>
 800954a:	bf00      	nop
 800954c:	2000000c 	.word	0x2000000c

08009550 <_puts_r>:
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	460e      	mov	r6, r1
 8009554:	4605      	mov	r5, r0
 8009556:	b118      	cbz	r0, 8009560 <_puts_r+0x10>
 8009558:	6983      	ldr	r3, [r0, #24]
 800955a:	b90b      	cbnz	r3, 8009560 <_puts_r+0x10>
 800955c:	f000 fa2c 	bl	80099b8 <__sinit>
 8009560:	69ab      	ldr	r3, [r5, #24]
 8009562:	68ac      	ldr	r4, [r5, #8]
 8009564:	b913      	cbnz	r3, 800956c <_puts_r+0x1c>
 8009566:	4628      	mov	r0, r5
 8009568:	f000 fa26 	bl	80099b8 <__sinit>
 800956c:	4b23      	ldr	r3, [pc, #140]	; (80095fc <_puts_r+0xac>)
 800956e:	429c      	cmp	r4, r3
 8009570:	d117      	bne.n	80095a2 <_puts_r+0x52>
 8009572:	686c      	ldr	r4, [r5, #4]
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	071b      	lsls	r3, r3, #28
 8009578:	d51d      	bpl.n	80095b6 <_puts_r+0x66>
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	b1db      	cbz	r3, 80095b6 <_puts_r+0x66>
 800957e:	3e01      	subs	r6, #1
 8009580:	68a3      	ldr	r3, [r4, #8]
 8009582:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009586:	3b01      	subs	r3, #1
 8009588:	60a3      	str	r3, [r4, #8]
 800958a:	b9e9      	cbnz	r1, 80095c8 <_puts_r+0x78>
 800958c:	2b00      	cmp	r3, #0
 800958e:	da2e      	bge.n	80095ee <_puts_r+0x9e>
 8009590:	4622      	mov	r2, r4
 8009592:	210a      	movs	r1, #10
 8009594:	4628      	mov	r0, r5
 8009596:	f000 f85f 	bl	8009658 <__swbuf_r>
 800959a:	3001      	adds	r0, #1
 800959c:	d011      	beq.n	80095c2 <_puts_r+0x72>
 800959e:	200a      	movs	r0, #10
 80095a0:	e011      	b.n	80095c6 <_puts_r+0x76>
 80095a2:	4b17      	ldr	r3, [pc, #92]	; (8009600 <_puts_r+0xb0>)
 80095a4:	429c      	cmp	r4, r3
 80095a6:	d101      	bne.n	80095ac <_puts_r+0x5c>
 80095a8:	68ac      	ldr	r4, [r5, #8]
 80095aa:	e7e3      	b.n	8009574 <_puts_r+0x24>
 80095ac:	4b15      	ldr	r3, [pc, #84]	; (8009604 <_puts_r+0xb4>)
 80095ae:	429c      	cmp	r4, r3
 80095b0:	bf08      	it	eq
 80095b2:	68ec      	ldreq	r4, [r5, #12]
 80095b4:	e7de      	b.n	8009574 <_puts_r+0x24>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f000 f89f 	bl	80096fc <__swsetup_r>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d0dd      	beq.n	800957e <_puts_r+0x2e>
 80095c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da04      	bge.n	80095d6 <_puts_r+0x86>
 80095cc:	69a2      	ldr	r2, [r4, #24]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	dc06      	bgt.n	80095e0 <_puts_r+0x90>
 80095d2:	290a      	cmp	r1, #10
 80095d4:	d004      	beq.n	80095e0 <_puts_r+0x90>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	6022      	str	r2, [r4, #0]
 80095dc:	7019      	strb	r1, [r3, #0]
 80095de:	e7cf      	b.n	8009580 <_puts_r+0x30>
 80095e0:	4622      	mov	r2, r4
 80095e2:	4628      	mov	r0, r5
 80095e4:	f000 f838 	bl	8009658 <__swbuf_r>
 80095e8:	3001      	adds	r0, #1
 80095ea:	d1c9      	bne.n	8009580 <_puts_r+0x30>
 80095ec:	e7e9      	b.n	80095c2 <_puts_r+0x72>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	200a      	movs	r0, #10
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	6022      	str	r2, [r4, #0]
 80095f6:	7018      	strb	r0, [r3, #0]
 80095f8:	e7e5      	b.n	80095c6 <_puts_r+0x76>
 80095fa:	bf00      	nop
 80095fc:	0800ad54 	.word	0x0800ad54
 8009600:	0800ad74 	.word	0x0800ad74
 8009604:	0800ad34 	.word	0x0800ad34

08009608 <puts>:
 8009608:	4b02      	ldr	r3, [pc, #8]	; (8009614 <puts+0xc>)
 800960a:	4601      	mov	r1, r0
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f7ff bf9f 	b.w	8009550 <_puts_r>
 8009612:	bf00      	nop
 8009614:	2000000c 	.word	0x2000000c

08009618 <_vsiprintf_r>:
 8009618:	b500      	push	{lr}
 800961a:	b09b      	sub	sp, #108	; 0x6c
 800961c:	9100      	str	r1, [sp, #0]
 800961e:	9104      	str	r1, [sp, #16]
 8009620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009624:	9105      	str	r1, [sp, #20]
 8009626:	9102      	str	r1, [sp, #8]
 8009628:	4905      	ldr	r1, [pc, #20]	; (8009640 <_vsiprintf_r+0x28>)
 800962a:	9103      	str	r1, [sp, #12]
 800962c:	4669      	mov	r1, sp
 800962e:	f000 fbb3 	bl	8009d98 <_svfiprintf_r>
 8009632:	9b00      	ldr	r3, [sp, #0]
 8009634:	2200      	movs	r2, #0
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	b01b      	add	sp, #108	; 0x6c
 800963a:	f85d fb04 	ldr.w	pc, [sp], #4
 800963e:	bf00      	nop
 8009640:	ffff0208 	.word	0xffff0208

08009644 <vsiprintf>:
 8009644:	4613      	mov	r3, r2
 8009646:	460a      	mov	r2, r1
 8009648:	4601      	mov	r1, r0
 800964a:	4802      	ldr	r0, [pc, #8]	; (8009654 <vsiprintf+0x10>)
 800964c:	6800      	ldr	r0, [r0, #0]
 800964e:	f7ff bfe3 	b.w	8009618 <_vsiprintf_r>
 8009652:	bf00      	nop
 8009654:	2000000c 	.word	0x2000000c

08009658 <__swbuf_r>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	460e      	mov	r6, r1
 800965c:	4614      	mov	r4, r2
 800965e:	4605      	mov	r5, r0
 8009660:	b118      	cbz	r0, 800966a <__swbuf_r+0x12>
 8009662:	6983      	ldr	r3, [r0, #24]
 8009664:	b90b      	cbnz	r3, 800966a <__swbuf_r+0x12>
 8009666:	f000 f9a7 	bl	80099b8 <__sinit>
 800966a:	4b21      	ldr	r3, [pc, #132]	; (80096f0 <__swbuf_r+0x98>)
 800966c:	429c      	cmp	r4, r3
 800966e:	d12a      	bne.n	80096c6 <__swbuf_r+0x6e>
 8009670:	686c      	ldr	r4, [r5, #4]
 8009672:	69a3      	ldr	r3, [r4, #24]
 8009674:	60a3      	str	r3, [r4, #8]
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	071a      	lsls	r2, r3, #28
 800967a:	d52e      	bpl.n	80096da <__swbuf_r+0x82>
 800967c:	6923      	ldr	r3, [r4, #16]
 800967e:	b363      	cbz	r3, 80096da <__swbuf_r+0x82>
 8009680:	6923      	ldr	r3, [r4, #16]
 8009682:	6820      	ldr	r0, [r4, #0]
 8009684:	1ac0      	subs	r0, r0, r3
 8009686:	6963      	ldr	r3, [r4, #20]
 8009688:	b2f6      	uxtb	r6, r6
 800968a:	4283      	cmp	r3, r0
 800968c:	4637      	mov	r7, r6
 800968e:	dc04      	bgt.n	800969a <__swbuf_r+0x42>
 8009690:	4621      	mov	r1, r4
 8009692:	4628      	mov	r0, r5
 8009694:	f000 f926 	bl	80098e4 <_fflush_r>
 8009698:	bb28      	cbnz	r0, 80096e6 <__swbuf_r+0x8e>
 800969a:	68a3      	ldr	r3, [r4, #8]
 800969c:	3b01      	subs	r3, #1
 800969e:	60a3      	str	r3, [r4, #8]
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	1c5a      	adds	r2, r3, #1
 80096a4:	6022      	str	r2, [r4, #0]
 80096a6:	701e      	strb	r6, [r3, #0]
 80096a8:	6963      	ldr	r3, [r4, #20]
 80096aa:	3001      	adds	r0, #1
 80096ac:	4283      	cmp	r3, r0
 80096ae:	d004      	beq.n	80096ba <__swbuf_r+0x62>
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	07db      	lsls	r3, r3, #31
 80096b4:	d519      	bpl.n	80096ea <__swbuf_r+0x92>
 80096b6:	2e0a      	cmp	r6, #10
 80096b8:	d117      	bne.n	80096ea <__swbuf_r+0x92>
 80096ba:	4621      	mov	r1, r4
 80096bc:	4628      	mov	r0, r5
 80096be:	f000 f911 	bl	80098e4 <_fflush_r>
 80096c2:	b190      	cbz	r0, 80096ea <__swbuf_r+0x92>
 80096c4:	e00f      	b.n	80096e6 <__swbuf_r+0x8e>
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <__swbuf_r+0x9c>)
 80096c8:	429c      	cmp	r4, r3
 80096ca:	d101      	bne.n	80096d0 <__swbuf_r+0x78>
 80096cc:	68ac      	ldr	r4, [r5, #8]
 80096ce:	e7d0      	b.n	8009672 <__swbuf_r+0x1a>
 80096d0:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <__swbuf_r+0xa0>)
 80096d2:	429c      	cmp	r4, r3
 80096d4:	bf08      	it	eq
 80096d6:	68ec      	ldreq	r4, [r5, #12]
 80096d8:	e7cb      	b.n	8009672 <__swbuf_r+0x1a>
 80096da:	4621      	mov	r1, r4
 80096dc:	4628      	mov	r0, r5
 80096de:	f000 f80d 	bl	80096fc <__swsetup_r>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d0cc      	beq.n	8009680 <__swbuf_r+0x28>
 80096e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80096ea:	4638      	mov	r0, r7
 80096ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ee:	bf00      	nop
 80096f0:	0800ad54 	.word	0x0800ad54
 80096f4:	0800ad74 	.word	0x0800ad74
 80096f8:	0800ad34 	.word	0x0800ad34

080096fc <__swsetup_r>:
 80096fc:	4b32      	ldr	r3, [pc, #200]	; (80097c8 <__swsetup_r+0xcc>)
 80096fe:	b570      	push	{r4, r5, r6, lr}
 8009700:	681d      	ldr	r5, [r3, #0]
 8009702:	4606      	mov	r6, r0
 8009704:	460c      	mov	r4, r1
 8009706:	b125      	cbz	r5, 8009712 <__swsetup_r+0x16>
 8009708:	69ab      	ldr	r3, [r5, #24]
 800970a:	b913      	cbnz	r3, 8009712 <__swsetup_r+0x16>
 800970c:	4628      	mov	r0, r5
 800970e:	f000 f953 	bl	80099b8 <__sinit>
 8009712:	4b2e      	ldr	r3, [pc, #184]	; (80097cc <__swsetup_r+0xd0>)
 8009714:	429c      	cmp	r4, r3
 8009716:	d10f      	bne.n	8009738 <__swsetup_r+0x3c>
 8009718:	686c      	ldr	r4, [r5, #4]
 800971a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971e:	b29a      	uxth	r2, r3
 8009720:	0715      	lsls	r5, r2, #28
 8009722:	d42c      	bmi.n	800977e <__swsetup_r+0x82>
 8009724:	06d0      	lsls	r0, r2, #27
 8009726:	d411      	bmi.n	800974c <__swsetup_r+0x50>
 8009728:	2209      	movs	r2, #9
 800972a:	6032      	str	r2, [r6, #0]
 800972c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009736:	e03e      	b.n	80097b6 <__swsetup_r+0xba>
 8009738:	4b25      	ldr	r3, [pc, #148]	; (80097d0 <__swsetup_r+0xd4>)
 800973a:	429c      	cmp	r4, r3
 800973c:	d101      	bne.n	8009742 <__swsetup_r+0x46>
 800973e:	68ac      	ldr	r4, [r5, #8]
 8009740:	e7eb      	b.n	800971a <__swsetup_r+0x1e>
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <__swsetup_r+0xd8>)
 8009744:	429c      	cmp	r4, r3
 8009746:	bf08      	it	eq
 8009748:	68ec      	ldreq	r4, [r5, #12]
 800974a:	e7e6      	b.n	800971a <__swsetup_r+0x1e>
 800974c:	0751      	lsls	r1, r2, #29
 800974e:	d512      	bpl.n	8009776 <__swsetup_r+0x7a>
 8009750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009752:	b141      	cbz	r1, 8009766 <__swsetup_r+0x6a>
 8009754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009758:	4299      	cmp	r1, r3
 800975a:	d002      	beq.n	8009762 <__swsetup_r+0x66>
 800975c:	4630      	mov	r0, r6
 800975e:	f000 fa19 	bl	8009b94 <_free_r>
 8009762:	2300      	movs	r3, #0
 8009764:	6363      	str	r3, [r4, #52]	; 0x34
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	2300      	movs	r3, #0
 8009770:	6063      	str	r3, [r4, #4]
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	f043 0308 	orr.w	r3, r3, #8
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	b94b      	cbnz	r3, 8009796 <__swsetup_r+0x9a>
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800978c:	d003      	beq.n	8009796 <__swsetup_r+0x9a>
 800978e:	4621      	mov	r1, r4
 8009790:	4630      	mov	r0, r6
 8009792:	f000 f9bf 	bl	8009b14 <__smakebuf_r>
 8009796:	89a2      	ldrh	r2, [r4, #12]
 8009798:	f012 0301 	ands.w	r3, r2, #1
 800979c:	d00c      	beq.n	80097b8 <__swsetup_r+0xbc>
 800979e:	2300      	movs	r3, #0
 80097a0:	60a3      	str	r3, [r4, #8]
 80097a2:	6963      	ldr	r3, [r4, #20]
 80097a4:	425b      	negs	r3, r3
 80097a6:	61a3      	str	r3, [r4, #24]
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	b953      	cbnz	r3, 80097c2 <__swsetup_r+0xc6>
 80097ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80097b4:	d1ba      	bne.n	800972c <__swsetup_r+0x30>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	0792      	lsls	r2, r2, #30
 80097ba:	bf58      	it	pl
 80097bc:	6963      	ldrpl	r3, [r4, #20]
 80097be:	60a3      	str	r3, [r4, #8]
 80097c0:	e7f2      	b.n	80097a8 <__swsetup_r+0xac>
 80097c2:	2000      	movs	r0, #0
 80097c4:	e7f7      	b.n	80097b6 <__swsetup_r+0xba>
 80097c6:	bf00      	nop
 80097c8:	2000000c 	.word	0x2000000c
 80097cc:	0800ad54 	.word	0x0800ad54
 80097d0:	0800ad74 	.word	0x0800ad74
 80097d4:	0800ad34 	.word	0x0800ad34

080097d8 <__sflush_r>:
 80097d8:	898a      	ldrh	r2, [r1, #12]
 80097da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097de:	4605      	mov	r5, r0
 80097e0:	0710      	lsls	r0, r2, #28
 80097e2:	460c      	mov	r4, r1
 80097e4:	d458      	bmi.n	8009898 <__sflush_r+0xc0>
 80097e6:	684b      	ldr	r3, [r1, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	dc05      	bgt.n	80097f8 <__sflush_r+0x20>
 80097ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dc02      	bgt.n	80097f8 <__sflush_r+0x20>
 80097f2:	2000      	movs	r0, #0
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	d0f9      	beq.n	80097f2 <__sflush_r+0x1a>
 80097fe:	2300      	movs	r3, #0
 8009800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009804:	682f      	ldr	r7, [r5, #0]
 8009806:	6a21      	ldr	r1, [r4, #32]
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	d032      	beq.n	8009872 <__sflush_r+0x9a>
 800980c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	075a      	lsls	r2, r3, #29
 8009812:	d505      	bpl.n	8009820 <__sflush_r+0x48>
 8009814:	6863      	ldr	r3, [r4, #4]
 8009816:	1ac0      	subs	r0, r0, r3
 8009818:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800981a:	b10b      	cbz	r3, 8009820 <__sflush_r+0x48>
 800981c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800981e:	1ac0      	subs	r0, r0, r3
 8009820:	2300      	movs	r3, #0
 8009822:	4602      	mov	r2, r0
 8009824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009826:	6a21      	ldr	r1, [r4, #32]
 8009828:	4628      	mov	r0, r5
 800982a:	47b0      	blx	r6
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	d106      	bne.n	8009840 <__sflush_r+0x68>
 8009832:	6829      	ldr	r1, [r5, #0]
 8009834:	291d      	cmp	r1, #29
 8009836:	d848      	bhi.n	80098ca <__sflush_r+0xf2>
 8009838:	4a29      	ldr	r2, [pc, #164]	; (80098e0 <__sflush_r+0x108>)
 800983a:	40ca      	lsrs	r2, r1
 800983c:	07d6      	lsls	r6, r2, #31
 800983e:	d544      	bpl.n	80098ca <__sflush_r+0xf2>
 8009840:	2200      	movs	r2, #0
 8009842:	6062      	str	r2, [r4, #4]
 8009844:	04d9      	lsls	r1, r3, #19
 8009846:	6922      	ldr	r2, [r4, #16]
 8009848:	6022      	str	r2, [r4, #0]
 800984a:	d504      	bpl.n	8009856 <__sflush_r+0x7e>
 800984c:	1c42      	adds	r2, r0, #1
 800984e:	d101      	bne.n	8009854 <__sflush_r+0x7c>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	b903      	cbnz	r3, 8009856 <__sflush_r+0x7e>
 8009854:	6560      	str	r0, [r4, #84]	; 0x54
 8009856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009858:	602f      	str	r7, [r5, #0]
 800985a:	2900      	cmp	r1, #0
 800985c:	d0c9      	beq.n	80097f2 <__sflush_r+0x1a>
 800985e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009862:	4299      	cmp	r1, r3
 8009864:	d002      	beq.n	800986c <__sflush_r+0x94>
 8009866:	4628      	mov	r0, r5
 8009868:	f000 f994 	bl	8009b94 <_free_r>
 800986c:	2000      	movs	r0, #0
 800986e:	6360      	str	r0, [r4, #52]	; 0x34
 8009870:	e7c0      	b.n	80097f4 <__sflush_r+0x1c>
 8009872:	2301      	movs	r3, #1
 8009874:	4628      	mov	r0, r5
 8009876:	47b0      	blx	r6
 8009878:	1c41      	adds	r1, r0, #1
 800987a:	d1c8      	bne.n	800980e <__sflush_r+0x36>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0c5      	beq.n	800980e <__sflush_r+0x36>
 8009882:	2b1d      	cmp	r3, #29
 8009884:	d001      	beq.n	800988a <__sflush_r+0xb2>
 8009886:	2b16      	cmp	r3, #22
 8009888:	d101      	bne.n	800988e <__sflush_r+0xb6>
 800988a:	602f      	str	r7, [r5, #0]
 800988c:	e7b1      	b.n	80097f2 <__sflush_r+0x1a>
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	e7ad      	b.n	80097f4 <__sflush_r+0x1c>
 8009898:	690f      	ldr	r7, [r1, #16]
 800989a:	2f00      	cmp	r7, #0
 800989c:	d0a9      	beq.n	80097f2 <__sflush_r+0x1a>
 800989e:	0793      	lsls	r3, r2, #30
 80098a0:	680e      	ldr	r6, [r1, #0]
 80098a2:	bf08      	it	eq
 80098a4:	694b      	ldreq	r3, [r1, #20]
 80098a6:	600f      	str	r7, [r1, #0]
 80098a8:	bf18      	it	ne
 80098aa:	2300      	movne	r3, #0
 80098ac:	eba6 0807 	sub.w	r8, r6, r7
 80098b0:	608b      	str	r3, [r1, #8]
 80098b2:	f1b8 0f00 	cmp.w	r8, #0
 80098b6:	dd9c      	ble.n	80097f2 <__sflush_r+0x1a>
 80098b8:	4643      	mov	r3, r8
 80098ba:	463a      	mov	r2, r7
 80098bc:	6a21      	ldr	r1, [r4, #32]
 80098be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b0      	blx	r6
 80098c4:	2800      	cmp	r0, #0
 80098c6:	dc06      	bgt.n	80098d6 <__sflush_r+0xfe>
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ce:	81a3      	strh	r3, [r4, #12]
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d4:	e78e      	b.n	80097f4 <__sflush_r+0x1c>
 80098d6:	4407      	add	r7, r0
 80098d8:	eba8 0800 	sub.w	r8, r8, r0
 80098dc:	e7e9      	b.n	80098b2 <__sflush_r+0xda>
 80098de:	bf00      	nop
 80098e0:	20400001 	.word	0x20400001

080098e4 <_fflush_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	690b      	ldr	r3, [r1, #16]
 80098e8:	4605      	mov	r5, r0
 80098ea:	460c      	mov	r4, r1
 80098ec:	b1db      	cbz	r3, 8009926 <_fflush_r+0x42>
 80098ee:	b118      	cbz	r0, 80098f8 <_fflush_r+0x14>
 80098f0:	6983      	ldr	r3, [r0, #24]
 80098f2:	b90b      	cbnz	r3, 80098f8 <_fflush_r+0x14>
 80098f4:	f000 f860 	bl	80099b8 <__sinit>
 80098f8:	4b0c      	ldr	r3, [pc, #48]	; (800992c <_fflush_r+0x48>)
 80098fa:	429c      	cmp	r4, r3
 80098fc:	d109      	bne.n	8009912 <_fflush_r+0x2e>
 80098fe:	686c      	ldr	r4, [r5, #4]
 8009900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009904:	b17b      	cbz	r3, 8009926 <_fflush_r+0x42>
 8009906:	4621      	mov	r1, r4
 8009908:	4628      	mov	r0, r5
 800990a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800990e:	f7ff bf63 	b.w	80097d8 <__sflush_r>
 8009912:	4b07      	ldr	r3, [pc, #28]	; (8009930 <_fflush_r+0x4c>)
 8009914:	429c      	cmp	r4, r3
 8009916:	d101      	bne.n	800991c <_fflush_r+0x38>
 8009918:	68ac      	ldr	r4, [r5, #8]
 800991a:	e7f1      	b.n	8009900 <_fflush_r+0x1c>
 800991c:	4b05      	ldr	r3, [pc, #20]	; (8009934 <_fflush_r+0x50>)
 800991e:	429c      	cmp	r4, r3
 8009920:	bf08      	it	eq
 8009922:	68ec      	ldreq	r4, [r5, #12]
 8009924:	e7ec      	b.n	8009900 <_fflush_r+0x1c>
 8009926:	2000      	movs	r0, #0
 8009928:	bd38      	pop	{r3, r4, r5, pc}
 800992a:	bf00      	nop
 800992c:	0800ad54 	.word	0x0800ad54
 8009930:	0800ad74 	.word	0x0800ad74
 8009934:	0800ad34 	.word	0x0800ad34

08009938 <std>:
 8009938:	2300      	movs	r3, #0
 800993a:	b510      	push	{r4, lr}
 800993c:	4604      	mov	r4, r0
 800993e:	e9c0 3300 	strd	r3, r3, [r0]
 8009942:	6083      	str	r3, [r0, #8]
 8009944:	8181      	strh	r1, [r0, #12]
 8009946:	6643      	str	r3, [r0, #100]	; 0x64
 8009948:	81c2      	strh	r2, [r0, #14]
 800994a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800994e:	6183      	str	r3, [r0, #24]
 8009950:	4619      	mov	r1, r3
 8009952:	2208      	movs	r2, #8
 8009954:	305c      	adds	r0, #92	; 0x5c
 8009956:	f7ff fdc7 	bl	80094e8 <memset>
 800995a:	4b05      	ldr	r3, [pc, #20]	; (8009970 <std+0x38>)
 800995c:	6263      	str	r3, [r4, #36]	; 0x24
 800995e:	4b05      	ldr	r3, [pc, #20]	; (8009974 <std+0x3c>)
 8009960:	62a3      	str	r3, [r4, #40]	; 0x28
 8009962:	4b05      	ldr	r3, [pc, #20]	; (8009978 <std+0x40>)
 8009964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009966:	4b05      	ldr	r3, [pc, #20]	; (800997c <std+0x44>)
 8009968:	6224      	str	r4, [r4, #32]
 800996a:	6323      	str	r3, [r4, #48]	; 0x30
 800996c:	bd10      	pop	{r4, pc}
 800996e:	bf00      	nop
 8009970:	0800a5a5 	.word	0x0800a5a5
 8009974:	0800a5c7 	.word	0x0800a5c7
 8009978:	0800a5ff 	.word	0x0800a5ff
 800997c:	0800a623 	.word	0x0800a623

08009980 <_cleanup_r>:
 8009980:	4901      	ldr	r1, [pc, #4]	; (8009988 <_cleanup_r+0x8>)
 8009982:	f000 b885 	b.w	8009a90 <_fwalk_reent>
 8009986:	bf00      	nop
 8009988:	080098e5 	.word	0x080098e5

0800998c <__sfmoreglue>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	1e4a      	subs	r2, r1, #1
 8009990:	2568      	movs	r5, #104	; 0x68
 8009992:	4355      	muls	r5, r2
 8009994:	460e      	mov	r6, r1
 8009996:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800999a:	f000 f949 	bl	8009c30 <_malloc_r>
 800999e:	4604      	mov	r4, r0
 80099a0:	b140      	cbz	r0, 80099b4 <__sfmoreglue+0x28>
 80099a2:	2100      	movs	r1, #0
 80099a4:	e9c0 1600 	strd	r1, r6, [r0]
 80099a8:	300c      	adds	r0, #12
 80099aa:	60a0      	str	r0, [r4, #8]
 80099ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099b0:	f7ff fd9a 	bl	80094e8 <memset>
 80099b4:	4620      	mov	r0, r4
 80099b6:	bd70      	pop	{r4, r5, r6, pc}

080099b8 <__sinit>:
 80099b8:	6983      	ldr	r3, [r0, #24]
 80099ba:	b510      	push	{r4, lr}
 80099bc:	4604      	mov	r4, r0
 80099be:	bb33      	cbnz	r3, 8009a0e <__sinit+0x56>
 80099c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80099c4:	6503      	str	r3, [r0, #80]	; 0x50
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <__sinit+0x58>)
 80099c8:	4a12      	ldr	r2, [pc, #72]	; (8009a14 <__sinit+0x5c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6282      	str	r2, [r0, #40]	; 0x28
 80099ce:	4298      	cmp	r0, r3
 80099d0:	bf04      	itt	eq
 80099d2:	2301      	moveq	r3, #1
 80099d4:	6183      	streq	r3, [r0, #24]
 80099d6:	f000 f81f 	bl	8009a18 <__sfp>
 80099da:	6060      	str	r0, [r4, #4]
 80099dc:	4620      	mov	r0, r4
 80099de:	f000 f81b 	bl	8009a18 <__sfp>
 80099e2:	60a0      	str	r0, [r4, #8]
 80099e4:	4620      	mov	r0, r4
 80099e6:	f000 f817 	bl	8009a18 <__sfp>
 80099ea:	2200      	movs	r2, #0
 80099ec:	60e0      	str	r0, [r4, #12]
 80099ee:	2104      	movs	r1, #4
 80099f0:	6860      	ldr	r0, [r4, #4]
 80099f2:	f7ff ffa1 	bl	8009938 <std>
 80099f6:	2201      	movs	r2, #1
 80099f8:	2109      	movs	r1, #9
 80099fa:	68a0      	ldr	r0, [r4, #8]
 80099fc:	f7ff ff9c 	bl	8009938 <std>
 8009a00:	2202      	movs	r2, #2
 8009a02:	2112      	movs	r1, #18
 8009a04:	68e0      	ldr	r0, [r4, #12]
 8009a06:	f7ff ff97 	bl	8009938 <std>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	61a3      	str	r3, [r4, #24]
 8009a0e:	bd10      	pop	{r4, pc}
 8009a10:	0800ad30 	.word	0x0800ad30
 8009a14:	08009981 	.word	0x08009981

08009a18 <__sfp>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	4b1b      	ldr	r3, [pc, #108]	; (8009a88 <__sfp+0x70>)
 8009a1c:	681e      	ldr	r6, [r3, #0]
 8009a1e:	69b3      	ldr	r3, [r6, #24]
 8009a20:	4607      	mov	r7, r0
 8009a22:	b913      	cbnz	r3, 8009a2a <__sfp+0x12>
 8009a24:	4630      	mov	r0, r6
 8009a26:	f7ff ffc7 	bl	80099b8 <__sinit>
 8009a2a:	3648      	adds	r6, #72	; 0x48
 8009a2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a30:	3b01      	subs	r3, #1
 8009a32:	d503      	bpl.n	8009a3c <__sfp+0x24>
 8009a34:	6833      	ldr	r3, [r6, #0]
 8009a36:	b133      	cbz	r3, 8009a46 <__sfp+0x2e>
 8009a38:	6836      	ldr	r6, [r6, #0]
 8009a3a:	e7f7      	b.n	8009a2c <__sfp+0x14>
 8009a3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a40:	b16d      	cbz	r5, 8009a5e <__sfp+0x46>
 8009a42:	3468      	adds	r4, #104	; 0x68
 8009a44:	e7f4      	b.n	8009a30 <__sfp+0x18>
 8009a46:	2104      	movs	r1, #4
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7ff ff9f 	bl	800998c <__sfmoreglue>
 8009a4e:	6030      	str	r0, [r6, #0]
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d1f1      	bne.n	8009a38 <__sfp+0x20>
 8009a54:	230c      	movs	r3, #12
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	4604      	mov	r4, r0
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a5e:	4b0b      	ldr	r3, [pc, #44]	; (8009a8c <__sfp+0x74>)
 8009a60:	6665      	str	r5, [r4, #100]	; 0x64
 8009a62:	e9c4 5500 	strd	r5, r5, [r4]
 8009a66:	60a5      	str	r5, [r4, #8]
 8009a68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009a6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009a70:	2208      	movs	r2, #8
 8009a72:	4629      	mov	r1, r5
 8009a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a78:	f7ff fd36 	bl	80094e8 <memset>
 8009a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a84:	e7e9      	b.n	8009a5a <__sfp+0x42>
 8009a86:	bf00      	nop
 8009a88:	0800ad30 	.word	0x0800ad30
 8009a8c:	ffff0001 	.word	0xffff0001

08009a90 <_fwalk_reent>:
 8009a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a94:	4680      	mov	r8, r0
 8009a96:	4689      	mov	r9, r1
 8009a98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	b914      	cbnz	r4, 8009aa6 <_fwalk_reent+0x16>
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aa6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009aaa:	3f01      	subs	r7, #1
 8009aac:	d501      	bpl.n	8009ab2 <_fwalk_reent+0x22>
 8009aae:	6824      	ldr	r4, [r4, #0]
 8009ab0:	e7f5      	b.n	8009a9e <_fwalk_reent+0xe>
 8009ab2:	89ab      	ldrh	r3, [r5, #12]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d907      	bls.n	8009ac8 <_fwalk_reent+0x38>
 8009ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009abc:	3301      	adds	r3, #1
 8009abe:	d003      	beq.n	8009ac8 <_fwalk_reent+0x38>
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	47c8      	blx	r9
 8009ac6:	4306      	orrs	r6, r0
 8009ac8:	3568      	adds	r5, #104	; 0x68
 8009aca:	e7ee      	b.n	8009aaa <_fwalk_reent+0x1a>

08009acc <__swhatbuf_r>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	460e      	mov	r6, r1
 8009ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	b096      	sub	sp, #88	; 0x58
 8009ad8:	4614      	mov	r4, r2
 8009ada:	461d      	mov	r5, r3
 8009adc:	da07      	bge.n	8009aee <__swhatbuf_r+0x22>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	89b3      	ldrh	r3, [r6, #12]
 8009ae4:	061a      	lsls	r2, r3, #24
 8009ae6:	d410      	bmi.n	8009b0a <__swhatbuf_r+0x3e>
 8009ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aec:	e00e      	b.n	8009b0c <__swhatbuf_r+0x40>
 8009aee:	466a      	mov	r2, sp
 8009af0:	f000 fdbe 	bl	800a670 <_fstat_r>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	dbf2      	blt.n	8009ade <__swhatbuf_r+0x12>
 8009af8:	9a01      	ldr	r2, [sp, #4]
 8009afa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009afe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b02:	425a      	negs	r2, r3
 8009b04:	415a      	adcs	r2, r3
 8009b06:	602a      	str	r2, [r5, #0]
 8009b08:	e7ee      	b.n	8009ae8 <__swhatbuf_r+0x1c>
 8009b0a:	2340      	movs	r3, #64	; 0x40
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	b016      	add	sp, #88	; 0x58
 8009b12:	bd70      	pop	{r4, r5, r6, pc}

08009b14 <__smakebuf_r>:
 8009b14:	898b      	ldrh	r3, [r1, #12]
 8009b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b18:	079d      	lsls	r5, r3, #30
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	d507      	bpl.n	8009b30 <__smakebuf_r+0x1c>
 8009b20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	6123      	str	r3, [r4, #16]
 8009b28:	2301      	movs	r3, #1
 8009b2a:	6163      	str	r3, [r4, #20]
 8009b2c:	b002      	add	sp, #8
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	ab01      	add	r3, sp, #4
 8009b32:	466a      	mov	r2, sp
 8009b34:	f7ff ffca 	bl	8009acc <__swhatbuf_r>
 8009b38:	9900      	ldr	r1, [sp, #0]
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f000 f877 	bl	8009c30 <_malloc_r>
 8009b42:	b948      	cbnz	r0, 8009b58 <__smakebuf_r+0x44>
 8009b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b48:	059a      	lsls	r2, r3, #22
 8009b4a:	d4ef      	bmi.n	8009b2c <__smakebuf_r+0x18>
 8009b4c:	f023 0303 	bic.w	r3, r3, #3
 8009b50:	f043 0302 	orr.w	r3, r3, #2
 8009b54:	81a3      	strh	r3, [r4, #12]
 8009b56:	e7e3      	b.n	8009b20 <__smakebuf_r+0xc>
 8009b58:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <__smakebuf_r+0x7c>)
 8009b5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	6020      	str	r0, [r4, #0]
 8009b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	9b00      	ldr	r3, [sp, #0]
 8009b68:	6163      	str	r3, [r4, #20]
 8009b6a:	9b01      	ldr	r3, [sp, #4]
 8009b6c:	6120      	str	r0, [r4, #16]
 8009b6e:	b15b      	cbz	r3, 8009b88 <__smakebuf_r+0x74>
 8009b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b74:	4630      	mov	r0, r6
 8009b76:	f000 fd8d 	bl	800a694 <_isatty_r>
 8009b7a:	b128      	cbz	r0, 8009b88 <__smakebuf_r+0x74>
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	f023 0303 	bic.w	r3, r3, #3
 8009b82:	f043 0301 	orr.w	r3, r3, #1
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	431d      	orrs	r5, r3
 8009b8c:	81a5      	strh	r5, [r4, #12]
 8009b8e:	e7cd      	b.n	8009b2c <__smakebuf_r+0x18>
 8009b90:	08009981 	.word	0x08009981

08009b94 <_free_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4605      	mov	r5, r0
 8009b98:	2900      	cmp	r1, #0
 8009b9a:	d045      	beq.n	8009c28 <_free_r+0x94>
 8009b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba0:	1f0c      	subs	r4, r1, #4
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	bfb8      	it	lt
 8009ba6:	18e4      	addlt	r4, r4, r3
 8009ba8:	f000 fdba 	bl	800a720 <__malloc_lock>
 8009bac:	4a1f      	ldr	r2, [pc, #124]	; (8009c2c <_free_r+0x98>)
 8009bae:	6813      	ldr	r3, [r2, #0]
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	b933      	cbnz	r3, 8009bc2 <_free_r+0x2e>
 8009bb4:	6063      	str	r3, [r4, #4]
 8009bb6:	6014      	str	r4, [r2, #0]
 8009bb8:	4628      	mov	r0, r5
 8009bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bbe:	f000 bdb0 	b.w	800a722 <__malloc_unlock>
 8009bc2:	42a3      	cmp	r3, r4
 8009bc4:	d90c      	bls.n	8009be0 <_free_r+0x4c>
 8009bc6:	6821      	ldr	r1, [r4, #0]
 8009bc8:	1862      	adds	r2, r4, r1
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	bf04      	itt	eq
 8009bce:	681a      	ldreq	r2, [r3, #0]
 8009bd0:	685b      	ldreq	r3, [r3, #4]
 8009bd2:	6063      	str	r3, [r4, #4]
 8009bd4:	bf04      	itt	eq
 8009bd6:	1852      	addeq	r2, r2, r1
 8009bd8:	6022      	streq	r2, [r4, #0]
 8009bda:	6004      	str	r4, [r0, #0]
 8009bdc:	e7ec      	b.n	8009bb8 <_free_r+0x24>
 8009bde:	4613      	mov	r3, r2
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	b10a      	cbz	r2, 8009be8 <_free_r+0x54>
 8009be4:	42a2      	cmp	r2, r4
 8009be6:	d9fa      	bls.n	8009bde <_free_r+0x4a>
 8009be8:	6819      	ldr	r1, [r3, #0]
 8009bea:	1858      	adds	r0, r3, r1
 8009bec:	42a0      	cmp	r0, r4
 8009bee:	d10b      	bne.n	8009c08 <_free_r+0x74>
 8009bf0:	6820      	ldr	r0, [r4, #0]
 8009bf2:	4401      	add	r1, r0
 8009bf4:	1858      	adds	r0, r3, r1
 8009bf6:	4282      	cmp	r2, r0
 8009bf8:	6019      	str	r1, [r3, #0]
 8009bfa:	d1dd      	bne.n	8009bb8 <_free_r+0x24>
 8009bfc:	6810      	ldr	r0, [r2, #0]
 8009bfe:	6852      	ldr	r2, [r2, #4]
 8009c00:	605a      	str	r2, [r3, #4]
 8009c02:	4401      	add	r1, r0
 8009c04:	6019      	str	r1, [r3, #0]
 8009c06:	e7d7      	b.n	8009bb8 <_free_r+0x24>
 8009c08:	d902      	bls.n	8009c10 <_free_r+0x7c>
 8009c0a:	230c      	movs	r3, #12
 8009c0c:	602b      	str	r3, [r5, #0]
 8009c0e:	e7d3      	b.n	8009bb8 <_free_r+0x24>
 8009c10:	6820      	ldr	r0, [r4, #0]
 8009c12:	1821      	adds	r1, r4, r0
 8009c14:	428a      	cmp	r2, r1
 8009c16:	bf04      	itt	eq
 8009c18:	6811      	ldreq	r1, [r2, #0]
 8009c1a:	6852      	ldreq	r2, [r2, #4]
 8009c1c:	6062      	str	r2, [r4, #4]
 8009c1e:	bf04      	itt	eq
 8009c20:	1809      	addeq	r1, r1, r0
 8009c22:	6021      	streq	r1, [r4, #0]
 8009c24:	605c      	str	r4, [r3, #4]
 8009c26:	e7c7      	b.n	8009bb8 <_free_r+0x24>
 8009c28:	bd38      	pop	{r3, r4, r5, pc}
 8009c2a:	bf00      	nop
 8009c2c:	20000090 	.word	0x20000090

08009c30 <_malloc_r>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	1ccd      	adds	r5, r1, #3
 8009c34:	f025 0503 	bic.w	r5, r5, #3
 8009c38:	3508      	adds	r5, #8
 8009c3a:	2d0c      	cmp	r5, #12
 8009c3c:	bf38      	it	cc
 8009c3e:	250c      	movcc	r5, #12
 8009c40:	2d00      	cmp	r5, #0
 8009c42:	4606      	mov	r6, r0
 8009c44:	db01      	blt.n	8009c4a <_malloc_r+0x1a>
 8009c46:	42a9      	cmp	r1, r5
 8009c48:	d903      	bls.n	8009c52 <_malloc_r+0x22>
 8009c4a:	230c      	movs	r3, #12
 8009c4c:	6033      	str	r3, [r6, #0]
 8009c4e:	2000      	movs	r0, #0
 8009c50:	bd70      	pop	{r4, r5, r6, pc}
 8009c52:	f000 fd65 	bl	800a720 <__malloc_lock>
 8009c56:	4a21      	ldr	r2, [pc, #132]	; (8009cdc <_malloc_r+0xac>)
 8009c58:	6814      	ldr	r4, [r2, #0]
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	b991      	cbnz	r1, 8009c84 <_malloc_r+0x54>
 8009c5e:	4c20      	ldr	r4, [pc, #128]	; (8009ce0 <_malloc_r+0xb0>)
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	b91b      	cbnz	r3, 8009c6c <_malloc_r+0x3c>
 8009c64:	4630      	mov	r0, r6
 8009c66:	f000 fc8d 	bl	800a584 <_sbrk_r>
 8009c6a:	6020      	str	r0, [r4, #0]
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f000 fc88 	bl	800a584 <_sbrk_r>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d124      	bne.n	8009cc2 <_malloc_r+0x92>
 8009c78:	230c      	movs	r3, #12
 8009c7a:	6033      	str	r3, [r6, #0]
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f000 fd50 	bl	800a722 <__malloc_unlock>
 8009c82:	e7e4      	b.n	8009c4e <_malloc_r+0x1e>
 8009c84:	680b      	ldr	r3, [r1, #0]
 8009c86:	1b5b      	subs	r3, r3, r5
 8009c88:	d418      	bmi.n	8009cbc <_malloc_r+0x8c>
 8009c8a:	2b0b      	cmp	r3, #11
 8009c8c:	d90f      	bls.n	8009cae <_malloc_r+0x7e>
 8009c8e:	600b      	str	r3, [r1, #0]
 8009c90:	50cd      	str	r5, [r1, r3]
 8009c92:	18cc      	adds	r4, r1, r3
 8009c94:	4630      	mov	r0, r6
 8009c96:	f000 fd44 	bl	800a722 <__malloc_unlock>
 8009c9a:	f104 000b 	add.w	r0, r4, #11
 8009c9e:	1d23      	adds	r3, r4, #4
 8009ca0:	f020 0007 	bic.w	r0, r0, #7
 8009ca4:	1ac3      	subs	r3, r0, r3
 8009ca6:	d0d3      	beq.n	8009c50 <_malloc_r+0x20>
 8009ca8:	425a      	negs	r2, r3
 8009caa:	50e2      	str	r2, [r4, r3]
 8009cac:	e7d0      	b.n	8009c50 <_malloc_r+0x20>
 8009cae:	428c      	cmp	r4, r1
 8009cb0:	684b      	ldr	r3, [r1, #4]
 8009cb2:	bf16      	itet	ne
 8009cb4:	6063      	strne	r3, [r4, #4]
 8009cb6:	6013      	streq	r3, [r2, #0]
 8009cb8:	460c      	movne	r4, r1
 8009cba:	e7eb      	b.n	8009c94 <_malloc_r+0x64>
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	6849      	ldr	r1, [r1, #4]
 8009cc0:	e7cc      	b.n	8009c5c <_malloc_r+0x2c>
 8009cc2:	1cc4      	adds	r4, r0, #3
 8009cc4:	f024 0403 	bic.w	r4, r4, #3
 8009cc8:	42a0      	cmp	r0, r4
 8009cca:	d005      	beq.n	8009cd8 <_malloc_r+0xa8>
 8009ccc:	1a21      	subs	r1, r4, r0
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f000 fc58 	bl	800a584 <_sbrk_r>
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d0cf      	beq.n	8009c78 <_malloc_r+0x48>
 8009cd8:	6025      	str	r5, [r4, #0]
 8009cda:	e7db      	b.n	8009c94 <_malloc_r+0x64>
 8009cdc:	20000090 	.word	0x20000090
 8009ce0:	20000094 	.word	0x20000094

08009ce4 <__ssputs_r>:
 8009ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce8:	688e      	ldr	r6, [r1, #8]
 8009cea:	429e      	cmp	r6, r3
 8009cec:	4682      	mov	sl, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	4690      	mov	r8, r2
 8009cf2:	4699      	mov	r9, r3
 8009cf4:	d837      	bhi.n	8009d66 <__ssputs_r+0x82>
 8009cf6:	898a      	ldrh	r2, [r1, #12]
 8009cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cfc:	d031      	beq.n	8009d62 <__ssputs_r+0x7e>
 8009cfe:	6825      	ldr	r5, [r4, #0]
 8009d00:	6909      	ldr	r1, [r1, #16]
 8009d02:	1a6f      	subs	r7, r5, r1
 8009d04:	6965      	ldr	r5, [r4, #20]
 8009d06:	2302      	movs	r3, #2
 8009d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d10:	f109 0301 	add.w	r3, r9, #1
 8009d14:	443b      	add	r3, r7
 8009d16:	429d      	cmp	r5, r3
 8009d18:	bf38      	it	cc
 8009d1a:	461d      	movcc	r5, r3
 8009d1c:	0553      	lsls	r3, r2, #21
 8009d1e:	d530      	bpl.n	8009d82 <__ssputs_r+0x9e>
 8009d20:	4629      	mov	r1, r5
 8009d22:	f7ff ff85 	bl	8009c30 <_malloc_r>
 8009d26:	4606      	mov	r6, r0
 8009d28:	b950      	cbnz	r0, 8009d40 <__ssputs_r+0x5c>
 8009d2a:	230c      	movs	r3, #12
 8009d2c:	f8ca 3000 	str.w	r3, [sl]
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d36:	81a3      	strh	r3, [r4, #12]
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d40:	463a      	mov	r2, r7
 8009d42:	6921      	ldr	r1, [r4, #16]
 8009d44:	f000 fcc8 	bl	800a6d8 <memcpy>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	6126      	str	r6, [r4, #16]
 8009d56:	6165      	str	r5, [r4, #20]
 8009d58:	443e      	add	r6, r7
 8009d5a:	1bed      	subs	r5, r5, r7
 8009d5c:	6026      	str	r6, [r4, #0]
 8009d5e:	60a5      	str	r5, [r4, #8]
 8009d60:	464e      	mov	r6, r9
 8009d62:	454e      	cmp	r6, r9
 8009d64:	d900      	bls.n	8009d68 <__ssputs_r+0x84>
 8009d66:	464e      	mov	r6, r9
 8009d68:	4632      	mov	r2, r6
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	6820      	ldr	r0, [r4, #0]
 8009d6e:	f000 fcbe 	bl	800a6ee <memmove>
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	1b9b      	subs	r3, r3, r6
 8009d76:	60a3      	str	r3, [r4, #8]
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	441e      	add	r6, r3
 8009d7c:	6026      	str	r6, [r4, #0]
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e7dc      	b.n	8009d3c <__ssputs_r+0x58>
 8009d82:	462a      	mov	r2, r5
 8009d84:	f000 fcce 	bl	800a724 <_realloc_r>
 8009d88:	4606      	mov	r6, r0
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d1e2      	bne.n	8009d54 <__ssputs_r+0x70>
 8009d8e:	6921      	ldr	r1, [r4, #16]
 8009d90:	4650      	mov	r0, sl
 8009d92:	f7ff feff 	bl	8009b94 <_free_r>
 8009d96:	e7c8      	b.n	8009d2a <__ssputs_r+0x46>

08009d98 <_svfiprintf_r>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	461d      	mov	r5, r3
 8009d9e:	898b      	ldrh	r3, [r1, #12]
 8009da0:	061f      	lsls	r7, r3, #24
 8009da2:	b09d      	sub	sp, #116	; 0x74
 8009da4:	4680      	mov	r8, r0
 8009da6:	460c      	mov	r4, r1
 8009da8:	4616      	mov	r6, r2
 8009daa:	d50f      	bpl.n	8009dcc <_svfiprintf_r+0x34>
 8009dac:	690b      	ldr	r3, [r1, #16]
 8009dae:	b96b      	cbnz	r3, 8009dcc <_svfiprintf_r+0x34>
 8009db0:	2140      	movs	r1, #64	; 0x40
 8009db2:	f7ff ff3d 	bl	8009c30 <_malloc_r>
 8009db6:	6020      	str	r0, [r4, #0]
 8009db8:	6120      	str	r0, [r4, #16]
 8009dba:	b928      	cbnz	r0, 8009dc8 <_svfiprintf_r+0x30>
 8009dbc:	230c      	movs	r3, #12
 8009dbe:	f8c8 3000 	str.w	r3, [r8]
 8009dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc6:	e0c8      	b.n	8009f5a <_svfiprintf_r+0x1c2>
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	6163      	str	r3, [r4, #20]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dd6:	2330      	movs	r3, #48	; 0x30
 8009dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ddc:	9503      	str	r5, [sp, #12]
 8009dde:	f04f 0b01 	mov.w	fp, #1
 8009de2:	4637      	mov	r7, r6
 8009de4:	463d      	mov	r5, r7
 8009de6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009dea:	b10b      	cbz	r3, 8009df0 <_svfiprintf_r+0x58>
 8009dec:	2b25      	cmp	r3, #37	; 0x25
 8009dee:	d13e      	bne.n	8009e6e <_svfiprintf_r+0xd6>
 8009df0:	ebb7 0a06 	subs.w	sl, r7, r6
 8009df4:	d00b      	beq.n	8009e0e <_svfiprintf_r+0x76>
 8009df6:	4653      	mov	r3, sl
 8009df8:	4632      	mov	r2, r6
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	f7ff ff71 	bl	8009ce4 <__ssputs_r>
 8009e02:	3001      	adds	r0, #1
 8009e04:	f000 80a4 	beq.w	8009f50 <_svfiprintf_r+0x1b8>
 8009e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0a:	4453      	add	r3, sl
 8009e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0e:	783b      	ldrb	r3, [r7, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 809d 	beq.w	8009f50 <_svfiprintf_r+0x1b8>
 8009e16:	2300      	movs	r3, #0
 8009e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	9307      	str	r3, [sp, #28]
 8009e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e28:	931a      	str	r3, [sp, #104]	; 0x68
 8009e2a:	462f      	mov	r7, r5
 8009e2c:	2205      	movs	r2, #5
 8009e2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e32:	4850      	ldr	r0, [pc, #320]	; (8009f74 <_svfiprintf_r+0x1dc>)
 8009e34:	f7f6 f9cc 	bl	80001d0 <memchr>
 8009e38:	9b04      	ldr	r3, [sp, #16]
 8009e3a:	b9d0      	cbnz	r0, 8009e72 <_svfiprintf_r+0xda>
 8009e3c:	06d9      	lsls	r1, r3, #27
 8009e3e:	bf44      	itt	mi
 8009e40:	2220      	movmi	r2, #32
 8009e42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e46:	071a      	lsls	r2, r3, #28
 8009e48:	bf44      	itt	mi
 8009e4a:	222b      	movmi	r2, #43	; 0x2b
 8009e4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e50:	782a      	ldrb	r2, [r5, #0]
 8009e52:	2a2a      	cmp	r2, #42	; 0x2a
 8009e54:	d015      	beq.n	8009e82 <_svfiprintf_r+0xea>
 8009e56:	9a07      	ldr	r2, [sp, #28]
 8009e58:	462f      	mov	r7, r5
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	250a      	movs	r5, #10
 8009e5e:	4639      	mov	r1, r7
 8009e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e64:	3b30      	subs	r3, #48	; 0x30
 8009e66:	2b09      	cmp	r3, #9
 8009e68:	d94d      	bls.n	8009f06 <_svfiprintf_r+0x16e>
 8009e6a:	b1b8      	cbz	r0, 8009e9c <_svfiprintf_r+0x104>
 8009e6c:	e00f      	b.n	8009e8e <_svfiprintf_r+0xf6>
 8009e6e:	462f      	mov	r7, r5
 8009e70:	e7b8      	b.n	8009de4 <_svfiprintf_r+0x4c>
 8009e72:	4a40      	ldr	r2, [pc, #256]	; (8009f74 <_svfiprintf_r+0x1dc>)
 8009e74:	1a80      	subs	r0, r0, r2
 8009e76:	fa0b f000 	lsl.w	r0, fp, r0
 8009e7a:	4318      	orrs	r0, r3
 8009e7c:	9004      	str	r0, [sp, #16]
 8009e7e:	463d      	mov	r5, r7
 8009e80:	e7d3      	b.n	8009e2a <_svfiprintf_r+0x92>
 8009e82:	9a03      	ldr	r2, [sp, #12]
 8009e84:	1d11      	adds	r1, r2, #4
 8009e86:	6812      	ldr	r2, [r2, #0]
 8009e88:	9103      	str	r1, [sp, #12]
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	db01      	blt.n	8009e92 <_svfiprintf_r+0xfa>
 8009e8e:	9207      	str	r2, [sp, #28]
 8009e90:	e004      	b.n	8009e9c <_svfiprintf_r+0x104>
 8009e92:	4252      	negs	r2, r2
 8009e94:	f043 0302 	orr.w	r3, r3, #2
 8009e98:	9207      	str	r2, [sp, #28]
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	783b      	ldrb	r3, [r7, #0]
 8009e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8009ea0:	d10c      	bne.n	8009ebc <_svfiprintf_r+0x124>
 8009ea2:	787b      	ldrb	r3, [r7, #1]
 8009ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea6:	d133      	bne.n	8009f10 <_svfiprintf_r+0x178>
 8009ea8:	9b03      	ldr	r3, [sp, #12]
 8009eaa:	1d1a      	adds	r2, r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	9203      	str	r2, [sp, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	bfb8      	it	lt
 8009eb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009eb8:	3702      	adds	r7, #2
 8009eba:	9305      	str	r3, [sp, #20]
 8009ebc:	4d2e      	ldr	r5, [pc, #184]	; (8009f78 <_svfiprintf_r+0x1e0>)
 8009ebe:	7839      	ldrb	r1, [r7, #0]
 8009ec0:	2203      	movs	r2, #3
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f7f6 f984 	bl	80001d0 <memchr>
 8009ec8:	b138      	cbz	r0, 8009eda <_svfiprintf_r+0x142>
 8009eca:	2340      	movs	r3, #64	; 0x40
 8009ecc:	1b40      	subs	r0, r0, r5
 8009ece:	fa03 f000 	lsl.w	r0, r3, r0
 8009ed2:	9b04      	ldr	r3, [sp, #16]
 8009ed4:	4303      	orrs	r3, r0
 8009ed6:	3701      	adds	r7, #1
 8009ed8:	9304      	str	r3, [sp, #16]
 8009eda:	7839      	ldrb	r1, [r7, #0]
 8009edc:	4827      	ldr	r0, [pc, #156]	; (8009f7c <_svfiprintf_r+0x1e4>)
 8009ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ee2:	2206      	movs	r2, #6
 8009ee4:	1c7e      	adds	r6, r7, #1
 8009ee6:	f7f6 f973 	bl	80001d0 <memchr>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d038      	beq.n	8009f60 <_svfiprintf_r+0x1c8>
 8009eee:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <_svfiprintf_r+0x1e8>)
 8009ef0:	bb13      	cbnz	r3, 8009f38 <_svfiprintf_r+0x1a0>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	3307      	adds	r3, #7
 8009ef6:	f023 0307 	bic.w	r3, r3, #7
 8009efa:	3308      	adds	r3, #8
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f00:	444b      	add	r3, r9
 8009f02:	9309      	str	r3, [sp, #36]	; 0x24
 8009f04:	e76d      	b.n	8009de2 <_svfiprintf_r+0x4a>
 8009f06:	fb05 3202 	mla	r2, r5, r2, r3
 8009f0a:	2001      	movs	r0, #1
 8009f0c:	460f      	mov	r7, r1
 8009f0e:	e7a6      	b.n	8009e5e <_svfiprintf_r+0xc6>
 8009f10:	2300      	movs	r3, #0
 8009f12:	3701      	adds	r7, #1
 8009f14:	9305      	str	r3, [sp, #20]
 8009f16:	4619      	mov	r1, r3
 8009f18:	250a      	movs	r5, #10
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f20:	3a30      	subs	r2, #48	; 0x30
 8009f22:	2a09      	cmp	r2, #9
 8009f24:	d903      	bls.n	8009f2e <_svfiprintf_r+0x196>
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0c8      	beq.n	8009ebc <_svfiprintf_r+0x124>
 8009f2a:	9105      	str	r1, [sp, #20]
 8009f2c:	e7c6      	b.n	8009ebc <_svfiprintf_r+0x124>
 8009f2e:	fb05 2101 	mla	r1, r5, r1, r2
 8009f32:	2301      	movs	r3, #1
 8009f34:	4607      	mov	r7, r0
 8009f36:	e7f0      	b.n	8009f1a <_svfiprintf_r+0x182>
 8009f38:	ab03      	add	r3, sp, #12
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	4622      	mov	r2, r4
 8009f3e:	4b11      	ldr	r3, [pc, #68]	; (8009f84 <_svfiprintf_r+0x1ec>)
 8009f40:	a904      	add	r1, sp, #16
 8009f42:	4640      	mov	r0, r8
 8009f44:	f3af 8000 	nop.w
 8009f48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009f4c:	4681      	mov	r9, r0
 8009f4e:	d1d6      	bne.n	8009efe <_svfiprintf_r+0x166>
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	065b      	lsls	r3, r3, #25
 8009f54:	f53f af35 	bmi.w	8009dc2 <_svfiprintf_r+0x2a>
 8009f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5a:	b01d      	add	sp, #116	; 0x74
 8009f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f60:	ab03      	add	r3, sp, #12
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	4622      	mov	r2, r4
 8009f66:	4b07      	ldr	r3, [pc, #28]	; (8009f84 <_svfiprintf_r+0x1ec>)
 8009f68:	a904      	add	r1, sp, #16
 8009f6a:	4640      	mov	r0, r8
 8009f6c:	f000 f9c2 	bl	800a2f4 <_printf_i>
 8009f70:	e7ea      	b.n	8009f48 <_svfiprintf_r+0x1b0>
 8009f72:	bf00      	nop
 8009f74:	0800ad94 	.word	0x0800ad94
 8009f78:	0800ad9a 	.word	0x0800ad9a
 8009f7c:	0800ad9e 	.word	0x0800ad9e
 8009f80:	00000000 	.word	0x00000000
 8009f84:	08009ce5 	.word	0x08009ce5

08009f88 <__sfputc_r>:
 8009f88:	6893      	ldr	r3, [r2, #8]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	b410      	push	{r4}
 8009f90:	6093      	str	r3, [r2, #8]
 8009f92:	da08      	bge.n	8009fa6 <__sfputc_r+0x1e>
 8009f94:	6994      	ldr	r4, [r2, #24]
 8009f96:	42a3      	cmp	r3, r4
 8009f98:	db01      	blt.n	8009f9e <__sfputc_r+0x16>
 8009f9a:	290a      	cmp	r1, #10
 8009f9c:	d103      	bne.n	8009fa6 <__sfputc_r+0x1e>
 8009f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa2:	f7ff bb59 	b.w	8009658 <__swbuf_r>
 8009fa6:	6813      	ldr	r3, [r2, #0]
 8009fa8:	1c58      	adds	r0, r3, #1
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	7019      	strb	r1, [r3, #0]
 8009fae:	4608      	mov	r0, r1
 8009fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <__sfputs_r>:
 8009fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb8:	4606      	mov	r6, r0
 8009fba:	460f      	mov	r7, r1
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	18d5      	adds	r5, r2, r3
 8009fc0:	42ac      	cmp	r4, r5
 8009fc2:	d101      	bne.n	8009fc8 <__sfputs_r+0x12>
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	e007      	b.n	8009fd8 <__sfputs_r+0x22>
 8009fc8:	463a      	mov	r2, r7
 8009fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f7ff ffda 	bl	8009f88 <__sfputc_r>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d1f3      	bne.n	8009fc0 <__sfputs_r+0xa>
 8009fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fdc <_vfiprintf_r>:
 8009fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	b09d      	sub	sp, #116	; 0x74
 8009fe4:	4617      	mov	r7, r2
 8009fe6:	461d      	mov	r5, r3
 8009fe8:	4606      	mov	r6, r0
 8009fea:	b118      	cbz	r0, 8009ff4 <_vfiprintf_r+0x18>
 8009fec:	6983      	ldr	r3, [r0, #24]
 8009fee:	b90b      	cbnz	r3, 8009ff4 <_vfiprintf_r+0x18>
 8009ff0:	f7ff fce2 	bl	80099b8 <__sinit>
 8009ff4:	4b7c      	ldr	r3, [pc, #496]	; (800a1e8 <_vfiprintf_r+0x20c>)
 8009ff6:	429c      	cmp	r4, r3
 8009ff8:	d158      	bne.n	800a0ac <_vfiprintf_r+0xd0>
 8009ffa:	6874      	ldr	r4, [r6, #4]
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	0718      	lsls	r0, r3, #28
 800a000:	d55e      	bpl.n	800a0c0 <_vfiprintf_r+0xe4>
 800a002:	6923      	ldr	r3, [r4, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d05b      	beq.n	800a0c0 <_vfiprintf_r+0xe4>
 800a008:	2300      	movs	r3, #0
 800a00a:	9309      	str	r3, [sp, #36]	; 0x24
 800a00c:	2320      	movs	r3, #32
 800a00e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a012:	2330      	movs	r3, #48	; 0x30
 800a014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a018:	9503      	str	r5, [sp, #12]
 800a01a:	f04f 0b01 	mov.w	fp, #1
 800a01e:	46b8      	mov	r8, r7
 800a020:	4645      	mov	r5, r8
 800a022:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a026:	b10b      	cbz	r3, 800a02c <_vfiprintf_r+0x50>
 800a028:	2b25      	cmp	r3, #37	; 0x25
 800a02a:	d154      	bne.n	800a0d6 <_vfiprintf_r+0xfa>
 800a02c:	ebb8 0a07 	subs.w	sl, r8, r7
 800a030:	d00b      	beq.n	800a04a <_vfiprintf_r+0x6e>
 800a032:	4653      	mov	r3, sl
 800a034:	463a      	mov	r2, r7
 800a036:	4621      	mov	r1, r4
 800a038:	4630      	mov	r0, r6
 800a03a:	f7ff ffbc 	bl	8009fb6 <__sfputs_r>
 800a03e:	3001      	adds	r0, #1
 800a040:	f000 80c2 	beq.w	800a1c8 <_vfiprintf_r+0x1ec>
 800a044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a046:	4453      	add	r3, sl
 800a048:	9309      	str	r3, [sp, #36]	; 0x24
 800a04a:	f898 3000 	ldrb.w	r3, [r8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 80ba 	beq.w	800a1c8 <_vfiprintf_r+0x1ec>
 800a054:	2300      	movs	r3, #0
 800a056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a05a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	9307      	str	r3, [sp, #28]
 800a062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a066:	931a      	str	r3, [sp, #104]	; 0x68
 800a068:	46a8      	mov	r8, r5
 800a06a:	2205      	movs	r2, #5
 800a06c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a070:	485e      	ldr	r0, [pc, #376]	; (800a1ec <_vfiprintf_r+0x210>)
 800a072:	f7f6 f8ad 	bl	80001d0 <memchr>
 800a076:	9b04      	ldr	r3, [sp, #16]
 800a078:	bb78      	cbnz	r0, 800a0da <_vfiprintf_r+0xfe>
 800a07a:	06d9      	lsls	r1, r3, #27
 800a07c:	bf44      	itt	mi
 800a07e:	2220      	movmi	r2, #32
 800a080:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a084:	071a      	lsls	r2, r3, #28
 800a086:	bf44      	itt	mi
 800a088:	222b      	movmi	r2, #43	; 0x2b
 800a08a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a08e:	782a      	ldrb	r2, [r5, #0]
 800a090:	2a2a      	cmp	r2, #42	; 0x2a
 800a092:	d02a      	beq.n	800a0ea <_vfiprintf_r+0x10e>
 800a094:	9a07      	ldr	r2, [sp, #28]
 800a096:	46a8      	mov	r8, r5
 800a098:	2000      	movs	r0, #0
 800a09a:	250a      	movs	r5, #10
 800a09c:	4641      	mov	r1, r8
 800a09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0a2:	3b30      	subs	r3, #48	; 0x30
 800a0a4:	2b09      	cmp	r3, #9
 800a0a6:	d969      	bls.n	800a17c <_vfiprintf_r+0x1a0>
 800a0a8:	b360      	cbz	r0, 800a104 <_vfiprintf_r+0x128>
 800a0aa:	e024      	b.n	800a0f6 <_vfiprintf_r+0x11a>
 800a0ac:	4b50      	ldr	r3, [pc, #320]	; (800a1f0 <_vfiprintf_r+0x214>)
 800a0ae:	429c      	cmp	r4, r3
 800a0b0:	d101      	bne.n	800a0b6 <_vfiprintf_r+0xda>
 800a0b2:	68b4      	ldr	r4, [r6, #8]
 800a0b4:	e7a2      	b.n	8009ffc <_vfiprintf_r+0x20>
 800a0b6:	4b4f      	ldr	r3, [pc, #316]	; (800a1f4 <_vfiprintf_r+0x218>)
 800a0b8:	429c      	cmp	r4, r3
 800a0ba:	bf08      	it	eq
 800a0bc:	68f4      	ldreq	r4, [r6, #12]
 800a0be:	e79d      	b.n	8009ffc <_vfiprintf_r+0x20>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f7ff fb1a 	bl	80096fc <__swsetup_r>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d09d      	beq.n	800a008 <_vfiprintf_r+0x2c>
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d0:	b01d      	add	sp, #116	; 0x74
 800a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d6:	46a8      	mov	r8, r5
 800a0d8:	e7a2      	b.n	800a020 <_vfiprintf_r+0x44>
 800a0da:	4a44      	ldr	r2, [pc, #272]	; (800a1ec <_vfiprintf_r+0x210>)
 800a0dc:	1a80      	subs	r0, r0, r2
 800a0de:	fa0b f000 	lsl.w	r0, fp, r0
 800a0e2:	4318      	orrs	r0, r3
 800a0e4:	9004      	str	r0, [sp, #16]
 800a0e6:	4645      	mov	r5, r8
 800a0e8:	e7be      	b.n	800a068 <_vfiprintf_r+0x8c>
 800a0ea:	9a03      	ldr	r2, [sp, #12]
 800a0ec:	1d11      	adds	r1, r2, #4
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	9103      	str	r1, [sp, #12]
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	db01      	blt.n	800a0fa <_vfiprintf_r+0x11e>
 800a0f6:	9207      	str	r2, [sp, #28]
 800a0f8:	e004      	b.n	800a104 <_vfiprintf_r+0x128>
 800a0fa:	4252      	negs	r2, r2
 800a0fc:	f043 0302 	orr.w	r3, r3, #2
 800a100:	9207      	str	r2, [sp, #28]
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	f898 3000 	ldrb.w	r3, [r8]
 800a108:	2b2e      	cmp	r3, #46	; 0x2e
 800a10a:	d10e      	bne.n	800a12a <_vfiprintf_r+0x14e>
 800a10c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a110:	2b2a      	cmp	r3, #42	; 0x2a
 800a112:	d138      	bne.n	800a186 <_vfiprintf_r+0x1aa>
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	1d1a      	adds	r2, r3, #4
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	9203      	str	r2, [sp, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bfb8      	it	lt
 800a120:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a124:	f108 0802 	add.w	r8, r8, #2
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	4d33      	ldr	r5, [pc, #204]	; (800a1f8 <_vfiprintf_r+0x21c>)
 800a12c:	f898 1000 	ldrb.w	r1, [r8]
 800a130:	2203      	movs	r2, #3
 800a132:	4628      	mov	r0, r5
 800a134:	f7f6 f84c 	bl	80001d0 <memchr>
 800a138:	b140      	cbz	r0, 800a14c <_vfiprintf_r+0x170>
 800a13a:	2340      	movs	r3, #64	; 0x40
 800a13c:	1b40      	subs	r0, r0, r5
 800a13e:	fa03 f000 	lsl.w	r0, r3, r0
 800a142:	9b04      	ldr	r3, [sp, #16]
 800a144:	4303      	orrs	r3, r0
 800a146:	f108 0801 	add.w	r8, r8, #1
 800a14a:	9304      	str	r3, [sp, #16]
 800a14c:	f898 1000 	ldrb.w	r1, [r8]
 800a150:	482a      	ldr	r0, [pc, #168]	; (800a1fc <_vfiprintf_r+0x220>)
 800a152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a156:	2206      	movs	r2, #6
 800a158:	f108 0701 	add.w	r7, r8, #1
 800a15c:	f7f6 f838 	bl	80001d0 <memchr>
 800a160:	2800      	cmp	r0, #0
 800a162:	d037      	beq.n	800a1d4 <_vfiprintf_r+0x1f8>
 800a164:	4b26      	ldr	r3, [pc, #152]	; (800a200 <_vfiprintf_r+0x224>)
 800a166:	bb1b      	cbnz	r3, 800a1b0 <_vfiprintf_r+0x1d4>
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	3307      	adds	r3, #7
 800a16c:	f023 0307 	bic.w	r3, r3, #7
 800a170:	3308      	adds	r3, #8
 800a172:	9303      	str	r3, [sp, #12]
 800a174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a176:	444b      	add	r3, r9
 800a178:	9309      	str	r3, [sp, #36]	; 0x24
 800a17a:	e750      	b.n	800a01e <_vfiprintf_r+0x42>
 800a17c:	fb05 3202 	mla	r2, r5, r2, r3
 800a180:	2001      	movs	r0, #1
 800a182:	4688      	mov	r8, r1
 800a184:	e78a      	b.n	800a09c <_vfiprintf_r+0xc0>
 800a186:	2300      	movs	r3, #0
 800a188:	f108 0801 	add.w	r8, r8, #1
 800a18c:	9305      	str	r3, [sp, #20]
 800a18e:	4619      	mov	r1, r3
 800a190:	250a      	movs	r5, #10
 800a192:	4640      	mov	r0, r8
 800a194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a198:	3a30      	subs	r2, #48	; 0x30
 800a19a:	2a09      	cmp	r2, #9
 800a19c:	d903      	bls.n	800a1a6 <_vfiprintf_r+0x1ca>
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0c3      	beq.n	800a12a <_vfiprintf_r+0x14e>
 800a1a2:	9105      	str	r1, [sp, #20]
 800a1a4:	e7c1      	b.n	800a12a <_vfiprintf_r+0x14e>
 800a1a6:	fb05 2101 	mla	r1, r5, r1, r2
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	4680      	mov	r8, r0
 800a1ae:	e7f0      	b.n	800a192 <_vfiprintf_r+0x1b6>
 800a1b0:	ab03      	add	r3, sp, #12
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <_vfiprintf_r+0x228>)
 800a1b8:	a904      	add	r1, sp, #16
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f3af 8000 	nop.w
 800a1c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a1c4:	4681      	mov	r9, r0
 800a1c6:	d1d5      	bne.n	800a174 <_vfiprintf_r+0x198>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	065b      	lsls	r3, r3, #25
 800a1cc:	f53f af7e 	bmi.w	800a0cc <_vfiprintf_r+0xf0>
 800a1d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1d2:	e77d      	b.n	800a0d0 <_vfiprintf_r+0xf4>
 800a1d4:	ab03      	add	r3, sp, #12
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	4622      	mov	r2, r4
 800a1da:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <_vfiprintf_r+0x228>)
 800a1dc:	a904      	add	r1, sp, #16
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f000 f888 	bl	800a2f4 <_printf_i>
 800a1e4:	e7ec      	b.n	800a1c0 <_vfiprintf_r+0x1e4>
 800a1e6:	bf00      	nop
 800a1e8:	0800ad54 	.word	0x0800ad54
 800a1ec:	0800ad94 	.word	0x0800ad94
 800a1f0:	0800ad74 	.word	0x0800ad74
 800a1f4:	0800ad34 	.word	0x0800ad34
 800a1f8:	0800ad9a 	.word	0x0800ad9a
 800a1fc:	0800ad9e 	.word	0x0800ad9e
 800a200:	00000000 	.word	0x00000000
 800a204:	08009fb7 	.word	0x08009fb7

0800a208 <_printf_common>:
 800a208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a20c:	4691      	mov	r9, r2
 800a20e:	461f      	mov	r7, r3
 800a210:	688a      	ldr	r2, [r1, #8]
 800a212:	690b      	ldr	r3, [r1, #16]
 800a214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a218:	4293      	cmp	r3, r2
 800a21a:	bfb8      	it	lt
 800a21c:	4613      	movlt	r3, r2
 800a21e:	f8c9 3000 	str.w	r3, [r9]
 800a222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a226:	4606      	mov	r6, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	b112      	cbz	r2, 800a232 <_printf_common+0x2a>
 800a22c:	3301      	adds	r3, #1
 800a22e:	f8c9 3000 	str.w	r3, [r9]
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	0699      	lsls	r1, r3, #26
 800a236:	bf42      	ittt	mi
 800a238:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a23c:	3302      	addmi	r3, #2
 800a23e:	f8c9 3000 	strmi.w	r3, [r9]
 800a242:	6825      	ldr	r5, [r4, #0]
 800a244:	f015 0506 	ands.w	r5, r5, #6
 800a248:	d107      	bne.n	800a25a <_printf_common+0x52>
 800a24a:	f104 0a19 	add.w	sl, r4, #25
 800a24e:	68e3      	ldr	r3, [r4, #12]
 800a250:	f8d9 2000 	ldr.w	r2, [r9]
 800a254:	1a9b      	subs	r3, r3, r2
 800a256:	42ab      	cmp	r3, r5
 800a258:	dc28      	bgt.n	800a2ac <_printf_common+0xa4>
 800a25a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a25e:	6822      	ldr	r2, [r4, #0]
 800a260:	3300      	adds	r3, #0
 800a262:	bf18      	it	ne
 800a264:	2301      	movne	r3, #1
 800a266:	0692      	lsls	r2, r2, #26
 800a268:	d42d      	bmi.n	800a2c6 <_printf_common+0xbe>
 800a26a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a26e:	4639      	mov	r1, r7
 800a270:	4630      	mov	r0, r6
 800a272:	47c0      	blx	r8
 800a274:	3001      	adds	r0, #1
 800a276:	d020      	beq.n	800a2ba <_printf_common+0xb2>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	68e5      	ldr	r5, [r4, #12]
 800a27c:	f8d9 2000 	ldr.w	r2, [r9]
 800a280:	f003 0306 	and.w	r3, r3, #6
 800a284:	2b04      	cmp	r3, #4
 800a286:	bf08      	it	eq
 800a288:	1aad      	subeq	r5, r5, r2
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	6922      	ldr	r2, [r4, #16]
 800a28e:	bf0c      	ite	eq
 800a290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a294:	2500      	movne	r5, #0
 800a296:	4293      	cmp	r3, r2
 800a298:	bfc4      	itt	gt
 800a29a:	1a9b      	subgt	r3, r3, r2
 800a29c:	18ed      	addgt	r5, r5, r3
 800a29e:	f04f 0900 	mov.w	r9, #0
 800a2a2:	341a      	adds	r4, #26
 800a2a4:	454d      	cmp	r5, r9
 800a2a6:	d11a      	bne.n	800a2de <_printf_common+0xd6>
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	e008      	b.n	800a2be <_printf_common+0xb6>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	4652      	mov	r2, sl
 800a2b0:	4639      	mov	r1, r7
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	47c0      	blx	r8
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	d103      	bne.n	800a2c2 <_printf_common+0xba>
 800a2ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c2:	3501      	adds	r5, #1
 800a2c4:	e7c3      	b.n	800a24e <_printf_common+0x46>
 800a2c6:	18e1      	adds	r1, r4, r3
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	2030      	movs	r0, #48	; 0x30
 800a2cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2d0:	4422      	add	r2, r4
 800a2d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2da:	3302      	adds	r3, #2
 800a2dc:	e7c5      	b.n	800a26a <_printf_common+0x62>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	47c0      	blx	r8
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d0e6      	beq.n	800a2ba <_printf_common+0xb2>
 800a2ec:	f109 0901 	add.w	r9, r9, #1
 800a2f0:	e7d8      	b.n	800a2a4 <_printf_common+0x9c>
	...

0800a2f4 <_printf_i>:
 800a2f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	7e09      	ldrb	r1, [r1, #24]
 800a300:	b085      	sub	sp, #20
 800a302:	296e      	cmp	r1, #110	; 0x6e
 800a304:	4617      	mov	r7, r2
 800a306:	4606      	mov	r6, r0
 800a308:	4698      	mov	r8, r3
 800a30a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a30c:	f000 80b3 	beq.w	800a476 <_printf_i+0x182>
 800a310:	d822      	bhi.n	800a358 <_printf_i+0x64>
 800a312:	2963      	cmp	r1, #99	; 0x63
 800a314:	d036      	beq.n	800a384 <_printf_i+0x90>
 800a316:	d80a      	bhi.n	800a32e <_printf_i+0x3a>
 800a318:	2900      	cmp	r1, #0
 800a31a:	f000 80b9 	beq.w	800a490 <_printf_i+0x19c>
 800a31e:	2958      	cmp	r1, #88	; 0x58
 800a320:	f000 8083 	beq.w	800a42a <_printf_i+0x136>
 800a324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a32c:	e032      	b.n	800a394 <_printf_i+0xa0>
 800a32e:	2964      	cmp	r1, #100	; 0x64
 800a330:	d001      	beq.n	800a336 <_printf_i+0x42>
 800a332:	2969      	cmp	r1, #105	; 0x69
 800a334:	d1f6      	bne.n	800a324 <_printf_i+0x30>
 800a336:	6820      	ldr	r0, [r4, #0]
 800a338:	6813      	ldr	r3, [r2, #0]
 800a33a:	0605      	lsls	r5, r0, #24
 800a33c:	f103 0104 	add.w	r1, r3, #4
 800a340:	d52a      	bpl.n	800a398 <_printf_i+0xa4>
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6011      	str	r1, [r2, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	da03      	bge.n	800a352 <_printf_i+0x5e>
 800a34a:	222d      	movs	r2, #45	; 0x2d
 800a34c:	425b      	negs	r3, r3
 800a34e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a352:	486f      	ldr	r0, [pc, #444]	; (800a510 <_printf_i+0x21c>)
 800a354:	220a      	movs	r2, #10
 800a356:	e039      	b.n	800a3cc <_printf_i+0xd8>
 800a358:	2973      	cmp	r1, #115	; 0x73
 800a35a:	f000 809d 	beq.w	800a498 <_printf_i+0x1a4>
 800a35e:	d808      	bhi.n	800a372 <_printf_i+0x7e>
 800a360:	296f      	cmp	r1, #111	; 0x6f
 800a362:	d020      	beq.n	800a3a6 <_printf_i+0xb2>
 800a364:	2970      	cmp	r1, #112	; 0x70
 800a366:	d1dd      	bne.n	800a324 <_printf_i+0x30>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	f043 0320 	orr.w	r3, r3, #32
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	e003      	b.n	800a37a <_printf_i+0x86>
 800a372:	2975      	cmp	r1, #117	; 0x75
 800a374:	d017      	beq.n	800a3a6 <_printf_i+0xb2>
 800a376:	2978      	cmp	r1, #120	; 0x78
 800a378:	d1d4      	bne.n	800a324 <_printf_i+0x30>
 800a37a:	2378      	movs	r3, #120	; 0x78
 800a37c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a380:	4864      	ldr	r0, [pc, #400]	; (800a514 <_printf_i+0x220>)
 800a382:	e055      	b.n	800a430 <_printf_i+0x13c>
 800a384:	6813      	ldr	r3, [r2, #0]
 800a386:	1d19      	adds	r1, r3, #4
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6011      	str	r1, [r2, #0]
 800a38c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a394:	2301      	movs	r3, #1
 800a396:	e08c      	b.n	800a4b2 <_printf_i+0x1be>
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6011      	str	r1, [r2, #0]
 800a39c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3a0:	bf18      	it	ne
 800a3a2:	b21b      	sxthne	r3, r3
 800a3a4:	e7cf      	b.n	800a346 <_printf_i+0x52>
 800a3a6:	6813      	ldr	r3, [r2, #0]
 800a3a8:	6825      	ldr	r5, [r4, #0]
 800a3aa:	1d18      	adds	r0, r3, #4
 800a3ac:	6010      	str	r0, [r2, #0]
 800a3ae:	0628      	lsls	r0, r5, #24
 800a3b0:	d501      	bpl.n	800a3b6 <_printf_i+0xc2>
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	e002      	b.n	800a3bc <_printf_i+0xc8>
 800a3b6:	0668      	lsls	r0, r5, #25
 800a3b8:	d5fb      	bpl.n	800a3b2 <_printf_i+0xbe>
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	4854      	ldr	r0, [pc, #336]	; (800a510 <_printf_i+0x21c>)
 800a3be:	296f      	cmp	r1, #111	; 0x6f
 800a3c0:	bf14      	ite	ne
 800a3c2:	220a      	movne	r2, #10
 800a3c4:	2208      	moveq	r2, #8
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3cc:	6865      	ldr	r5, [r4, #4]
 800a3ce:	60a5      	str	r5, [r4, #8]
 800a3d0:	2d00      	cmp	r5, #0
 800a3d2:	f2c0 8095 	blt.w	800a500 <_printf_i+0x20c>
 800a3d6:	6821      	ldr	r1, [r4, #0]
 800a3d8:	f021 0104 	bic.w	r1, r1, #4
 800a3dc:	6021      	str	r1, [r4, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d13d      	bne.n	800a45e <_printf_i+0x16a>
 800a3e2:	2d00      	cmp	r5, #0
 800a3e4:	f040 808e 	bne.w	800a504 <_printf_i+0x210>
 800a3e8:	4665      	mov	r5, ip
 800a3ea:	2a08      	cmp	r2, #8
 800a3ec:	d10b      	bne.n	800a406 <_printf_i+0x112>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	07db      	lsls	r3, r3, #31
 800a3f2:	d508      	bpl.n	800a406 <_printf_i+0x112>
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	6862      	ldr	r2, [r4, #4]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	bfde      	ittt	le
 800a3fc:	2330      	movle	r3, #48	; 0x30
 800a3fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a402:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a406:	ebac 0305 	sub.w	r3, ip, r5
 800a40a:	6123      	str	r3, [r4, #16]
 800a40c:	f8cd 8000 	str.w	r8, [sp]
 800a410:	463b      	mov	r3, r7
 800a412:	aa03      	add	r2, sp, #12
 800a414:	4621      	mov	r1, r4
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff fef6 	bl	800a208 <_printf_common>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d14d      	bne.n	800a4bc <_printf_i+0x1c8>
 800a420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a424:	b005      	add	sp, #20
 800a426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a42a:	4839      	ldr	r0, [pc, #228]	; (800a510 <_printf_i+0x21c>)
 800a42c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a430:	6813      	ldr	r3, [r2, #0]
 800a432:	6821      	ldr	r1, [r4, #0]
 800a434:	1d1d      	adds	r5, r3, #4
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6015      	str	r5, [r2, #0]
 800a43a:	060a      	lsls	r2, r1, #24
 800a43c:	d50b      	bpl.n	800a456 <_printf_i+0x162>
 800a43e:	07ca      	lsls	r2, r1, #31
 800a440:	bf44      	itt	mi
 800a442:	f041 0120 	orrmi.w	r1, r1, #32
 800a446:	6021      	strmi	r1, [r4, #0]
 800a448:	b91b      	cbnz	r3, 800a452 <_printf_i+0x15e>
 800a44a:	6822      	ldr	r2, [r4, #0]
 800a44c:	f022 0220 	bic.w	r2, r2, #32
 800a450:	6022      	str	r2, [r4, #0]
 800a452:	2210      	movs	r2, #16
 800a454:	e7b7      	b.n	800a3c6 <_printf_i+0xd2>
 800a456:	064d      	lsls	r5, r1, #25
 800a458:	bf48      	it	mi
 800a45a:	b29b      	uxthmi	r3, r3
 800a45c:	e7ef      	b.n	800a43e <_printf_i+0x14a>
 800a45e:	4665      	mov	r5, ip
 800a460:	fbb3 f1f2 	udiv	r1, r3, r2
 800a464:	fb02 3311 	mls	r3, r2, r1, r3
 800a468:	5cc3      	ldrb	r3, [r0, r3]
 800a46a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a46e:	460b      	mov	r3, r1
 800a470:	2900      	cmp	r1, #0
 800a472:	d1f5      	bne.n	800a460 <_printf_i+0x16c>
 800a474:	e7b9      	b.n	800a3ea <_printf_i+0xf6>
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	6825      	ldr	r5, [r4, #0]
 800a47a:	6961      	ldr	r1, [r4, #20]
 800a47c:	1d18      	adds	r0, r3, #4
 800a47e:	6010      	str	r0, [r2, #0]
 800a480:	0628      	lsls	r0, r5, #24
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	d501      	bpl.n	800a48a <_printf_i+0x196>
 800a486:	6019      	str	r1, [r3, #0]
 800a488:	e002      	b.n	800a490 <_printf_i+0x19c>
 800a48a:	066a      	lsls	r2, r5, #25
 800a48c:	d5fb      	bpl.n	800a486 <_printf_i+0x192>
 800a48e:	8019      	strh	r1, [r3, #0]
 800a490:	2300      	movs	r3, #0
 800a492:	6123      	str	r3, [r4, #16]
 800a494:	4665      	mov	r5, ip
 800a496:	e7b9      	b.n	800a40c <_printf_i+0x118>
 800a498:	6813      	ldr	r3, [r2, #0]
 800a49a:	1d19      	adds	r1, r3, #4
 800a49c:	6011      	str	r1, [r2, #0]
 800a49e:	681d      	ldr	r5, [r3, #0]
 800a4a0:	6862      	ldr	r2, [r4, #4]
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f7f5 fe93 	bl	80001d0 <memchr>
 800a4aa:	b108      	cbz	r0, 800a4b0 <_printf_i+0x1bc>
 800a4ac:	1b40      	subs	r0, r0, r5
 800a4ae:	6060      	str	r0, [r4, #4]
 800a4b0:	6863      	ldr	r3, [r4, #4]
 800a4b2:	6123      	str	r3, [r4, #16]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ba:	e7a7      	b.n	800a40c <_printf_i+0x118>
 800a4bc:	6923      	ldr	r3, [r4, #16]
 800a4be:	462a      	mov	r2, r5
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	47c0      	blx	r8
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	d0aa      	beq.n	800a420 <_printf_i+0x12c>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	079b      	lsls	r3, r3, #30
 800a4ce:	d413      	bmi.n	800a4f8 <_printf_i+0x204>
 800a4d0:	68e0      	ldr	r0, [r4, #12]
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	4298      	cmp	r0, r3
 800a4d6:	bfb8      	it	lt
 800a4d8:	4618      	movlt	r0, r3
 800a4da:	e7a3      	b.n	800a424 <_printf_i+0x130>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	464a      	mov	r2, r9
 800a4e0:	4639      	mov	r1, r7
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	47c0      	blx	r8
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	d09a      	beq.n	800a420 <_printf_i+0x12c>
 800a4ea:	3501      	adds	r5, #1
 800a4ec:	68e3      	ldr	r3, [r4, #12]
 800a4ee:	9a03      	ldr	r2, [sp, #12]
 800a4f0:	1a9b      	subs	r3, r3, r2
 800a4f2:	42ab      	cmp	r3, r5
 800a4f4:	dcf2      	bgt.n	800a4dc <_printf_i+0x1e8>
 800a4f6:	e7eb      	b.n	800a4d0 <_printf_i+0x1dc>
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	f104 0919 	add.w	r9, r4, #25
 800a4fe:	e7f5      	b.n	800a4ec <_printf_i+0x1f8>
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1ac      	bne.n	800a45e <_printf_i+0x16a>
 800a504:	7803      	ldrb	r3, [r0, #0]
 800a506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a50a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a50e:	e76c      	b.n	800a3ea <_printf_i+0xf6>
 800a510:	0800ada5 	.word	0x0800ada5
 800a514:	0800adb6 	.word	0x0800adb6

0800a518 <_putc_r>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	460d      	mov	r5, r1
 800a51c:	4614      	mov	r4, r2
 800a51e:	4606      	mov	r6, r0
 800a520:	b118      	cbz	r0, 800a52a <_putc_r+0x12>
 800a522:	6983      	ldr	r3, [r0, #24]
 800a524:	b90b      	cbnz	r3, 800a52a <_putc_r+0x12>
 800a526:	f7ff fa47 	bl	80099b8 <__sinit>
 800a52a:	4b13      	ldr	r3, [pc, #76]	; (800a578 <_putc_r+0x60>)
 800a52c:	429c      	cmp	r4, r3
 800a52e:	d112      	bne.n	800a556 <_putc_r+0x3e>
 800a530:	6874      	ldr	r4, [r6, #4]
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	3b01      	subs	r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	60a3      	str	r3, [r4, #8]
 800a53a:	da16      	bge.n	800a56a <_putc_r+0x52>
 800a53c:	69a2      	ldr	r2, [r4, #24]
 800a53e:	4293      	cmp	r3, r2
 800a540:	db02      	blt.n	800a548 <_putc_r+0x30>
 800a542:	b2eb      	uxtb	r3, r5
 800a544:	2b0a      	cmp	r3, #10
 800a546:	d110      	bne.n	800a56a <_putc_r+0x52>
 800a548:	4622      	mov	r2, r4
 800a54a:	4629      	mov	r1, r5
 800a54c:	4630      	mov	r0, r6
 800a54e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a552:	f7ff b881 	b.w	8009658 <__swbuf_r>
 800a556:	4b09      	ldr	r3, [pc, #36]	; (800a57c <_putc_r+0x64>)
 800a558:	429c      	cmp	r4, r3
 800a55a:	d101      	bne.n	800a560 <_putc_r+0x48>
 800a55c:	68b4      	ldr	r4, [r6, #8]
 800a55e:	e7e8      	b.n	800a532 <_putc_r+0x1a>
 800a560:	4b07      	ldr	r3, [pc, #28]	; (800a580 <_putc_r+0x68>)
 800a562:	429c      	cmp	r4, r3
 800a564:	bf08      	it	eq
 800a566:	68f4      	ldreq	r4, [r6, #12]
 800a568:	e7e3      	b.n	800a532 <_putc_r+0x1a>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	6022      	str	r2, [r4, #0]
 800a570:	701d      	strb	r5, [r3, #0]
 800a572:	b2e8      	uxtb	r0, r5
 800a574:	bd70      	pop	{r4, r5, r6, pc}
 800a576:	bf00      	nop
 800a578:	0800ad54 	.word	0x0800ad54
 800a57c:	0800ad74 	.word	0x0800ad74
 800a580:	0800ad34 	.word	0x0800ad34

0800a584 <_sbrk_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4c06      	ldr	r4, [pc, #24]	; (800a5a0 <_sbrk_r+0x1c>)
 800a588:	2300      	movs	r3, #0
 800a58a:	4605      	mov	r5, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	f7fe fc18 	bl	8008dc4 <_sbrk>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_sbrk_r+0x1a>
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_sbrk_r+0x1a>
 800a59c:	602b      	str	r3, [r5, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	20000534 	.word	0x20000534

0800a5a4 <__sread>:
 800a5a4:	b510      	push	{r4, lr}
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ac:	f000 f8e0 	bl	800a770 <_read_r>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	bfab      	itete	ge
 800a5b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5b8:	181b      	addge	r3, r3, r0
 800a5ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5be:	bfac      	ite	ge
 800a5c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5c2:	81a3      	strhlt	r3, [r4, #12]
 800a5c4:	bd10      	pop	{r4, pc}

0800a5c6 <__swrite>:
 800a5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ca:	461f      	mov	r7, r3
 800a5cc:	898b      	ldrh	r3, [r1, #12]
 800a5ce:	05db      	lsls	r3, r3, #23
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	4616      	mov	r6, r2
 800a5d6:	d505      	bpl.n	800a5e4 <__swrite+0x1e>
 800a5d8:	2302      	movs	r3, #2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e0:	f000 f868 	bl	800a6b4 <_lseek_r>
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ee:	81a3      	strh	r3, [r4, #12]
 800a5f0:	4632      	mov	r2, r6
 800a5f2:	463b      	mov	r3, r7
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fa:	f000 b817 	b.w	800a62c <_write_r>

0800a5fe <__sseek>:
 800a5fe:	b510      	push	{r4, lr}
 800a600:	460c      	mov	r4, r1
 800a602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a606:	f000 f855 	bl	800a6b4 <_lseek_r>
 800a60a:	1c43      	adds	r3, r0, #1
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	bf15      	itete	ne
 800a610:	6560      	strne	r0, [r4, #84]	; 0x54
 800a612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a61a:	81a3      	strheq	r3, [r4, #12]
 800a61c:	bf18      	it	ne
 800a61e:	81a3      	strhne	r3, [r4, #12]
 800a620:	bd10      	pop	{r4, pc}

0800a622 <__sclose>:
 800a622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a626:	f000 b813 	b.w	800a650 <_close_r>
	...

0800a62c <_write_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4c07      	ldr	r4, [pc, #28]	; (800a64c <_write_r+0x20>)
 800a630:	4605      	mov	r5, r0
 800a632:	4608      	mov	r0, r1
 800a634:	4611      	mov	r1, r2
 800a636:	2200      	movs	r2, #0
 800a638:	6022      	str	r2, [r4, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	f7fe fb71 	bl	8008d22 <_write>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_write_r+0x1e>
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	b103      	cbz	r3, 800a64a <_write_r+0x1e>
 800a648:	602b      	str	r3, [r5, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	20000534 	.word	0x20000534

0800a650 <_close_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	4c06      	ldr	r4, [pc, #24]	; (800a66c <_close_r+0x1c>)
 800a654:	2300      	movs	r3, #0
 800a656:	4605      	mov	r5, r0
 800a658:	4608      	mov	r0, r1
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	f7fe fb7d 	bl	8008d5a <_close>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d102      	bne.n	800a66a <_close_r+0x1a>
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	b103      	cbz	r3, 800a66a <_close_r+0x1a>
 800a668:	602b      	str	r3, [r5, #0]
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	20000534 	.word	0x20000534

0800a670 <_fstat_r>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4c07      	ldr	r4, [pc, #28]	; (800a690 <_fstat_r+0x20>)
 800a674:	2300      	movs	r3, #0
 800a676:	4605      	mov	r5, r0
 800a678:	4608      	mov	r0, r1
 800a67a:	4611      	mov	r1, r2
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	f7fe fb78 	bl	8008d72 <_fstat>
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	d102      	bne.n	800a68c <_fstat_r+0x1c>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	b103      	cbz	r3, 800a68c <_fstat_r+0x1c>
 800a68a:	602b      	str	r3, [r5, #0]
 800a68c:	bd38      	pop	{r3, r4, r5, pc}
 800a68e:	bf00      	nop
 800a690:	20000534 	.word	0x20000534

0800a694 <_isatty_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4c06      	ldr	r4, [pc, #24]	; (800a6b0 <_isatty_r+0x1c>)
 800a698:	2300      	movs	r3, #0
 800a69a:	4605      	mov	r5, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	6023      	str	r3, [r4, #0]
 800a6a0:	f7fe fb77 	bl	8008d92 <_isatty>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_isatty_r+0x1a>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_isatty_r+0x1a>
 800a6ac:	602b      	str	r3, [r5, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20000534 	.word	0x20000534

0800a6b4 <_lseek_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4c07      	ldr	r4, [pc, #28]	; (800a6d4 <_lseek_r+0x20>)
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	6022      	str	r2, [r4, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7fe fb70 	bl	8008da8 <_lseek>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_lseek_r+0x1e>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_lseek_r+0x1e>
 800a6d0:	602b      	str	r3, [r5, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	20000534 	.word	0x20000534

0800a6d8 <memcpy>:
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	1e43      	subs	r3, r0, #1
 800a6dc:	440a      	add	r2, r1
 800a6de:	4291      	cmp	r1, r2
 800a6e0:	d100      	bne.n	800a6e4 <memcpy+0xc>
 800a6e2:	bd10      	pop	{r4, pc}
 800a6e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6ec:	e7f7      	b.n	800a6de <memcpy+0x6>

0800a6ee <memmove>:
 800a6ee:	4288      	cmp	r0, r1
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	eb01 0302 	add.w	r3, r1, r2
 800a6f6:	d807      	bhi.n	800a708 <memmove+0x1a>
 800a6f8:	1e42      	subs	r2, r0, #1
 800a6fa:	4299      	cmp	r1, r3
 800a6fc:	d00a      	beq.n	800a714 <memmove+0x26>
 800a6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a702:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a706:	e7f8      	b.n	800a6fa <memmove+0xc>
 800a708:	4283      	cmp	r3, r0
 800a70a:	d9f5      	bls.n	800a6f8 <memmove+0xa>
 800a70c:	1881      	adds	r1, r0, r2
 800a70e:	1ad2      	subs	r2, r2, r3
 800a710:	42d3      	cmn	r3, r2
 800a712:	d100      	bne.n	800a716 <memmove+0x28>
 800a714:	bd10      	pop	{r4, pc}
 800a716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a71a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a71e:	e7f7      	b.n	800a710 <memmove+0x22>

0800a720 <__malloc_lock>:
 800a720:	4770      	bx	lr

0800a722 <__malloc_unlock>:
 800a722:	4770      	bx	lr

0800a724 <_realloc_r>:
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a726:	4607      	mov	r7, r0
 800a728:	4614      	mov	r4, r2
 800a72a:	460e      	mov	r6, r1
 800a72c:	b921      	cbnz	r1, 800a738 <_realloc_r+0x14>
 800a72e:	4611      	mov	r1, r2
 800a730:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a734:	f7ff ba7c 	b.w	8009c30 <_malloc_r>
 800a738:	b922      	cbnz	r2, 800a744 <_realloc_r+0x20>
 800a73a:	f7ff fa2b 	bl	8009b94 <_free_r>
 800a73e:	4625      	mov	r5, r4
 800a740:	4628      	mov	r0, r5
 800a742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a744:	f000 f826 	bl	800a794 <_malloc_usable_size_r>
 800a748:	42a0      	cmp	r0, r4
 800a74a:	d20f      	bcs.n	800a76c <_realloc_r+0x48>
 800a74c:	4621      	mov	r1, r4
 800a74e:	4638      	mov	r0, r7
 800a750:	f7ff fa6e 	bl	8009c30 <_malloc_r>
 800a754:	4605      	mov	r5, r0
 800a756:	2800      	cmp	r0, #0
 800a758:	d0f2      	beq.n	800a740 <_realloc_r+0x1c>
 800a75a:	4631      	mov	r1, r6
 800a75c:	4622      	mov	r2, r4
 800a75e:	f7ff ffbb 	bl	800a6d8 <memcpy>
 800a762:	4631      	mov	r1, r6
 800a764:	4638      	mov	r0, r7
 800a766:	f7ff fa15 	bl	8009b94 <_free_r>
 800a76a:	e7e9      	b.n	800a740 <_realloc_r+0x1c>
 800a76c:	4635      	mov	r5, r6
 800a76e:	e7e7      	b.n	800a740 <_realloc_r+0x1c>

0800a770 <_read_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4c07      	ldr	r4, [pc, #28]	; (800a790 <_read_r+0x20>)
 800a774:	4605      	mov	r5, r0
 800a776:	4608      	mov	r0, r1
 800a778:	4611      	mov	r1, r2
 800a77a:	2200      	movs	r2, #0
 800a77c:	6022      	str	r2, [r4, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	f7fe fab2 	bl	8008ce8 <_read>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_read_r+0x1e>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_read_r+0x1e>
 800a78c:	602b      	str	r3, [r5, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20000534 	.word	0x20000534

0800a794 <_malloc_usable_size_r>:
 800a794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a798:	1f18      	subs	r0, r3, #4
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bfbc      	itt	lt
 800a79e:	580b      	ldrlt	r3, [r1, r0]
 800a7a0:	18c0      	addlt	r0, r0, r3
 800a7a2:	4770      	bx	lr

0800a7a4 <_init>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	bf00      	nop
 800a7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7aa:	bc08      	pop	{r3}
 800a7ac:	469e      	mov	lr, r3
 800a7ae:	4770      	bx	lr

0800a7b0 <_fini>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr
